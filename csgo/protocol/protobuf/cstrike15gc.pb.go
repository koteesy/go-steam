// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: cstrike15_gcmessages.proto

package protobuf

import (
	
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECsgoGCMsg int32

const (
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Base                                   ECsgoGCMsg = 9100
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingStart                       ECsgoGCMsg = 9101
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingStop                        ECsgoGCMsg = 9102
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing           ECsgoGCMsg = 9103
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate             ECsgoGCMsg = 9104
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve            ECsgoGCMsg = 9105
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse   ECsgoGCMsg = 9106
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve            ECsgoGCMsg = 9107
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats            ECsgoGCMsg = 9108
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello              ECsgoGCMsg = 9109
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello              ECsgoGCMsg = 9110
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd              ECsgoGCMsg = 9111
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon            ECsgoGCMsg = 9112
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick               ECsgoGCMsg = 9113
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm            ECsgoGCMsg = 9114
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats          ECsgoGCMsg = 9115
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate         ECsgoGCMsg = 9116
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate       ECsgoGCMsg = 9117
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty       ECsgoGCMsg = 9118
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportPlayer                     ECsgoGCMsg = 9119
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportServer                     ECsgoGCMsg = 9120
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayer                    ECsgoGCMsg = 9121
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportResponse                   ECsgoGCMsg = 9122
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery               ECsgoGCMsg = 9123
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse       ECsgoGCMsg = 9124
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_WatchInfoUsers                         ECsgoGCMsg = 9126
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile            ECsgoGCMsg = 9127
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayersProfile                         ECsgoGCMsg = 9128
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate              ECsgoGCMsg = 9131
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment          ECsgoGCMsg = 9132
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus              ECsgoGCMsg = 9133
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientTextMsg                       ECsgoGCMsg = 9134
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCTextMsg                       ECsgoGCMsg = 9135
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops                 ECsgoGCMsg = 9136
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification        ECsgoGCMsg = 9137
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2         ECsgoGCMsg = 9138
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchList                              ECsgoGCMsg = 9139
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames       ECsgoGCMsg = 9140
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames        ECsgoGCMsg = 9141
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate             ECsgoGCMsg = 9142
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo         ECsgoGCMsg = 9144
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ECsgoGCMsg = 9145
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames        ECsgoGCMsg = 9146
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo           ECsgoGCMsg = 9147
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest                ECsgoGCMsg = 9148
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse               ECsgoGCMsg = 9149
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo         ECsgoGCMsg = 9150
	ECsgoGCMsg_k_EMsgGCToGCReloadVersions                                  ECsgoGCMsg = 9151
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote                 ECsgoGCMsg = 9152
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Server2GCClientValidate                ECsgoGCMsg = 9153
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser        ECsgoGCMsg = 9154
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure   ECsgoGCMsg = 9155
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest   ECsgoGCMsg = 9156
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse  ECsgoGCMsg = 9157
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_AccountPrivacySettings                 ECsgoGCMsg = 9158
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_SetMyActivityInfo                      ECsgoGCMsg = 9159
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions  ECsgoGCMsg = 9160
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions   ECsgoGCMsg = 9161
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_DraftSummary                           ECsgoGCMsg = 9162
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData            ECsgoGCMsg = 9163
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestJoinServerData            ECsgoGCMsg = 9164
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestNewMission                ECsgoGCMsg = 9165
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded              ECsgoGCMsg = 9166
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo                ECsgoGCMsg = 9167
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Subscribe                               ECsgoGCMsg = 9168
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Unsubscribe                             ECsgoGCMsg = 9169
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Play                                    ECsgoGCMsg = 9170
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_AcknowledgePenalty                     ECsgoGCMsg = 9171
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin           ECsgoGCMsg = 9172
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientGlobalStats                   ECsgoGCMsg = 9173
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCStreamUnlock                  ECsgoGCMsg = 9174
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_FantasyRequestClientData               ECsgoGCMsg = 9175
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_FantasyUpdateClientData                ECsgoGCMsg = 9176
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket          ECsgoGCMsg = 9177
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientToGCRequestTicket                ECsgoGCMsg = 9178
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientToGCRequestElevate               ECsgoGCMsg = 9179
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat                             ECsgoGCMsg = 9180
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat_Subscribe                   ECsgoGCMsg = 9181
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe                 ECsgoGCMsg = 9182
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientAuthKeyCode                      ECsgoGCMsg = 9183
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GotvSyncPacket                         ECsgoGCMsg = 9184
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPlayerDecalSign                  ECsgoGCMsg = 9185
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientLogonFatalError                  ECsgoGCMsg = 9187
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPollState                        ECsgoGCMsg = 9188
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Register                         ECsgoGCMsg = 9189
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Unregister                       ECsgoGCMsg = 9190
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Search                           ECsgoGCMsg = 9191
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Invite                           ECsgoGCMsg = 9192
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Account_RequestCoPlays                 ECsgoGCMsg = 9193
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientGCRankUpdate                     ECsgoGCMsg = 9194
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestOffers                    ECsgoGCMsg = 9195
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientAccountBalance                   ECsgoGCMsg = 9196
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPartyJoinRelay                   ECsgoGCMsg = 9197
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPartyWarning                     ECsgoGCMsg = 9198
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial       ECsgoGCMsg = 9199
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_SetEventFavorite                       ECsgoGCMsg = 9200
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GetEventFavorites_Request              ECsgoGCMsg = 9201
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPerfReport                       ECsgoGCMsg = 9202
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GetEventFavorites_Response             ECsgoGCMsg = 9203
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestSouvenir                  ECsgoGCMsg = 9204
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportValidation                 ECsgoGCMsg = 9205
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode              ECsgoGCMsg = 9206
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientRequestValidation             ECsgoGCMsg = 9207
)

// Enum value maps for ECsgoGCMsg.
var (
	ECsgoGCMsg_name = map[int32]string{
		9100: "k_EMsgGCCStrike15_v2_Base",
		9101: "k_EMsgGCCStrike15_v2_MatchmakingStart",
		9102: "k_EMsgGCCStrike15_v2_MatchmakingStop",
		9103: "k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing",
		9104: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate",
		9105: "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve",
		9106: "k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse",
		9107: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve",
		9108: "k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats",
		9109: "k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello",
		9110: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello",
		9111: "k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd",
		9112: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon",
		9113: "k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick",
		9114: "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm",
		9115: "k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats",
		9116: "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate",
		9117: "k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate",
		9118: "k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty",
		9119: "k_EMsgGCCStrike15_v2_ClientReportPlayer",
		9120: "k_EMsgGCCStrike15_v2_ClientReportServer",
		9121: "k_EMsgGCCStrike15_v2_ClientCommendPlayer",
		9122: "k_EMsgGCCStrike15_v2_ClientReportResponse",
		9123: "k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery",
		9124: "k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse",
		9126: "k_EMsgGCCStrike15_v2_WatchInfoUsers",
		9127: "k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile",
		9128: "k_EMsgGCCStrike15_v2_PlayersProfile",
		9131: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate",
		9132: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment",
		9133: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus",
		9134: "k_EMsgGCCStrike15_v2_GC2ClientTextMsg",
		9135: "k_EMsgGCCStrike15_v2_Client2GCTextMsg",
		9136: "k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops",
		9137: "k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification",
		9138: "k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2",
		9139: "k_EMsgGCCStrike15_v2_MatchList",
		9140: "k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames",
		9141: "k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames",
		9142: "k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate",
		9144: "k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo",
		9145: "k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification",
		9146: "k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames",
		9147: "k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo",
		9148: "k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest",
		9149: "k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse",
		9150: "k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo",
		9151: "k_EMsgGCToGCReloadVersions",
		9152: "k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote",
		9153: "k_EMsgGCCStrike15_v2_Server2GCClientValidate",
		9154: "k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser",
		9155: "k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure",
		9156: "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest",
		9157: "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse",
		9158: "k_EMsgGCCStrike15_v2_AccountPrivacySettings",
		9159: "k_EMsgGCCStrike15_v2_SetMyActivityInfo",
		9160: "k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions",
		9161: "k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions",
		9162: "k_EMsgGCCStrike15_v2_DraftSummary",
		9163: "k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData",
		9164: "k_EMsgGCCStrike15_v2_ClientRequestJoinServerData",
		9165: "k_EMsgGCCStrike15_v2_ClientRequestNewMission",
		9166: "k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded",
		9167: "k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo",
		9168: "k_EMsgGC_GlobalGame_Subscribe",
		9169: "k_EMsgGC_GlobalGame_Unsubscribe",
		9170: "k_EMsgGC_GlobalGame_Play",
		9171: "k_EMsgGCCStrike15_v2_AcknowledgePenalty",
		9172: "k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin",
		9173: "k_EMsgGCCStrike15_v2_GC2ClientGlobalStats",
		9174: "k_EMsgGCCStrike15_v2_Client2GCStreamUnlock",
		9175: "k_EMsgGCCStrike15_v2_FantasyRequestClientData",
		9176: "k_EMsgGCCStrike15_v2_FantasyUpdateClientData",
		9177: "k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket",
		9178: "k_EMsgGCCStrike15_v2_ClientToGCRequestTicket",
		9179: "k_EMsgGCCStrike15_v2_ClientToGCRequestElevate",
		9180: "k_EMsgGCCStrike15_v2_GlobalChat",
		9181: "k_EMsgGCCStrike15_v2_GlobalChat_Subscribe",
		9182: "k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe",
		9183: "k_EMsgGCCStrike15_v2_ClientAuthKeyCode",
		9184: "k_EMsgGCCStrike15_v2_GotvSyncPacket",
		9185: "k_EMsgGCCStrike15_v2_ClientPlayerDecalSign",
		9187: "k_EMsgGCCStrike15_v2_ClientLogonFatalError",
		9188: "k_EMsgGCCStrike15_v2_ClientPollState",
		9189: "k_EMsgGCCStrike15_v2_Party_Register",
		9190: "k_EMsgGCCStrike15_v2_Party_Unregister",
		9191: "k_EMsgGCCStrike15_v2_Party_Search",
		9192: "k_EMsgGCCStrike15_v2_Party_Invite",
		9193: "k_EMsgGCCStrike15_v2_Account_RequestCoPlays",
		9194: "k_EMsgGCCStrike15_v2_ClientGCRankUpdate",
		9195: "k_EMsgGCCStrike15_v2_ClientRequestOffers",
		9196: "k_EMsgGCCStrike15_v2_ClientAccountBalance",
		9197: "k_EMsgGCCStrike15_v2_ClientPartyJoinRelay",
		9198: "k_EMsgGCCStrike15_v2_ClientPartyWarning",
		9199: "k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial",
		9200: "k_EMsgGCCStrike15_v2_SetEventFavorite",
		9201: "k_EMsgGCCStrike15_v2_GetEventFavorites_Request",
		9202: "k_EMsgGCCStrike15_v2_ClientPerfReport",
		9203: "k_EMsgGCCStrike15_v2_GetEventFavorites_Response",
		9204: "k_EMsgGCCStrike15_v2_ClientRequestSouvenir",
		9205: "k_EMsgGCCStrike15_v2_ClientReportValidation",
		9206: "k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode",
		9207: "k_EMsgGCCStrike15_v2_GC2ClientRequestValidation",
	}
	ECsgoGCMsg_value = map[string]int32{
		"k_EMsgGCCStrike15_v2_Base":                                   9100,
		"k_EMsgGCCStrike15_v2_MatchmakingStart":                       9101,
		"k_EMsgGCCStrike15_v2_MatchmakingStop":                        9102,
		"k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing":           9103,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate":             9104,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve":            9105,
		"k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse":   9106,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve":            9107,
		"k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats":            9108,
		"k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello":              9109,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello":              9110,
		"k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd":              9111,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon":            9112,
		"k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick":               9113,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm":            9114,
		"k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats":          9115,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate":         9116,
		"k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate":       9117,
		"k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty":       9118,
		"k_EMsgGCCStrike15_v2_ClientReportPlayer":                     9119,
		"k_EMsgGCCStrike15_v2_ClientReportServer":                     9120,
		"k_EMsgGCCStrike15_v2_ClientCommendPlayer":                    9121,
		"k_EMsgGCCStrike15_v2_ClientReportResponse":                   9122,
		"k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery":               9123,
		"k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse":       9124,
		"k_EMsgGCCStrike15_v2_WatchInfoUsers":                         9126,
		"k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile":            9127,
		"k_EMsgGCCStrike15_v2_PlayersProfile":                         9128,
		"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate":              9131,
		"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment":          9132,
		"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus":              9133,
		"k_EMsgGCCStrike15_v2_GC2ClientTextMsg":                       9134,
		"k_EMsgGCCStrike15_v2_Client2GCTextMsg":                       9135,
		"k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops":                 9136,
		"k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification":        9137,
		"k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2":         9138,
		"k_EMsgGCCStrike15_v2_MatchList":                              9139,
		"k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames":       9140,
		"k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames":        9141,
		"k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate":             9142,
		"k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo":         9144,
		"k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification": 9145,
		"k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames":        9146,
		"k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo":           9147,
		"k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest":                9148,
		"k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse":               9149,
		"k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo":         9150,
		"k_EMsgGCToGCReloadVersions":                                  9151,
		"k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote":                 9152,
		"k_EMsgGCCStrike15_v2_Server2GCClientValidate":                9153,
		"k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser":        9154,
		"k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure":   9155,
		"k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest":   9156,
		"k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse":  9157,
		"k_EMsgGCCStrike15_v2_AccountPrivacySettings":                 9158,
		"k_EMsgGCCStrike15_v2_SetMyActivityInfo":                      9159,
		"k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions":  9160,
		"k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions":   9161,
		"k_EMsgGCCStrike15_v2_DraftSummary":                           9162,
		"k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData":            9163,
		"k_EMsgGCCStrike15_v2_ClientRequestJoinServerData":            9164,
		"k_EMsgGCCStrike15_v2_ClientRequestNewMission":                9165,
		"k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded":              9166,
		"k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo":                9167,
		"k_EMsgGC_GlobalGame_Subscribe":                               9168,
		"k_EMsgGC_GlobalGame_Unsubscribe":                             9169,
		"k_EMsgGC_GlobalGame_Play":                                    9170,
		"k_EMsgGCCStrike15_v2_AcknowledgePenalty":                     9171,
		"k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin":           9172,
		"k_EMsgGCCStrike15_v2_GC2ClientGlobalStats":                   9173,
		"k_EMsgGCCStrike15_v2_Client2GCStreamUnlock":                  9174,
		"k_EMsgGCCStrike15_v2_FantasyRequestClientData":               9175,
		"k_EMsgGCCStrike15_v2_FantasyUpdateClientData":                9176,
		"k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket":          9177,
		"k_EMsgGCCStrike15_v2_ClientToGCRequestTicket":                9178,
		"k_EMsgGCCStrike15_v2_ClientToGCRequestElevate":               9179,
		"k_EMsgGCCStrike15_v2_GlobalChat":                             9180,
		"k_EMsgGCCStrike15_v2_GlobalChat_Subscribe":                   9181,
		"k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe":                 9182,
		"k_EMsgGCCStrike15_v2_ClientAuthKeyCode":                      9183,
		"k_EMsgGCCStrike15_v2_GotvSyncPacket":                         9184,
		"k_EMsgGCCStrike15_v2_ClientPlayerDecalSign":                  9185,
		"k_EMsgGCCStrike15_v2_ClientLogonFatalError":                  9187,
		"k_EMsgGCCStrike15_v2_ClientPollState":                        9188,
		"k_EMsgGCCStrike15_v2_Party_Register":                         9189,
		"k_EMsgGCCStrike15_v2_Party_Unregister":                       9190,
		"k_EMsgGCCStrike15_v2_Party_Search":                           9191,
		"k_EMsgGCCStrike15_v2_Party_Invite":                           9192,
		"k_EMsgGCCStrike15_v2_Account_RequestCoPlays":                 9193,
		"k_EMsgGCCStrike15_v2_ClientGCRankUpdate":                     9194,
		"k_EMsgGCCStrike15_v2_ClientRequestOffers":                    9195,
		"k_EMsgGCCStrike15_v2_ClientAccountBalance":                   9196,
		"k_EMsgGCCStrike15_v2_ClientPartyJoinRelay":                   9197,
		"k_EMsgGCCStrike15_v2_ClientPartyWarning":                     9198,
		"k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial":       9199,
		"k_EMsgGCCStrike15_v2_SetEventFavorite":                       9200,
		"k_EMsgGCCStrike15_v2_GetEventFavorites_Request":              9201,
		"k_EMsgGCCStrike15_v2_ClientPerfReport":                       9202,
		"k_EMsgGCCStrike15_v2_GetEventFavorites_Response":             9203,
		"k_EMsgGCCStrike15_v2_ClientRequestSouvenir":                  9204,
		"k_EMsgGCCStrike15_v2_ClientReportValidation":                 9205,
		"k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode":              9206,
		"k_EMsgGCCStrike15_v2_GC2ClientRequestValidation":             9207,
	}
)

func (x ECsgoGCMsg) Enum() *ECsgoGCMsg {
	p := new(ECsgoGCMsg)
	*p = x
	return p
}

func (x ECsgoGCMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECsgoGCMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_cstrike15_gcmessages_proto_enumTypes[0].Descriptor()
}

func (ECsgoGCMsg) Type() protoreflect.EnumType {
	return &file_cstrike15_gcmessages_proto_enumTypes[0]
}

func (x ECsgoGCMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECsgoGCMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECsgoGCMsg(num)
	return nil
}

// Deprecated: Use ECsgoGCMsg.Descriptor instead.
func (ECsgoGCMsg) EnumDescriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{0}
}

type ECsgoSteamUserStat int32

const (
	ECsgoSteamUserStat_k_ECsgoSteamUserStat_XpEarnedGames        ECsgoSteamUserStat = 1
	ECsgoSteamUserStat_k_ECsgoSteamUserStat_MatchWinsCompetitive ECsgoSteamUserStat = 2
	ECsgoSteamUserStat_k_ECsgoSteamUserStat_SurvivedDangerZone   ECsgoSteamUserStat = 3
)

// Enum value maps for ECsgoSteamUserStat.
var (
	ECsgoSteamUserStat_name = map[int32]string{
		1: "k_ECsgoSteamUserStat_XpEarnedGames",
		2: "k_ECsgoSteamUserStat_MatchWinsCompetitive",
		3: "k_ECsgoSteamUserStat_SurvivedDangerZone",
	}
	ECsgoSteamUserStat_value = map[string]int32{
		"k_ECsgoSteamUserStat_XpEarnedGames":        1,
		"k_ECsgoSteamUserStat_MatchWinsCompetitive": 2,
		"k_ECsgoSteamUserStat_SurvivedDangerZone":   3,
	}
)

func (x ECsgoSteamUserStat) Enum() *ECsgoSteamUserStat {
	p := new(ECsgoSteamUserStat)
	*p = x
	return p
}

func (x ECsgoSteamUserStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECsgoSteamUserStat) Descriptor() protoreflect.EnumDescriptor {
	return file_cstrike15_gcmessages_proto_enumTypes[1].Descriptor()
}

func (ECsgoSteamUserStat) Type() protoreflect.EnumType {
	return &file_cstrike15_gcmessages_proto_enumTypes[1]
}

func (x ECsgoSteamUserStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECsgoSteamUserStat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECsgoSteamUserStat(num)
	return nil
}

// Deprecated: Use ECsgoSteamUserStat.Descriptor instead.
func (ECsgoSteamUserStat) EnumDescriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{1}
}

type EClientReportingVersion int32

const (
	EClientReportingVersion_k_EClientReportingVersion_OldVersion          EClientReportingVersion = 0
	EClientReportingVersion_k_EClientReportingVersion_BetaVersion         EClientReportingVersion = 1
	EClientReportingVersion_k_EClientReportingVersion_SupportsTrustedMode EClientReportingVersion = 2
)

// Enum value maps for EClientReportingVersion.
var (
	EClientReportingVersion_name = map[int32]string{
		0: "k_EClientReportingVersion_OldVersion",
		1: "k_EClientReportingVersion_BetaVersion",
		2: "k_EClientReportingVersion_SupportsTrustedMode",
	}
	EClientReportingVersion_value = map[string]int32{
		"k_EClientReportingVersion_OldVersion":          0,
		"k_EClientReportingVersion_BetaVersion":         1,
		"k_EClientReportingVersion_SupportsTrustedMode": 2,
	}
)

func (x EClientReportingVersion) Enum() *EClientReportingVersion {
	p := new(EClientReportingVersion)
	*p = x
	return p
}

func (x EClientReportingVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClientReportingVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_cstrike15_gcmessages_proto_enumTypes[2].Descriptor()
}

func (EClientReportingVersion) Type() protoreflect.EnumType {
	return &file_cstrike15_gcmessages_proto_enumTypes[2]
}

func (x EClientReportingVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClientReportingVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClientReportingVersion(num)
	return nil
}

// Deprecated: Use EClientReportingVersion.Descriptor instead.
func (EClientReportingVersion) EnumDescriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{2}
}

type GameServerPing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ping          *int32                 `protobuf:"varint,2,opt,name=ping" json:"ping,omitempty"`
	Ip            *uint32                `protobuf:"varint,3,opt,name=ip" json:"ip,omitempty"`
	Instances     *uint32                `protobuf:"varint,5,opt,name=instances" json:"instances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameServerPing) Reset() {
	*x = GameServerPing{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameServerPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerPing) ProtoMessage() {}

func (x *GameServerPing) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerPing.ProtoReflect.Descriptor instead.
func (*GameServerPing) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{0}
}

func (x *GameServerPing) GetPing() int32 {
	if x != nil && x.Ping != nil {
		return *x.Ping
	}
	return 0
}

func (x *GameServerPing) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *GameServerPing) GetInstances() uint32 {
	if x != nil && x.Instances != nil {
		return *x.Instances
	}
	return 0
}

type DataCenterPing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataCenterId  *uint32                `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	Ping          *int32                 `protobuf:"zigzag32,2,opt,name=ping" json:"ping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataCenterPing) Reset() {
	*x = DataCenterPing{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCenterPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterPing) ProtoMessage() {}

func (x *DataCenterPing) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterPing.ProtoReflect.Descriptor instead.
func (*DataCenterPing) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{1}
}

func (x *DataCenterPing) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *DataCenterPing) GetPing() int32 {
	if x != nil && x.Ping != nil {
		return *x.Ping
	}
	return 0
}

type DetailedSearchStatistic struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	GameType         *uint32                `protobuf:"varint,1,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	SearchTimeAvg    *uint32                `protobuf:"varint,2,opt,name=search_time_avg,json=searchTimeAvg" json:"search_time_avg,omitempty"`
	PlayersSearching *uint32                `protobuf:"varint,4,opt,name=players_searching,json=playersSearching" json:"players_searching,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DetailedSearchStatistic) Reset() {
	*x = DetailedSearchStatistic{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetailedSearchStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedSearchStatistic) ProtoMessage() {}

func (x *DetailedSearchStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedSearchStatistic.ProtoReflect.Descriptor instead.
func (*DetailedSearchStatistic) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{2}
}

func (x *DetailedSearchStatistic) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *DetailedSearchStatistic) GetSearchTimeAvg() uint32 {
	if x != nil && x.SearchTimeAvg != nil {
		return *x.SearchTimeAvg
	}
	return 0
}

func (x *DetailedSearchStatistic) GetPlayersSearching() uint32 {
	if x != nil && x.PlayersSearching != nil {
		return *x.PlayersSearching
	}
	return 0
}

type TournamentPlayer struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AccountId      *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerNick     *string                `protobuf:"bytes,2,opt,name=player_nick,json=playerNick" json:"player_nick,omitempty"`
	PlayerName     *string                `protobuf:"bytes,3,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	PlayerDob      *uint32                `protobuf:"varint,4,opt,name=player_dob,json=playerDob" json:"player_dob,omitempty"`
	PlayerFlag     *string                `protobuf:"bytes,5,opt,name=player_flag,json=playerFlag" json:"player_flag,omitempty"`
	PlayerLocation *string                `protobuf:"bytes,6,opt,name=player_location,json=playerLocation" json:"player_location,omitempty"`
	PlayerDesc     *string                `protobuf:"bytes,7,opt,name=player_desc,json=playerDesc" json:"player_desc,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TournamentPlayer) Reset() {
	*x = TournamentPlayer{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPlayer) ProtoMessage() {}

func (x *TournamentPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPlayer.ProtoReflect.Descriptor instead.
func (*TournamentPlayer) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{3}
}

func (x *TournamentPlayer) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *TournamentPlayer) GetPlayerNick() string {
	if x != nil && x.PlayerNick != nil {
		return *x.PlayerNick
	}
	return ""
}

func (x *TournamentPlayer) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *TournamentPlayer) GetPlayerDob() uint32 {
	if x != nil && x.PlayerDob != nil {
		return *x.PlayerDob
	}
	return 0
}

func (x *TournamentPlayer) GetPlayerFlag() string {
	if x != nil && x.PlayerFlag != nil {
		return *x.PlayerFlag
	}
	return ""
}

func (x *TournamentPlayer) GetPlayerLocation() string {
	if x != nil && x.PlayerLocation != nil {
		return *x.PlayerLocation
	}
	return ""
}

func (x *TournamentPlayer) GetPlayerDesc() string {
	if x != nil && x.PlayerDesc != nil {
		return *x.PlayerDesc
	}
	return ""
}

type TournamentTeam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        *int32                 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamTag       *string                `protobuf:"bytes,2,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamFlag      *string                `protobuf:"bytes,3,opt,name=team_flag,json=teamFlag" json:"team_flag,omitempty"`
	TeamName      *string                `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	Players       []*TournamentPlayer    `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentTeam) Reset() {
	*x = TournamentTeam{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentTeam) ProtoMessage() {}

func (x *TournamentTeam) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentTeam.ProtoReflect.Descriptor instead.
func (*TournamentTeam) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{4}
}

func (x *TournamentTeam) GetTeamId() int32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *TournamentTeam) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *TournamentTeam) GetTeamFlag() string {
	if x != nil && x.TeamFlag != nil {
		return *x.TeamFlag
	}
	return ""
}

func (x *TournamentTeam) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *TournamentTeam) GetPlayers() []*TournamentPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type TournamentEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EventId         *int32                 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventTag        *string                `protobuf:"bytes,2,opt,name=event_tag,json=eventTag" json:"event_tag,omitempty"`
	EventName       *string                `protobuf:"bytes,3,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	EventTimeStart  *uint32                `protobuf:"varint,4,opt,name=event_time_start,json=eventTimeStart" json:"event_time_start,omitempty"`
	EventTimeEnd    *uint32                `protobuf:"varint,5,opt,name=event_time_end,json=eventTimeEnd" json:"event_time_end,omitempty"`
	EventPublic     *int32                 `protobuf:"varint,6,opt,name=event_public,json=eventPublic" json:"event_public,omitempty"`
	EventStageId    *int32                 `protobuf:"varint,7,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id,omitempty"`
	EventStageName  *string                `protobuf:"bytes,8,opt,name=event_stage_name,json=eventStageName" json:"event_stage_name,omitempty"`
	ActiveSectionId *uint32                `protobuf:"varint,9,opt,name=active_section_id,json=activeSectionId" json:"active_section_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TournamentEvent) Reset() {
	*x = TournamentEvent{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentEvent) ProtoMessage() {}

func (x *TournamentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentEvent.ProtoReflect.Descriptor instead.
func (*TournamentEvent) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{5}
}

func (x *TournamentEvent) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *TournamentEvent) GetEventTag() string {
	if x != nil && x.EventTag != nil {
		return *x.EventTag
	}
	return ""
}

func (x *TournamentEvent) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *TournamentEvent) GetEventTimeStart() uint32 {
	if x != nil && x.EventTimeStart != nil {
		return *x.EventTimeStart
	}
	return 0
}

func (x *TournamentEvent) GetEventTimeEnd() uint32 {
	if x != nil && x.EventTimeEnd != nil {
		return *x.EventTimeEnd
	}
	return 0
}

func (x *TournamentEvent) GetEventPublic() int32 {
	if x != nil && x.EventPublic != nil {
		return *x.EventPublic
	}
	return 0
}

func (x *TournamentEvent) GetEventStageId() int32 {
	if x != nil && x.EventStageId != nil {
		return *x.EventStageId
	}
	return 0
}

func (x *TournamentEvent) GetEventStageName() string {
	if x != nil && x.EventStageName != nil {
		return *x.EventStageName
	}
	return ""
}

func (x *TournamentEvent) GetActiveSectionId() uint32 {
	if x != nil && x.ActiveSectionId != nil {
		return *x.ActiveSectionId
	}
	return 0
}

type GlobalStatistics struct {
	state                   protoimpl.MessageState     `protogen:"open.v1"`
	PlayersOnline           *uint32                    `protobuf:"varint,1,opt,name=players_online,json=playersOnline" json:"players_online,omitempty"`
	ServersOnline           *uint32                    `protobuf:"varint,2,opt,name=servers_online,json=serversOnline" json:"servers_online,omitempty"`
	PlayersSearching        *uint32                    `protobuf:"varint,3,opt,name=players_searching,json=playersSearching" json:"players_searching,omitempty"`
	ServersAvailable        *uint32                    `protobuf:"varint,4,opt,name=servers_available,json=serversAvailable" json:"servers_available,omitempty"`
	OngoingMatches          *uint32                    `protobuf:"varint,5,opt,name=ongoing_matches,json=ongoingMatches" json:"ongoing_matches,omitempty"`
	SearchTimeAvg           *uint32                    `protobuf:"varint,6,opt,name=search_time_avg,json=searchTimeAvg" json:"search_time_avg,omitempty"`
	SearchStatistics        []*DetailedSearchStatistic `protobuf:"bytes,7,rep,name=search_statistics,json=searchStatistics" json:"search_statistics,omitempty"`
	MainPostUrl             *string                    `protobuf:"bytes,8,opt,name=main_post_url,json=mainPostUrl" json:"main_post_url,omitempty"`
	RequiredAppidVersion    *uint32                    `protobuf:"varint,9,opt,name=required_appid_version,json=requiredAppidVersion" json:"required_appid_version,omitempty"`
	PricesheetVersion       *uint32                    `protobuf:"varint,10,opt,name=pricesheet_version,json=pricesheetVersion" json:"pricesheet_version,omitempty"`
	TwitchStreamsVersion    *uint32                    `protobuf:"varint,11,opt,name=twitch_streams_version,json=twitchStreamsVersion" json:"twitch_streams_version,omitempty"`
	ActiveTournamentEventid *uint32                    `protobuf:"varint,12,opt,name=active_tournament_eventid,json=activeTournamentEventid" json:"active_tournament_eventid,omitempty"`
	ActiveSurveyId          *uint32                    `protobuf:"varint,13,opt,name=active_survey_id,json=activeSurveyId" json:"active_survey_id,omitempty"`
	Rtime32Cur              *uint32                    `protobuf:"varint,14,opt,name=rtime32_cur,json=rtime32Cur" json:"rtime32_cur,omitempty"`
	Rtime32EventStart       *uint32                    `protobuf:"varint,15,opt,name=rtime32_event_start,json=rtime32EventStart" json:"rtime32_event_start,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GlobalStatistics) Reset() {
	*x = GlobalStatistics{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalStatistics) ProtoMessage() {}

func (x *GlobalStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalStatistics.ProtoReflect.Descriptor instead.
func (*GlobalStatistics) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{6}
}

func (x *GlobalStatistics) GetPlayersOnline() uint32 {
	if x != nil && x.PlayersOnline != nil {
		return *x.PlayersOnline
	}
	return 0
}

func (x *GlobalStatistics) GetServersOnline() uint32 {
	if x != nil && x.ServersOnline != nil {
		return *x.ServersOnline
	}
	return 0
}

func (x *GlobalStatistics) GetPlayersSearching() uint32 {
	if x != nil && x.PlayersSearching != nil {
		return *x.PlayersSearching
	}
	return 0
}

func (x *GlobalStatistics) GetServersAvailable() uint32 {
	if x != nil && x.ServersAvailable != nil {
		return *x.ServersAvailable
	}
	return 0
}

func (x *GlobalStatistics) GetOngoingMatches() uint32 {
	if x != nil && x.OngoingMatches != nil {
		return *x.OngoingMatches
	}
	return 0
}

func (x *GlobalStatistics) GetSearchTimeAvg() uint32 {
	if x != nil && x.SearchTimeAvg != nil {
		return *x.SearchTimeAvg
	}
	return 0
}

func (x *GlobalStatistics) GetSearchStatistics() []*DetailedSearchStatistic {
	if x != nil {
		return x.SearchStatistics
	}
	return nil
}

func (x *GlobalStatistics) GetMainPostUrl() string {
	if x != nil && x.MainPostUrl != nil {
		return *x.MainPostUrl
	}
	return ""
}

func (x *GlobalStatistics) GetRequiredAppidVersion() uint32 {
	if x != nil && x.RequiredAppidVersion != nil {
		return *x.RequiredAppidVersion
	}
	return 0
}

func (x *GlobalStatistics) GetPricesheetVersion() uint32 {
	if x != nil && x.PricesheetVersion != nil {
		return *x.PricesheetVersion
	}
	return 0
}

func (x *GlobalStatistics) GetTwitchStreamsVersion() uint32 {
	if x != nil && x.TwitchStreamsVersion != nil {
		return *x.TwitchStreamsVersion
	}
	return 0
}

func (x *GlobalStatistics) GetActiveTournamentEventid() uint32 {
	if x != nil && x.ActiveTournamentEventid != nil {
		return *x.ActiveTournamentEventid
	}
	return 0
}

func (x *GlobalStatistics) GetActiveSurveyId() uint32 {
	if x != nil && x.ActiveSurveyId != nil {
		return *x.ActiveSurveyId
	}
	return 0
}

func (x *GlobalStatistics) GetRtime32Cur() uint32 {
	if x != nil && x.Rtime32Cur != nil {
		return *x.Rtime32Cur
	}
	return 0
}

func (x *GlobalStatistics) GetRtime32EventStart() uint32 {
	if x != nil && x.Rtime32EventStart != nil {
		return *x.Rtime32EventStart
	}
	return 0
}

type OperationalStatisticDescription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Idkey         *uint32                `protobuf:"varint,2,opt,name=idkey" json:"idkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationalStatisticDescription) Reset() {
	*x = OperationalStatisticDescription{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationalStatisticDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalStatisticDescription) ProtoMessage() {}

func (x *OperationalStatisticDescription) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalStatisticDescription.ProtoReflect.Descriptor instead.
func (*OperationalStatisticDescription) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{7}
}

func (x *OperationalStatisticDescription) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OperationalStatisticDescription) GetIdkey() uint32 {
	if x != nil && x.Idkey != nil {
		return *x.Idkey
	}
	return 0
}

type OperationalStatisticElement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Idkey         *uint32                `protobuf:"varint,1,opt,name=idkey" json:"idkey,omitempty"`
	Values        []int32                `protobuf:"varint,2,rep,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationalStatisticElement) Reset() {
	*x = OperationalStatisticElement{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationalStatisticElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalStatisticElement) ProtoMessage() {}

func (x *OperationalStatisticElement) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalStatisticElement.ProtoReflect.Descriptor instead.
func (*OperationalStatisticElement) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{8}
}

func (x *OperationalStatisticElement) GetIdkey() uint32 {
	if x != nil && x.Idkey != nil {
		return *x.Idkey
	}
	return 0
}

func (x *OperationalStatisticElement) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type OperationalStatisticsPacket struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Packetid      *int32                         `protobuf:"varint,1,opt,name=packetid" json:"packetid,omitempty"`
	Mstimestamp   *int32                         `protobuf:"varint,2,opt,name=mstimestamp" json:"mstimestamp,omitempty"`
	Values        []*OperationalStatisticElement `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationalStatisticsPacket) Reset() {
	*x = OperationalStatisticsPacket{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationalStatisticsPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalStatisticsPacket) ProtoMessage() {}

func (x *OperationalStatisticsPacket) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalStatisticsPacket.ProtoReflect.Descriptor instead.
func (*OperationalStatisticsPacket) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{9}
}

func (x *OperationalStatisticsPacket) GetPacketid() int32 {
	if x != nil && x.Packetid != nil {
		return *x.Packetid
	}
	return 0
}

func (x *OperationalStatisticsPacket) GetMstimestamp() int32 {
	if x != nil && x.Mstimestamp != nil {
		return *x.Mstimestamp
	}
	return 0
}

func (x *OperationalStatisticsPacket) GetValues() []*OperationalStatisticElement {
	if x != nil {
		return x.Values
	}
	return nil
}

type PlayerRankingInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RankId        *uint32                `protobuf:"varint,2,opt,name=rank_id,json=rankId" json:"rank_id,omitempty"`
	Wins          *uint32                `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
	RankChange    *float32               `protobuf:"fixed32,4,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	RankTypeId    *uint32                `protobuf:"varint,6,opt,name=rank_type_id,json=rankTypeId" json:"rank_type_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerRankingInfo) Reset() {
	*x = PlayerRankingInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRankingInfo) ProtoMessage() {}

func (x *PlayerRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRankingInfo.ProtoReflect.Descriptor instead.
func (*PlayerRankingInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerRankingInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *PlayerRankingInfo) GetRankId() uint32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *PlayerRankingInfo) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *PlayerRankingInfo) GetRankChange() float32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *PlayerRankingInfo) GetRankTypeId() uint32 {
	if x != nil && x.RankTypeId != nil {
		return *x.RankTypeId
	}
	return 0
}

type PlayerCommendationInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CmdFriendly   *uint32                `protobuf:"varint,1,opt,name=cmd_friendly,json=cmdFriendly" json:"cmd_friendly,omitempty"`
	CmdTeaching   *uint32                `protobuf:"varint,2,opt,name=cmd_teaching,json=cmdTeaching" json:"cmd_teaching,omitempty"`
	CmdLeader     *uint32                `protobuf:"varint,4,opt,name=cmd_leader,json=cmdLeader" json:"cmd_leader,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerCommendationInfo) Reset() {
	*x = PlayerCommendationInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerCommendationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCommendationInfo) ProtoMessage() {}

func (x *PlayerCommendationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCommendationInfo.ProtoReflect.Descriptor instead.
func (*PlayerCommendationInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerCommendationInfo) GetCmdFriendly() uint32 {
	if x != nil && x.CmdFriendly != nil {
		return *x.CmdFriendly
	}
	return 0
}

func (x *PlayerCommendationInfo) GetCmdTeaching() uint32 {
	if x != nil && x.CmdTeaching != nil {
		return *x.CmdTeaching
	}
	return 0
}

func (x *PlayerCommendationInfo) GetCmdLeader() uint32 {
	if x != nil && x.CmdLeader != nil {
		return *x.CmdLeader
	}
	return 0
}

type PlayerMedalsInfo struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	DisplayItemsDefidx        []uint32               `protobuf:"varint,7,rep,name=display_items_defidx,json=displayItemsDefidx" json:"display_items_defidx,omitempty"`
	FeaturedDisplayItemDefidx *uint32                `protobuf:"varint,8,opt,name=featured_display_item_defidx,json=featuredDisplayItemDefidx" json:"featured_display_item_defidx,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *PlayerMedalsInfo) Reset() {
	*x = PlayerMedalsInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerMedalsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMedalsInfo) ProtoMessage() {}

func (x *PlayerMedalsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMedalsInfo.ProtoReflect.Descriptor instead.
func (*PlayerMedalsInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{12}
}

func (x *PlayerMedalsInfo) GetDisplayItemsDefidx() []uint32 {
	if x != nil {
		return x.DisplayItemsDefidx
	}
	return nil
}

func (x *PlayerMedalsInfo) GetFeaturedDisplayItemDefidx() uint32 {
	if x != nil && x.FeaturedDisplayItemDefidx != nil {
		return *x.FeaturedDisplayItemDefidx
	}
	return 0
}

type AccountActivity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Activity      *uint32                `protobuf:"varint,1,opt,name=activity" json:"activity,omitempty"`
	Mode          *uint32                `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	Map           *uint32                `protobuf:"varint,3,opt,name=map" json:"map,omitempty"`
	Matchid       *uint64                `protobuf:"varint,4,opt,name=matchid" json:"matchid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountActivity) Reset() {
	*x = AccountActivity{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountActivity) ProtoMessage() {}

func (x *AccountActivity) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountActivity.ProtoReflect.Descriptor instead.
func (*AccountActivity) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{13}
}

func (x *AccountActivity) GetActivity() uint32 {
	if x != nil && x.Activity != nil {
		return *x.Activity
	}
	return 0
}

func (x *AccountActivity) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *AccountActivity) GetMap() uint32 {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return 0
}

func (x *AccountActivity) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

type TournamentMatchSetup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *int32                 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	TeamIdCt      *int32                 `protobuf:"varint,2,opt,name=team_id_ct,json=teamIdCt" json:"team_id_ct,omitempty"`
	TeamIdT       *int32                 `protobuf:"varint,3,opt,name=team_id_t,json=teamIdT" json:"team_id_t,omitempty"`
	EventStageId  *int32                 `protobuf:"varint,4,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentMatchSetup) Reset() {
	*x = TournamentMatchSetup{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentMatchSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMatchSetup) ProtoMessage() {}

func (x *TournamentMatchSetup) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMatchSetup.ProtoReflect.Descriptor instead.
func (*TournamentMatchSetup) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{14}
}

func (x *TournamentMatchSetup) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *TournamentMatchSetup) GetTeamIdCt() int32 {
	if x != nil && x.TeamIdCt != nil {
		return *x.TeamIdCt
	}
	return 0
}

func (x *TournamentMatchSetup) GetTeamIdT() int32 {
	if x != nil && x.TeamIdT != nil {
		return *x.TeamIdT
	}
	return 0
}

func (x *TournamentMatchSetup) GetEventStageId() int32 {
	if x != nil && x.EventStageId != nil {
		return *x.EventStageId
	}
	return 0
}

type ServerHltvInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TvUdpPort       *uint32                `protobuf:"varint,1,opt,name=tv_udp_port,json=tvUdpPort" json:"tv_udp_port,omitempty"`
	TvWatchKey      *uint64                `protobuf:"varint,2,opt,name=tv_watch_key,json=tvWatchKey" json:"tv_watch_key,omitempty"`
	TvSlots         *uint32                `protobuf:"varint,3,opt,name=tv_slots,json=tvSlots" json:"tv_slots,omitempty"`
	TvClients       *uint32                `protobuf:"varint,4,opt,name=tv_clients,json=tvClients" json:"tv_clients,omitempty"`
	TvProxies       *uint32                `protobuf:"varint,5,opt,name=tv_proxies,json=tvProxies" json:"tv_proxies,omitempty"`
	TvTime          *uint32                `protobuf:"varint,6,opt,name=tv_time,json=tvTime" json:"tv_time,omitempty"`
	GameType        *uint32                `protobuf:"varint,8,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	GameMapgroup    *string                `protobuf:"bytes,9,opt,name=game_mapgroup,json=gameMapgroup" json:"game_mapgroup,omitempty"`
	GameMap         *string                `protobuf:"bytes,10,opt,name=game_map,json=gameMap" json:"game_map,omitempty"`
	TvMasterSteamid *uint64                `protobuf:"varint,11,opt,name=tv_master_steamid,json=tvMasterSteamid" json:"tv_master_steamid,omitempty"`
	TvLocalSlots    *uint32                `protobuf:"varint,12,opt,name=tv_local_slots,json=tvLocalSlots" json:"tv_local_slots,omitempty"`
	TvLocalClients  *uint32                `protobuf:"varint,13,opt,name=tv_local_clients,json=tvLocalClients" json:"tv_local_clients,omitempty"`
	TvLocalProxies  *uint32                `protobuf:"varint,14,opt,name=tv_local_proxies,json=tvLocalProxies" json:"tv_local_proxies,omitempty"`
	TvRelaySlots    *uint32                `protobuf:"varint,15,opt,name=tv_relay_slots,json=tvRelaySlots" json:"tv_relay_slots,omitempty"`
	TvRelayClients  *uint32                `protobuf:"varint,16,opt,name=tv_relay_clients,json=tvRelayClients" json:"tv_relay_clients,omitempty"`
	TvRelayProxies  *uint32                `protobuf:"varint,17,opt,name=tv_relay_proxies,json=tvRelayProxies" json:"tv_relay_proxies,omitempty"`
	TvRelayAddress  *uint32                `protobuf:"varint,18,opt,name=tv_relay_address,json=tvRelayAddress" json:"tv_relay_address,omitempty"`
	TvRelayPort     *uint32                `protobuf:"varint,19,opt,name=tv_relay_port,json=tvRelayPort" json:"tv_relay_port,omitempty"`
	TvRelaySteamid  *uint64                `protobuf:"varint,20,opt,name=tv_relay_steamid,json=tvRelaySteamid" json:"tv_relay_steamid,omitempty"`
	Flags           *uint32                `protobuf:"varint,21,opt,name=flags" json:"flags,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ServerHltvInfo) Reset() {
	*x = ServerHltvInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerHltvInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHltvInfo) ProtoMessage() {}

func (x *ServerHltvInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHltvInfo.ProtoReflect.Descriptor instead.
func (*ServerHltvInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{15}
}

func (x *ServerHltvInfo) GetTvUdpPort() uint32 {
	if x != nil && x.TvUdpPort != nil {
		return *x.TvUdpPort
	}
	return 0
}

func (x *ServerHltvInfo) GetTvWatchKey() uint64 {
	if x != nil && x.TvWatchKey != nil {
		return *x.TvWatchKey
	}
	return 0
}

func (x *ServerHltvInfo) GetTvSlots() uint32 {
	if x != nil && x.TvSlots != nil {
		return *x.TvSlots
	}
	return 0
}

func (x *ServerHltvInfo) GetTvClients() uint32 {
	if x != nil && x.TvClients != nil {
		return *x.TvClients
	}
	return 0
}

func (x *ServerHltvInfo) GetTvProxies() uint32 {
	if x != nil && x.TvProxies != nil {
		return *x.TvProxies
	}
	return 0
}

func (x *ServerHltvInfo) GetTvTime() uint32 {
	if x != nil && x.TvTime != nil {
		return *x.TvTime
	}
	return 0
}

func (x *ServerHltvInfo) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *ServerHltvInfo) GetGameMapgroup() string {
	if x != nil && x.GameMapgroup != nil {
		return *x.GameMapgroup
	}
	return ""
}

func (x *ServerHltvInfo) GetGameMap() string {
	if x != nil && x.GameMap != nil {
		return *x.GameMap
	}
	return ""
}

func (x *ServerHltvInfo) GetTvMasterSteamid() uint64 {
	if x != nil && x.TvMasterSteamid != nil {
		return *x.TvMasterSteamid
	}
	return 0
}

func (x *ServerHltvInfo) GetTvLocalSlots() uint32 {
	if x != nil && x.TvLocalSlots != nil {
		return *x.TvLocalSlots
	}
	return 0
}

func (x *ServerHltvInfo) GetTvLocalClients() uint32 {
	if x != nil && x.TvLocalClients != nil {
		return *x.TvLocalClients
	}
	return 0
}

func (x *ServerHltvInfo) GetTvLocalProxies() uint32 {
	if x != nil && x.TvLocalProxies != nil {
		return *x.TvLocalProxies
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelaySlots() uint32 {
	if x != nil && x.TvRelaySlots != nil {
		return *x.TvRelaySlots
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelayClients() uint32 {
	if x != nil && x.TvRelayClients != nil {
		return *x.TvRelayClients
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelayProxies() uint32 {
	if x != nil && x.TvRelayProxies != nil {
		return *x.TvRelayProxies
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelayAddress() uint32 {
	if x != nil && x.TvRelayAddress != nil {
		return *x.TvRelayAddress
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelayPort() uint32 {
	if x != nil && x.TvRelayPort != nil {
		return *x.TvRelayPort
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelaySteamid() uint64 {
	if x != nil && x.TvRelaySteamid != nil {
		return *x.TvRelaySteamid
	}
	return 0
}

func (x *ServerHltvInfo) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type IpAddressMask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             *uint32                `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B             *uint32                `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
	C             *uint32                `protobuf:"varint,3,opt,name=c" json:"c,omitempty"`
	D             *uint32                `protobuf:"varint,4,opt,name=d" json:"d,omitempty"`
	Bits          *uint32                `protobuf:"varint,5,opt,name=bits" json:"bits,omitempty"`
	Token         *uint32                `protobuf:"varint,6,opt,name=token" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpAddressMask) Reset() {
	*x = IpAddressMask{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpAddressMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddressMask) ProtoMessage() {}

func (x *IpAddressMask) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddressMask.ProtoReflect.Descriptor instead.
func (*IpAddressMask) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{16}
}

func (x *IpAddressMask) GetA() uint32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *IpAddressMask) GetB() uint32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *IpAddressMask) GetC() uint32 {
	if x != nil && x.C != nil {
		return *x.C
	}
	return 0
}

func (x *IpAddressMask) GetD() uint32 {
	if x != nil && x.D != nil {
		return *x.D
	}
	return 0
}

func (x *IpAddressMask) GetBits() uint32 {
	if x != nil && x.Bits != nil {
		return *x.Bits
	}
	return 0
}

func (x *IpAddressMask) GetToken() uint32 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

type CMsgCsgoSteamUserStatChange struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Ecsgosteamuserstat *int32                 `protobuf:"varint,1,opt,name=ecsgosteamuserstat" json:"ecsgosteamuserstat,omitempty"`
	Delta              *int32                 `protobuf:"varint,2,opt,name=delta" json:"delta,omitempty"`
	Absolute           *bool                  `protobuf:"varint,3,opt,name=absolute" json:"absolute,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgCsgoSteamUserStatChange) Reset() {
	*x = CMsgCsgoSteamUserStatChange{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgCsgoSteamUserStatChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCsgoSteamUserStatChange) ProtoMessage() {}

func (x *CMsgCsgoSteamUserStatChange) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCsgoSteamUserStatChange.ProtoReflect.Descriptor instead.
func (*CMsgCsgoSteamUserStatChange) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgCsgoSteamUserStatChange) GetEcsgosteamuserstat() int32 {
	if x != nil && x.Ecsgosteamuserstat != nil {
		return *x.Ecsgosteamuserstat
	}
	return 0
}

func (x *CMsgCsgoSteamUserStatChange) GetDelta() int32 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *CMsgCsgoSteamUserStatChange) GetAbsolute() bool {
	if x != nil && x.Absolute != nil {
		return *x.Absolute
	}
	return false
}

type XpProgressData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XpPoints      *uint32                `protobuf:"varint,1,opt,name=xp_points,json=xpPoints" json:"xp_points,omitempty"`
	XpCategory    *int32                 `protobuf:"varint,2,opt,name=xp_category,json=xpCategory" json:"xp_category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XpProgressData) Reset() {
	*x = XpProgressData{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XpProgressData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XpProgressData) ProtoMessage() {}

func (x *XpProgressData) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XpProgressData.ProtoReflect.Descriptor instead.
func (*XpProgressData) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{18}
}

func (x *XpProgressData) GetXpPoints() uint32 {
	if x != nil && x.XpPoints != nil {
		return *x.XpPoints
	}
	return 0
}

func (x *XpProgressData) GetXpCategory() int32 {
	if x != nil && x.XpCategory != nil {
		return *x.XpCategory
	}
	return 0
}

type MatchEndItemUpdates struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ItemId             *uint64                `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemAttrDefidx     *uint32                `protobuf:"varint,2,opt,name=item_attr_defidx,json=itemAttrDefidx" json:"item_attr_defidx,omitempty"`
	ItemAttrDeltaValue *uint32                `protobuf:"varint,3,opt,name=item_attr_delta_value,json=itemAttrDeltaValue" json:"item_attr_delta_value,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MatchEndItemUpdates) Reset() {
	*x = MatchEndItemUpdates{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchEndItemUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEndItemUpdates) ProtoMessage() {}

func (x *MatchEndItemUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEndItemUpdates.ProtoReflect.Descriptor instead.
func (*MatchEndItemUpdates) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{19}
}

func (x *MatchEndItemUpdates) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *MatchEndItemUpdates) GetItemAttrDefidx() uint32 {
	if x != nil && x.ItemAttrDefidx != nil {
		return *x.ItemAttrDefidx
	}
	return 0
}

func (x *MatchEndItemUpdates) GetItemAttrDeltaValue() uint32 {
	if x != nil && x.ItemAttrDeltaValue != nil {
		return *x.ItemAttrDeltaValue
	}
	return 0
}

type ScoreLeaderboardData struct {
	state          protoimpl.MessageState                 `protogen:"open.v1"`
	QuestId        *uint64                                `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	Score          *uint32                                `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Accountentries []*ScoreLeaderboardData_AccountEntries `protobuf:"bytes,3,rep,name=accountentries" json:"accountentries,omitempty"`
	Matchentries   []*ScoreLeaderboardData_Entry          `protobuf:"bytes,5,rep,name=matchentries" json:"matchentries,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScoreLeaderboardData) Reset() {
	*x = ScoreLeaderboardData{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreLeaderboardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreLeaderboardData) ProtoMessage() {}

func (x *ScoreLeaderboardData) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreLeaderboardData.ProtoReflect.Descriptor instead.
func (*ScoreLeaderboardData) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{20}
}

func (x *ScoreLeaderboardData) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *ScoreLeaderboardData) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *ScoreLeaderboardData) GetAccountentries() []*ScoreLeaderboardData_AccountEntries {
	if x != nil {
		return x.Accountentries
	}
	return nil
}

func (x *ScoreLeaderboardData) GetMatchentries() []*ScoreLeaderboardData_Entry {
	if x != nil {
		return x.Matchentries
	}
	return nil
}

type PlayerQuestData struct {
	state                   protoimpl.MessageState           `protogen:"open.v1"`
	QuesterAccountId        *uint32                          `protobuf:"varint,1,opt,name=quester_account_id,json=questerAccountId" json:"quester_account_id,omitempty"`
	QuestItemData           []*PlayerQuestData_QuestItemData `protobuf:"bytes,2,rep,name=quest_item_data,json=questItemData" json:"quest_item_data,omitempty"`
	XpProgressData          []*XpProgressData                `protobuf:"bytes,3,rep,name=xp_progress_data,json=xpProgressData" json:"xp_progress_data,omitempty"`
	TimePlayed              *uint32                          `protobuf:"varint,4,opt,name=time_played,json=timePlayed" json:"time_played,omitempty"`
	MmGameMode              *uint32                          `protobuf:"varint,5,opt,name=mm_game_mode,json=mmGameMode" json:"mm_game_mode,omitempty"`
	ItemUpdates             []*MatchEndItemUpdates           `protobuf:"bytes,6,rep,name=item_updates,json=itemUpdates" json:"item_updates,omitempty"`
	OperationPointsEligible *bool                            `protobuf:"varint,7,opt,name=operation_points_eligible,json=operationPointsEligible" json:"operation_points_eligible,omitempty"`
	Userstatchanges         []*CMsgCsgoSteamUserStatChange   `protobuf:"bytes,8,rep,name=userstatchanges" json:"userstatchanges,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PlayerQuestData) Reset() {
	*x = PlayerQuestData{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerQuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuestData) ProtoMessage() {}

func (x *PlayerQuestData) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuestData.ProtoReflect.Descriptor instead.
func (*PlayerQuestData) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{21}
}

func (x *PlayerQuestData) GetQuesterAccountId() uint32 {
	if x != nil && x.QuesterAccountId != nil {
		return *x.QuesterAccountId
	}
	return 0
}

func (x *PlayerQuestData) GetQuestItemData() []*PlayerQuestData_QuestItemData {
	if x != nil {
		return x.QuestItemData
	}
	return nil
}

func (x *PlayerQuestData) GetXpProgressData() []*XpProgressData {
	if x != nil {
		return x.XpProgressData
	}
	return nil
}

func (x *PlayerQuestData) GetTimePlayed() uint32 {
	if x != nil && x.TimePlayed != nil {
		return *x.TimePlayed
	}
	return 0
}

func (x *PlayerQuestData) GetMmGameMode() uint32 {
	if x != nil && x.MmGameMode != nil {
		return *x.MmGameMode
	}
	return 0
}

func (x *PlayerQuestData) GetItemUpdates() []*MatchEndItemUpdates {
	if x != nil {
		return x.ItemUpdates
	}
	return nil
}

func (x *PlayerQuestData) GetOperationPointsEligible() bool {
	if x != nil && x.OperationPointsEligible != nil {
		return *x.OperationPointsEligible
	}
	return false
}

func (x *PlayerQuestData) GetUserstatchanges() []*CMsgCsgoSteamUserStatChange {
	if x != nil {
		return x.Userstatchanges
	}
	return nil
}

type CMsgGC_ServerQuestUpdateData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PlayerQuestData []*PlayerQuestData     `protobuf:"bytes,1,rep,name=player_quest_data,json=playerQuestData" json:"player_quest_data,omitempty"`
	BinaryData      []byte                 `protobuf:"bytes,2,opt,name=binary_data,json=binaryData" json:"binary_data,omitempty"`
	MmGameMode      *uint32                `protobuf:"varint,3,opt,name=mm_game_mode,json=mmGameMode" json:"mm_game_mode,omitempty"`
	Missionlbsdata  *ScoreLeaderboardData  `protobuf:"bytes,4,opt,name=missionlbsdata" json:"missionlbsdata,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGC_ServerQuestUpdateData) Reset() {
	*x = CMsgGC_ServerQuestUpdateData{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGC_ServerQuestUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_ServerQuestUpdateData) ProtoMessage() {}

func (x *CMsgGC_ServerQuestUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_ServerQuestUpdateData.ProtoReflect.Descriptor instead.
func (*CMsgGC_ServerQuestUpdateData) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgGC_ServerQuestUpdateData) GetPlayerQuestData() []*PlayerQuestData {
	if x != nil {
		return x.PlayerQuestData
	}
	return nil
}

func (x *CMsgGC_ServerQuestUpdateData) GetBinaryData() []byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

func (x *CMsgGC_ServerQuestUpdateData) GetMmGameMode() uint32 {
	if x != nil && x.MmGameMode != nil {
		return *x.MmGameMode
	}
	return 0
}

func (x *CMsgGC_ServerQuestUpdateData) GetMissionlbsdata() *ScoreLeaderboardData {
	if x != nil {
		return x.Missionlbsdata
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGCOperationalStats struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Packetid      *int32                             `protobuf:"varint,1,opt,name=packetid" json:"packetid,omitempty"`
	Namekeys      []*OperationalStatisticDescription `protobuf:"bytes,2,rep,name=namekeys" json:"namekeys,omitempty"`
	Packets       []*OperationalStatisticsPacket     `protobuf:"bytes,3,rep,name=packets" json:"packets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGCOperationalStats{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGCOperationalStats) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGCOperationalStats.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) GetPacketid() int32 {
	if x != nil && x.Packetid != nil {
		return *x.Packetid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) GetNamekeys() []*OperationalStatisticDescription {
	if x != nil {
		return x.Namekeys
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) GetPackets() []*OperationalStatisticsPacket {
	if x != nil {
		return x.Packets
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         *uint32                `protobuf:"varint,1,opt,name=token" json:"token,omitempty"`
	Stamp         *uint32                `protobuf:"varint,2,opt,name=stamp" json:"stamp,omitempty"`
	Exchange      *uint64                `protobuf:"varint,3,opt,name=exchange" json:"exchange,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetToken() uint32 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetStamp() uint32 {
	if x != nil && x.Stamp != nil {
		return *x.Stamp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetExchange() uint64 {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ServerReservationUpdate struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ViewersExternalTotal *uint32                `protobuf:"varint,1,opt,name=viewers_external_total,json=viewersExternalTotal" json:"viewers_external_total,omitempty"`
	ViewersExternalSteam *uint32                `protobuf:"varint,2,opt,name=viewers_external_steam,json=viewersExternalSteam" json:"viewers_external_steam,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Reset() {
	*x = CMsgGCCStrike15V2_GC2ServerReservationUpdate{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ServerReservationUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ServerReservationUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ServerReservationUpdate) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) GetViewersExternalTotal() uint32 {
	if x != nil && x.ViewersExternalTotal != nil {
		return *x.ViewersExternalTotal
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) GetViewersExternalSteam() uint32 {
	if x != nil && x.ViewersExternalSteam != nil {
		return *x.ViewersExternalSteam
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingStart struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccountIds      []uint32               `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	GameType        *uint32                `protobuf:"varint,2,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	TicketData      *string                `protobuf:"bytes,3,opt,name=ticket_data,json=ticketData" json:"ticket_data,omitempty"`
	ClientVersion   *uint32                `protobuf:"varint,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	TournamentMatch *TournamentMatchSetup  `protobuf:"bytes,5,opt,name=tournament_match,json=tournamentMatch" json:"tournament_match,omitempty"`
	PrimeOnly       *bool                  `protobuf:"varint,6,opt,name=prime_only,json=primeOnly" json:"prime_only,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingStart{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingStart) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingStart) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingStart.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingStart) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetTicketData() string {
	if x != nil && x.TicketData != nil {
		return *x.TicketData
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetTournamentMatch() *TournamentMatchSetup {
	if x != nil {
		return x.TournamentMatch
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetPrimeOnly() bool {
	if x != nil && x.PrimeOnly != nil {
		return *x.PrimeOnly
	}
	return false
}

type CMsgGCCStrike15V2_MatchmakingStop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Abandon       *int32                 `protobuf:"varint,1,opt,name=abandon" json:"abandon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingStop) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingStop{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingStop) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingStop) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingStop.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingStop) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgGCCStrike15V2_MatchmakingStop) GetAbandon() int32 {
	if x != nil && x.Abandon != nil {
		return *x.Abandon
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingClient2ServerPing struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Gameserverpings []*GameServerPing      `protobuf:"bytes,1,rep,name=gameserverpings" json:"gameserverpings,omitempty"`
	OffsetIndex     *int32                 `protobuf:"varint,2,opt,name=offset_index,json=offsetIndex" json:"offset_index,omitempty"`
	FinalBatch      *int32                 `protobuf:"varint,3,opt,name=final_batch,json=finalBatch" json:"final_batch,omitempty"`
	DataCenterPings []*DataCenterPing      `protobuf:"bytes,4,rep,name=data_center_pings,json=dataCenterPings" json:"data_center_pings,omitempty"`
	MaxPing         *uint32                `protobuf:"varint,5,opt,name=max_ping,json=maxPing" json:"max_ping,omitempty"`
	TestToken       *uint32                `protobuf:"fixed32,6,opt,name=test_token,json=testToken" json:"test_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingClient2ServerPing{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingClient2ServerPing) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingClient2ServerPing.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetGameserverpings() []*GameServerPing {
	if x != nil {
		return x.Gameserverpings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetOffsetIndex() int32 {
	if x != nil && x.OffsetIndex != nil {
		return *x.OffsetIndex
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetFinalBatch() int32 {
	if x != nil && x.FinalBatch != nil {
		return *x.FinalBatch
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetDataCenterPings() []*DataCenterPing {
	if x != nil {
		return x.DataCenterPings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetMaxPing() uint32 {
	if x != nil && x.MaxPing != nil {
		return *x.MaxPing
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetTestToken() uint32 {
	if x != nil && x.TestToken != nil {
		return *x.TestToken
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate struct {
	state                         protoimpl.MessageState                               `protogen:"open.v1"`
	Matchmaking                   *int32                                               `protobuf:"varint,1,opt,name=matchmaking" json:"matchmaking,omitempty"`
	WaitingAccountIdSessions      []uint32                                             `protobuf:"varint,2,rep,name=waiting_account_id_sessions,json=waitingAccountIdSessions" json:"waiting_account_id_sessions,omitempty"`
	Error                         *string                                              `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	OngoingmatchAccountIdSessions []uint32                                             `protobuf:"varint,6,rep,name=ongoingmatch_account_id_sessions,json=ongoingmatchAccountIdSessions" json:"ongoingmatch_account_id_sessions,omitempty"`
	GlobalStats                   *GlobalStatistics                                    `protobuf:"bytes,7,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	FailpingAccountIdSessions     []uint32                                             `protobuf:"varint,8,rep,name=failping_account_id_sessions,json=failpingAccountIdSessions" json:"failping_account_id_sessions,omitempty"`
	PenaltyAccountIdSessions      []uint32                                             `protobuf:"varint,9,rep,name=penalty_account_id_sessions,json=penaltyAccountIdSessions" json:"penalty_account_id_sessions,omitempty"`
	FailreadyAccountIdSessions    []uint32                                             `protobuf:"varint,10,rep,name=failready_account_id_sessions,json=failreadyAccountIdSessions" json:"failready_account_id_sessions,omitempty"`
	VacbannedAccountIdSessions    []uint32                                             `protobuf:"varint,11,rep,name=vacbanned_account_id_sessions,json=vacbannedAccountIdSessions" json:"vacbanned_account_id_sessions,omitempty"`
	ServerIpaddressMask           *IpAddressMask                                       `protobuf:"bytes,12,opt,name=server_ipaddress_mask,json=serverIpaddressMask" json:"server_ipaddress_mask,omitempty"`
	Notes                         []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note `protobuf:"bytes,13,rep,name=notes" json:"notes,omitempty"`
	PenaltyAccountIdSessionsGreen []uint32                                             `protobuf:"varint,14,rep,name=penalty_account_id_sessions_green,json=penaltyAccountIdSessionsGreen" json:"penalty_account_id_sessions_green,omitempty"`
	InsufficientlevelSessions     []uint32                                             `protobuf:"varint,15,rep,name=insufficientlevel_sessions,json=insufficientlevelSessions" json:"insufficientlevel_sessions,omitempty"`
	VsncheckAccountIdSessions     []uint32                                             `protobuf:"varint,16,rep,name=vsncheck_account_id_sessions,json=vsncheckAccountIdSessions" json:"vsncheck_account_id_sessions,omitempty"`
	LauncherMismatchSessions      []uint32                                             `protobuf:"varint,17,rep,name=launcher_mismatch_sessions,json=launcherMismatchSessions" json:"launcher_mismatch_sessions,omitempty"`
	InsecureAccountIdSessions     []uint32                                             `protobuf:"varint,18,rep,name=insecure_account_id_sessions,json=insecureAccountIdSessions" json:"insecure_account_id_sessions,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetMatchmaking() int32 {
	if x != nil && x.Matchmaking != nil {
		return *x.Matchmaking
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetWaitingAccountIdSessions() []uint32 {
	if x != nil {
		return x.WaitingAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetOngoingmatchAccountIdSessions() []uint32 {
	if x != nil {
		return x.OngoingmatchAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetGlobalStats() *GlobalStatistics {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetFailpingAccountIdSessions() []uint32 {
	if x != nil {
		return x.FailpingAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetPenaltyAccountIdSessions() []uint32 {
	if x != nil {
		return x.PenaltyAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetFailreadyAccountIdSessions() []uint32 {
	if x != nil {
		return x.FailreadyAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetVacbannedAccountIdSessions() []uint32 {
	if x != nil {
		return x.VacbannedAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetServerIpaddressMask() *IpAddressMask {
	if x != nil {
		return x.ServerIpaddressMask
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetNotes() []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetPenaltyAccountIdSessionsGreen() []uint32 {
	if x != nil {
		return x.PenaltyAccountIdSessionsGreen
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetInsufficientlevelSessions() []uint32 {
	if x != nil {
		return x.InsufficientlevelSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetVsncheckAccountIdSessions() []uint32 {
	if x != nil {
		return x.VsncheckAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetLauncherMismatchSessions() []uint32 {
	if x != nil {
		return x.LauncherMismatchSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetInsecureAccountIdSessions() []uint32 {
	if x != nil {
		return x.InsecureAccountIdSessions
	}
	return nil
}

type CDataGCCStrike15V2_TournamentMatchDraft struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	EventId       *int32                                           `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventStageId  *int32                                           `protobuf:"varint,2,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id,omitempty"`
	TeamId_0      *int32                                           `protobuf:"varint,3,opt,name=team_id_0,json=teamId0" json:"team_id_0,omitempty"`
	TeamId_1      *int32                                           `protobuf:"varint,4,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	MapsCount     *int32                                           `protobuf:"varint,5,opt,name=maps_count,json=mapsCount" json:"maps_count,omitempty"`
	MapsCurrent   *int32                                           `protobuf:"varint,6,opt,name=maps_current,json=mapsCurrent" json:"maps_current,omitempty"`
	TeamIdStart   *int32                                           `protobuf:"varint,7,opt,name=team_id_start,json=teamIdStart" json:"team_id_start,omitempty"`
	TeamIdVeto1   *int32                                           `protobuf:"varint,8,opt,name=team_id_veto1,json=teamIdVeto1" json:"team_id_veto1,omitempty"`
	TeamIdPickn   *int32                                           `protobuf:"varint,9,opt,name=team_id_pickn,json=teamIdPickn" json:"team_id_pickn,omitempty"`
	Drafts        []*CDataGCCStrike15V2_TournamentMatchDraft_Entry `protobuf:"bytes,10,rep,name=drafts" json:"drafts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) Reset() {
	*x = CDataGCCStrike15V2_TournamentMatchDraft{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentMatchDraft) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentMatchDraft.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentMatchDraft) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{30}
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetEventStageId() int32 {
	if x != nil && x.EventStageId != nil {
		return *x.EventStageId
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamId_0() int32 {
	if x != nil && x.TeamId_0 != nil {
		return *x.TeamId_0
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamId_1() int32 {
	if x != nil && x.TeamId_1 != nil {
		return *x.TeamId_1
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetMapsCount() int32 {
	if x != nil && x.MapsCount != nil {
		return *x.MapsCount
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetMapsCurrent() int32 {
	if x != nil && x.MapsCurrent != nil {
		return *x.MapsCurrent
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdStart() int32 {
	if x != nil && x.TeamIdStart != nil {
		return *x.TeamIdStart
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdVeto1() int32 {
	if x != nil && x.TeamIdVeto1 != nil {
		return *x.TeamIdVeto1
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdPickn() int32 {
	if x != nil && x.TeamIdPickn != nil {
		return *x.TeamIdPickn
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetDrafts() []*CDataGCCStrike15V2_TournamentMatchDraft_Entry {
	if x != nil {
		return x.Drafts
	}
	return nil
}

type CPreMatchInfoData struct {
	state          protoimpl.MessageState                   `protogen:"open.v1"`
	PredictionsPct *int32                                   `protobuf:"varint,1,opt,name=predictions_pct,json=predictionsPct" json:"predictions_pct,omitempty"`
	Draft          *CDataGCCStrike15V2_TournamentMatchDraft `protobuf:"bytes,4,opt,name=draft" json:"draft,omitempty"`
	Stats          []*CPreMatchInfoData_TeamStats           `protobuf:"bytes,5,rep,name=stats" json:"stats,omitempty"`
	Wins           []int32                                  `protobuf:"varint,6,rep,name=wins" json:"wins,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CPreMatchInfoData) Reset() {
	*x = CPreMatchInfoData{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPreMatchInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPreMatchInfoData) ProtoMessage() {}

func (x *CPreMatchInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPreMatchInfoData.ProtoReflect.Descriptor instead.
func (*CPreMatchInfoData) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{31}
}

func (x *CPreMatchInfoData) GetPredictionsPct() int32 {
	if x != nil && x.PredictionsPct != nil {
		return *x.PredictionsPct
	}
	return 0
}

func (x *CPreMatchInfoData) GetDraft() *CDataGCCStrike15V2_TournamentMatchDraft {
	if x != nil {
		return x.Draft
	}
	return nil
}

func (x *CPreMatchInfoData) GetStats() []*CPreMatchInfoData_TeamStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CPreMatchInfoData) GetWins() []int32 {
	if x != nil {
		return x.Wins
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerReserve struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	AccountIds                  []uint32               `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	GameType                    *uint32                `protobuf:"varint,2,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	MatchId                     *uint64                `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ServerVersion               *uint32                `protobuf:"varint,4,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	Flags                       *uint32                `protobuf:"varint,18,opt,name=flags" json:"flags,omitempty"`
	Rankings                    []*PlayerRankingInfo   `protobuf:"bytes,5,rep,name=rankings" json:"rankings,omitempty"`
	EncryptionKey               *uint64                `protobuf:"varint,6,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	EncryptionKeyPub            *uint64                `protobuf:"varint,7,opt,name=encryption_key_pub,json=encryptionKeyPub" json:"encryption_key_pub,omitempty"`
	PartyIds                    []uint32               `protobuf:"varint,8,rep,name=party_ids,json=partyIds" json:"party_ids,omitempty"`
	Whitelist                   []*IpAddressMask       `protobuf:"bytes,9,rep,name=whitelist" json:"whitelist,omitempty"`
	TvMasterSteamid             *uint64                `protobuf:"varint,10,opt,name=tv_master_steamid,json=tvMasterSteamid" json:"tv_master_steamid,omitempty"`
	TournamentEvent             *TournamentEvent       `protobuf:"bytes,11,opt,name=tournament_event,json=tournamentEvent" json:"tournament_event,omitempty"`
	TournamentTeams             []*TournamentTeam      `protobuf:"bytes,12,rep,name=tournament_teams,json=tournamentTeams" json:"tournament_teams,omitempty"`
	TournamentCastersAccountIds []uint32               `protobuf:"varint,13,rep,name=tournament_casters_account_ids,json=tournamentCastersAccountIds" json:"tournament_casters_account_ids,omitempty"`
	TvRelaySteamid              *uint64                `protobuf:"varint,14,opt,name=tv_relay_steamid,json=tvRelaySteamid" json:"tv_relay_steamid,omitempty"`
	PreMatchData                *CPreMatchInfoData     `protobuf:"bytes,15,opt,name=pre_match_data,json=preMatchData" json:"pre_match_data,omitempty"`
	Rtime32EventStart           *uint32                `protobuf:"varint,16,opt,name=rtime32_event_start,json=rtime32EventStart" json:"rtime32_event_start,omitempty"`
	TvControl                   *uint32                `protobuf:"varint,17,opt,name=tv_control,json=tvControl" json:"tv_control,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ServerReserve.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetRankings() []*PlayerRankingInfo {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetEncryptionKey() uint64 {
	if x != nil && x.EncryptionKey != nil {
		return *x.EncryptionKey
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetEncryptionKeyPub() uint64 {
	if x != nil && x.EncryptionKeyPub != nil {
		return *x.EncryptionKeyPub
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetPartyIds() []uint32 {
	if x != nil {
		return x.PartyIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetWhitelist() []*IpAddressMask {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvMasterSteamid() uint64 {
	if x != nil && x.TvMasterSteamid != nil {
		return *x.TvMasterSteamid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentEvent() *TournamentEvent {
	if x != nil {
		return x.TournamentEvent
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentTeams() []*TournamentTeam {
	if x != nil {
		return x.TournamentTeams
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentCastersAccountIds() []uint32 {
	if x != nil {
		return x.TournamentCastersAccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvRelaySteamid() uint64 {
	if x != nil && x.TvRelaySteamid != nil {
		return *x.TvRelaySteamid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetPreMatchData() *CPreMatchInfoData {
	if x != nil {
		return x.PreMatchData
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetRtime32EventStart() uint32 {
	if x != nil && x.Rtime32EventStart != nil {
		return *x.Rtime32EventStart
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvControl() uint32 {
	if x != nil && x.TvControl != nil {
		return *x.TvControl
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServerReservationResponse struct {
	state                   protoimpl.MessageState                         `protogen:"open.v1"`
	Reservationid           *uint64                                        `protobuf:"varint,1,opt,name=reservationid" json:"reservationid,omitempty"`
	Reservation             *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Map                     *string                                        `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
	GcReservationSent       *uint64                                        `protobuf:"varint,4,opt,name=gc_reservation_sent,json=gcReservationSent" json:"gc_reservation_sent,omitempty"`
	ServerVersion           *uint32                                        `protobuf:"varint,5,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	TvInfo                  *ServerHltvInfo                                `protobuf:"bytes,6,opt,name=tv_info,json=tvInfo" json:"tv_info,omitempty"`
	RewardPlayerAccounts    []uint32                                       `protobuf:"varint,7,rep,name=reward_player_accounts,json=rewardPlayerAccounts" json:"reward_player_accounts,omitempty"`
	IdlePlayerAccounts      []uint32                                       `protobuf:"varint,8,rep,name=idle_player_accounts,json=idlePlayerAccounts" json:"idle_player_accounts,omitempty"`
	RewardItemAttrDefIdx    *uint32                                        `protobuf:"varint,9,opt,name=reward_item_attr_def_idx,json=rewardItemAttrDefIdx" json:"reward_item_attr_def_idx,omitempty"`
	RewardItemAttrValue     *uint32                                        `protobuf:"varint,10,opt,name=reward_item_attr_value,json=rewardItemAttrValue" json:"reward_item_attr_value,omitempty"`
	RewardItemAttrRewardIdx *uint32                                        `protobuf:"varint,11,opt,name=reward_item_attr_reward_idx,json=rewardItemAttrRewardIdx" json:"reward_item_attr_reward_idx,omitempty"`
	RewardDropList          *uint32                                        `protobuf:"varint,12,opt,name=reward_drop_list,json=rewardDropList" json:"reward_drop_list,omitempty"`
	TournamentTag           *string                                        `protobuf:"bytes,13,opt,name=tournament_tag,json=tournamentTag" json:"tournament_tag,omitempty"`
	LegacySteamdatagramPort *uint32                                        `protobuf:"varint,14,opt,name=legacy_steamdatagram_port,json=legacySteamdatagramPort" json:"legacy_steamdatagram_port,omitempty"`
	SteamdatagramRouting    *uint32                                        `protobuf:"varint,17,opt,name=steamdatagram_routing,json=steamdatagramRouting" json:"steamdatagram_routing,omitempty"`
	TestToken               *uint32                                        `protobuf:"fixed32,15,opt,name=test_token,json=testToken" json:"test_token,omitempty"`
	Flags                   *uint32                                        `protobuf:"varint,16,opt,name=flags" json:"flags,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingServerReservationResponse{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingServerReservationResponse) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingServerReservationResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetReservationid() uint64 {
	if x != nil && x.Reservationid != nil {
		return *x.Reservationid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetGcReservationSent() uint64 {
	if x != nil && x.GcReservationSent != nil {
		return *x.GcReservationSent
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTvInfo() *ServerHltvInfo {
	if x != nil {
		return x.TvInfo
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardPlayerAccounts() []uint32 {
	if x != nil {
		return x.RewardPlayerAccounts
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetIdlePlayerAccounts() []uint32 {
	if x != nil {
		return x.IdlePlayerAccounts
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrDefIdx() uint32 {
	if x != nil && x.RewardItemAttrDefIdx != nil {
		return *x.RewardItemAttrDefIdx
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrValue() uint32 {
	if x != nil && x.RewardItemAttrValue != nil {
		return *x.RewardItemAttrValue
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrRewardIdx() uint32 {
	if x != nil && x.RewardItemAttrRewardIdx != nil {
		return *x.RewardItemAttrRewardIdx
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardDropList() uint32 {
	if x != nil && x.RewardDropList != nil {
		return *x.RewardDropList
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTournamentTag() string {
	if x != nil && x.TournamentTag != nil {
		return *x.TournamentTag
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetLegacySteamdatagramPort() uint32 {
	if x != nil && x.LegacySteamdatagramPort != nil {
		return *x.LegacySteamdatagramPort
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetSteamdatagramRouting() uint32 {
	if x != nil && x.SteamdatagramRouting != nil {
		return *x.SteamdatagramRouting
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTestToken() uint32 {
	if x != nil && x.TestToken != nil {
		return *x.TestToken
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientReserve struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Serverid      *uint64                                        `protobuf:"varint,1,opt,name=serverid" json:"serverid,omitempty"`
	DirectUdpIp   *uint32                                        `protobuf:"varint,2,opt,name=direct_udp_ip,json=directUdpIp" json:"direct_udp_ip,omitempty"`
	DirectUdpPort *uint32                                        `protobuf:"varint,3,opt,name=direct_udp_port,json=directUdpPort" json:"direct_udp_port,omitempty"`
	Reservationid *uint64                                        `protobuf:"varint,4,opt,name=reservationid" json:"reservationid,omitempty"`
	Reservation   *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,5,opt,name=reservation" json:"reservation,omitempty"`
	Map           *string                                        `protobuf:"bytes,6,opt,name=map" json:"map,omitempty"`
	ServerAddress *string                                        `protobuf:"bytes,7,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientReserve.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetServerid() uint64 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetDirectUdpIp() uint32 {
	if x != nil && x.DirectUdpIp != nil {
		return *x.DirectUdpIp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetDirectUdpPort() uint32 {
	if x != nil && x.DirectUdpPort != nil {
		return *x.DirectUdpPort
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetReservationid() uint64 {
	if x != nil && x.Reservationid != nil {
		return *x.Reservationid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

type CMsgGCCStrike15V2_MatchmakingServerRoundStats struct {
	state              protoimpl.MessageState                                  `protogen:"open.v1"`
	Reservationid      *uint64                                                 `protobuf:"varint,1,opt,name=reservationid" json:"reservationid,omitempty"`
	Reservation        *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve          `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Map                *string                                                 `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
	Round              *int32                                                  `protobuf:"varint,4,opt,name=round" json:"round,omitempty"`
	Kills              []int32                                                 `protobuf:"varint,5,rep,name=kills" json:"kills,omitempty"`
	Assists            []int32                                                 `protobuf:"varint,6,rep,name=assists" json:"assists,omitempty"`
	Deaths             []int32                                                 `protobuf:"varint,7,rep,name=deaths" json:"deaths,omitempty"`
	Scores             []int32                                                 `protobuf:"varint,8,rep,name=scores" json:"scores,omitempty"`
	Pings              []int32                                                 `protobuf:"varint,9,rep,name=pings" json:"pings,omitempty"`
	RoundResult        *int32                                                  `protobuf:"varint,10,opt,name=round_result,json=roundResult" json:"round_result,omitempty"`
	MatchResult        *int32                                                  `protobuf:"varint,11,opt,name=match_result,json=matchResult" json:"match_result,omitempty"`
	TeamScores         []int32                                                 `protobuf:"varint,12,rep,name=team_scores,json=teamScores" json:"team_scores,omitempty"`
	Confirm            *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm          `protobuf:"bytes,13,opt,name=confirm" json:"confirm,omitempty"`
	ReservationStage   *int32                                                  `protobuf:"varint,14,opt,name=reservation_stage,json=reservationStage" json:"reservation_stage,omitempty"`
	MatchDuration      *int32                                                  `protobuf:"varint,15,opt,name=match_duration,json=matchDuration" json:"match_duration,omitempty"`
	EnemyKills         []int32                                                 `protobuf:"varint,16,rep,name=enemy_kills,json=enemyKills" json:"enemy_kills,omitempty"`
	EnemyHeadshots     []int32                                                 `protobuf:"varint,17,rep,name=enemy_headshots,json=enemyHeadshots" json:"enemy_headshots,omitempty"`
	Enemy_3Ks          []int32                                                 `protobuf:"varint,18,rep,name=enemy_3ks,json=enemy3ks" json:"enemy_3ks,omitempty"`
	Enemy_4Ks          []int32                                                 `protobuf:"varint,19,rep,name=enemy_4ks,json=enemy4ks" json:"enemy_4ks,omitempty"`
	Enemy_5Ks          []int32                                                 `protobuf:"varint,20,rep,name=enemy_5ks,json=enemy5ks" json:"enemy_5ks,omitempty"`
	Mvps               []int32                                                 `protobuf:"varint,21,rep,name=mvps" json:"mvps,omitempty"`
	SpectatorsCount    *uint32                                                 `protobuf:"varint,22,opt,name=spectators_count,json=spectatorsCount" json:"spectators_count,omitempty"`
	SpectatorsCountTv  *uint32                                                 `protobuf:"varint,23,opt,name=spectators_count_tv,json=spectatorsCountTv" json:"spectators_count_tv,omitempty"`
	SpectatorsCountLnk *uint32                                                 `protobuf:"varint,24,opt,name=spectators_count_lnk,json=spectatorsCountLnk" json:"spectators_count_lnk,omitempty"`
	EnemyKillsAgg      []int32                                                 `protobuf:"varint,25,rep,name=enemy_kills_agg,json=enemyKillsAgg" json:"enemy_kills_agg,omitempty"`
	DropInfo           *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo `protobuf:"bytes,26,opt,name=drop_info,json=dropInfo" json:"drop_info,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingServerRoundStats{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingServerRoundStats.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservationid() uint64 {
	if x != nil && x.Reservationid != nil {
		return *x.Reservationid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetKills() []int32 {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetAssists() []int32 {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetDeaths() []int32 {
	if x != nil {
		return x.Deaths
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetScores() []int32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetPings() []int32 {
	if x != nil {
		return x.Pings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetRoundResult() int32 {
	if x != nil && x.RoundResult != nil {
		return *x.RoundResult
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMatchResult() int32 {
	if x != nil && x.MatchResult != nil {
		return *x.MatchResult
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetTeamScores() []int32 {
	if x != nil {
		return x.TeamScores
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetConfirm() *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm {
	if x != nil {
		return x.Confirm
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservationStage() int32 {
	if x != nil && x.ReservationStage != nil {
		return *x.ReservationStage
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMatchDuration() int32 {
	if x != nil && x.MatchDuration != nil {
		return *x.MatchDuration
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyKills() []int32 {
	if x != nil {
		return x.EnemyKills
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyHeadshots() []int32 {
	if x != nil {
		return x.EnemyHeadshots
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_3Ks() []int32 {
	if x != nil {
		return x.Enemy_3Ks
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_4Ks() []int32 {
	if x != nil {
		return x.Enemy_4Ks
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_5Ks() []int32 {
	if x != nil {
		return x.Enemy_5Ks
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMvps() []int32 {
	if x != nil {
		return x.Mvps
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCount() uint32 {
	if x != nil && x.SpectatorsCount != nil {
		return *x.SpectatorsCount
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCountTv() uint32 {
	if x != nil && x.SpectatorsCountTv != nil {
		return *x.SpectatorsCountTv
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCountLnk() uint32 {
	if x != nil && x.SpectatorsCountLnk != nil {
		return *x.SpectatorsCountLnk
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyKillsAgg() []int32 {
	if x != nil {
		return x.EnemyKillsAgg
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetDropInfo() *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo {
	if x != nil {
		return x.DropInfo
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingServerMatchEnd struct {
	state             protoimpl.MessageState                         `protogen:"open.v1"`
	Stats             *CMsgGCCStrike15V2_MatchmakingServerRoundStats `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
	Confirm           *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm `protobuf:"bytes,3,opt,name=confirm" json:"confirm,omitempty"`
	Rematch           *uint64                                        `protobuf:"varint,4,opt,name=rematch" json:"rematch,omitempty"`
	ReplayToken       *uint32                                        `protobuf:"varint,5,opt,name=replay_token,json=replayToken" json:"replay_token,omitempty"`
	ReplayClusterId   *uint32                                        `protobuf:"varint,6,opt,name=replay_cluster_id,json=replayClusterId" json:"replay_cluster_id,omitempty"`
	AbortedMatch      *bool                                          `protobuf:"varint,7,opt,name=aborted_match,json=abortedMatch" json:"aborted_match,omitempty"`
	MatchEndQuestData *CMsgGC_ServerQuestUpdateData                  `protobuf:"bytes,8,opt,name=match_end_quest_data,json=matchEndQuestData" json:"match_end_quest_data,omitempty"`
	ServerVersion     *uint32                                        `protobuf:"varint,9,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingServerMatchEnd{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingServerMatchEnd) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingServerMatchEnd.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetStats() *CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetConfirm() *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm {
	if x != nil {
		return x.Confirm
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetRematch() uint64 {
	if x != nil && x.Rematch != nil {
		return *x.Rematch
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetReplayToken() uint32 {
	if x != nil && x.ReplayToken != nil {
		return *x.ReplayToken
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetReplayClusterId() uint32 {
	if x != nil && x.ReplayClusterId != nil {
		return *x.ReplayClusterId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetAbortedMatch() bool {
	if x != nil && x.AbortedMatch != nil {
		return *x.AbortedMatch
	}
	return false
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetMatchEndQuestData() *CMsgGC_ServerQuestUpdateData {
	if x != nil {
		return x.MatchEndQuestData
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial struct {
	state                    protoimpl.MessageState                         `protogen:"open.v1"`
	Reservationid            *uint64                                        `protobuf:"varint,1,opt,name=reservationid" json:"reservationid,omitempty"`
	Reservation              *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Confirm                  *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm `protobuf:"bytes,3,opt,name=confirm" json:"confirm,omitempty"`
	CompletedPlayerQuestData *CMsgGC_ServerQuestUpdateData                  `protobuf:"bytes,4,opt,name=completed_player_quest_data,json=completedPlayerQuestData" json:"completed_player_quest_data,omitempty"`
	ServerVersion            *uint32                                        `protobuf:"varint,5,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetReservationid() uint64 {
	if x != nil && x.Reservationid != nil {
		return *x.Reservationid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetConfirm() *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm {
	if x != nil {
		return x.Confirm
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetCompletedPlayerQuestData() *CMsgGC_ServerQuestUpdateData {
	if x != nil {
		return x.CompletedPlayerQuestData
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingClient2GCHello struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingClient2GCHello{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2GCHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingClient2GCHello) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingClient2GCHello) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingClient2GCHello.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingClient2GCHello) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{38}
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientHello struct {
	state                protoimpl.MessageState                         `protogen:"open.v1"`
	AccountId            *uint32                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Ongoingmatch         *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,2,opt,name=ongoingmatch" json:"ongoingmatch,omitempty"`
	GlobalStats          *GlobalStatistics                              `protobuf:"bytes,3,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	PenaltySeconds       *uint32                                        `protobuf:"varint,4,opt,name=penalty_seconds,json=penaltySeconds" json:"penalty_seconds,omitempty"`
	PenaltyReason        *uint32                                        `protobuf:"varint,5,opt,name=penalty_reason,json=penaltyReason" json:"penalty_reason,omitempty"`
	VacBanned            *int32                                         `protobuf:"varint,6,opt,name=vac_banned,json=vacBanned" json:"vac_banned,omitempty"`
	Ranking              *PlayerRankingInfo                             `protobuf:"bytes,7,opt,name=ranking" json:"ranking,omitempty"`
	Commendation         *PlayerCommendationInfo                        `protobuf:"bytes,8,opt,name=commendation" json:"commendation,omitempty"`
	Medals               *PlayerMedalsInfo                              `protobuf:"bytes,9,opt,name=medals" json:"medals,omitempty"`
	MyCurrentEvent       *TournamentEvent                               `protobuf:"bytes,10,opt,name=my_current_event,json=myCurrentEvent" json:"my_current_event,omitempty"`
	MyCurrentEventTeams  []*TournamentTeam                              `protobuf:"bytes,11,rep,name=my_current_event_teams,json=myCurrentEventTeams" json:"my_current_event_teams,omitempty"`
	MyCurrentTeam        *TournamentTeam                                `protobuf:"bytes,12,opt,name=my_current_team,json=myCurrentTeam" json:"my_current_team,omitempty"`
	MyCurrentEventStages []*TournamentEvent                             `protobuf:"bytes,13,rep,name=my_current_event_stages,json=myCurrentEventStages" json:"my_current_event_stages,omitempty"`
	SurveyVote           *uint32                                        `protobuf:"varint,14,opt,name=survey_vote,json=surveyVote" json:"survey_vote,omitempty"`
	Activity             *AccountActivity                               `protobuf:"bytes,15,opt,name=activity" json:"activity,omitempty"`
	PlayerLevel          *int32                                         `protobuf:"varint,17,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	PlayerCurXp          *int32                                         `protobuf:"varint,18,opt,name=player_cur_xp,json=playerCurXp" json:"player_cur_xp,omitempty"`
	PlayerXpBonusFlags   *int32                                         `protobuf:"varint,19,opt,name=player_xp_bonus_flags,json=playerXpBonusFlags" json:"player_xp_bonus_flags,omitempty"`
	Rankings             []*PlayerRankingInfo                           `protobuf:"bytes,20,rep,name=rankings" json:"rankings,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientHello{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientHello) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientHello.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetOngoingmatch() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if x != nil {
		return x.Ongoingmatch
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetGlobalStats() *GlobalStatistics {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPenaltySeconds() uint32 {
	if x != nil && x.PenaltySeconds != nil {
		return *x.PenaltySeconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPenaltyReason() uint32 {
	if x != nil && x.PenaltyReason != nil {
		return *x.PenaltyReason
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetVacBanned() int32 {
	if x != nil && x.VacBanned != nil {
		return *x.VacBanned
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetRanking() *PlayerRankingInfo {
	if x != nil {
		return x.Ranking
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetCommendation() *PlayerCommendationInfo {
	if x != nil {
		return x.Commendation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMedals() *PlayerMedalsInfo {
	if x != nil {
		return x.Medals
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEvent() *TournamentEvent {
	if x != nil {
		return x.MyCurrentEvent
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEventTeams() []*TournamentTeam {
	if x != nil {
		return x.MyCurrentEventTeams
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentTeam() *TournamentTeam {
	if x != nil {
		return x.MyCurrentTeam
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEventStages() []*TournamentEvent {
	if x != nil {
		return x.MyCurrentEventStages
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetSurveyVote() uint32 {
	if x != nil && x.SurveyVote != nil {
		return *x.SurveyVote
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetActivity() *AccountActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerLevel() int32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerCurXp() int32 {
	if x != nil && x.PlayerCurXp != nil {
		return *x.PlayerCurXp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerXpBonusFlags() int32 {
	if x != nil && x.PlayerXpBonusFlags != nil {
		return *x.PlayerXpBonusFlags
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetRankings() []*PlayerRankingInfo {
	if x != nil {
		return x.Rankings
	}
	return nil
}

type CMsgGCCStrike15V2_AccountPrivacySettings struct {
	state         protoimpl.MessageState                              `protogen:"open.v1"`
	Settings      []*CMsgGCCStrike15V2_AccountPrivacySettings_Setting `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings) Reset() {
	*x = CMsgGCCStrike15V2_AccountPrivacySettings{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_AccountPrivacySettings) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_AccountPrivacySettings.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_AccountPrivacySettings) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings) GetSettings() []*CMsgGCCStrike15V2_AccountPrivacySettings_Setting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon struct {
	state          protoimpl.MessageState                         `protogen:"open.v1"`
	AccountId      *uint32                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AbandonedMatch *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,2,opt,name=abandoned_match,json=abandonedMatch" json:"abandoned_match,omitempty"`
	PenaltySeconds *uint32                                        `protobuf:"varint,3,opt,name=penalty_seconds,json=penaltySeconds" json:"penalty_seconds,omitempty"`
	PenaltyReason  *uint32                                        `protobuf:"varint,4,opt,name=penalty_reason,json=penaltyReason" json:"penalty_reason,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetAbandonedMatch() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if x != nil {
		return x.AbandonedMatch
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetPenaltySeconds() uint32 {
	if x != nil && x.PenaltySeconds != nil {
		return *x.PenaltySeconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetPenaltyReason() uint32 {
	if x != nil && x.PenaltyReason != nil {
		return *x.PenaltyReason
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServer2GCKick struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	AccountId     *uint32                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Reservation   *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Reason        *uint32                                        `protobuf:"varint,3,opt,name=reason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingServer2GCKick) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingServer2GCKick{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingServer2GCKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingServer2GCKick) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingServer2GCKick) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingServer2GCKick.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingServer2GCKick) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgGCCStrike15V2_MatchmakingServer2GCKick) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServer2GCKick) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServer2GCKick) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rankings      []*PlayerRankingInfo   `protobuf:"bytes,1,rep,name=rankings" json:"rankings,omitempty"`
	MatchId       *uint64                `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) GetRankings() []*PlayerRankingInfo {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientGCRankUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rankings      []*PlayerRankingInfo   `protobuf:"bytes,1,rep,name=rankings" json:"rankings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientGCRankUpdate) Reset() {
	*x = CMsgGCCStrike15V2_ClientGCRankUpdate{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientGCRankUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientGCRankUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientGCRankUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientGCRankUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientGCRankUpdate) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgGCCStrike15V2_ClientGCRankUpdate) GetRankings() []*PlayerRankingInfo {
	if x != nil {
		return x.Rankings
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MainPostUrl   *string                `protobuf:"bytes,1,opt,name=main_post_url,json=mainPostUrl" json:"main_post_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) GetMainPostUrl() string {
	if x != nil && x.MainPostUrl != nil {
		return *x.MainPostUrl
	}
	return ""
}

type CMsgGCCStrike15V2_ServerNotificationForUserPenalty struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AccountId             *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Reason                *uint32                `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	Seconds               *uint32                `protobuf:"varint,3,opt,name=seconds" json:"seconds,omitempty"`
	CommunicationCooldown *bool                  `protobuf:"varint,4,opt,name=communication_cooldown,json=communicationCooldown" json:"communication_cooldown,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Reset() {
	*x = CMsgGCCStrike15V2_ServerNotificationForUserPenalty{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ServerNotificationForUserPenalty) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ServerNotificationForUserPenalty.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetSeconds() uint32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetCommunicationCooldown() bool {
	if x != nil && x.CommunicationCooldown != nil {
		return *x.CommunicationCooldown
	}
	return false
}

type CMsgGCCStrike15V2_ClientReportPlayer struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AccountId      *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RptAimbot      *uint32                `protobuf:"varint,2,opt,name=rpt_aimbot,json=rptAimbot" json:"rpt_aimbot,omitempty"`
	RptWallhack    *uint32                `protobuf:"varint,3,opt,name=rpt_wallhack,json=rptWallhack" json:"rpt_wallhack,omitempty"`
	RptSpeedhack   *uint32                `protobuf:"varint,4,opt,name=rpt_speedhack,json=rptSpeedhack" json:"rpt_speedhack,omitempty"`
	RptTeamharm    *uint32                `protobuf:"varint,5,opt,name=rpt_teamharm,json=rptTeamharm" json:"rpt_teamharm,omitempty"`
	RptTextabuse   *uint32                `protobuf:"varint,6,opt,name=rpt_textabuse,json=rptTextabuse" json:"rpt_textabuse,omitempty"`
	RptVoiceabuse  *uint32                `protobuf:"varint,7,opt,name=rpt_voiceabuse,json=rptVoiceabuse" json:"rpt_voiceabuse,omitempty"`
	MatchId        *uint64                `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ReportFromDemo *bool                  `protobuf:"varint,9,opt,name=report_from_demo,json=reportFromDemo" json:"report_from_demo,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) Reset() {
	*x = CMsgGCCStrike15V2_ClientReportPlayer{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientReportPlayer) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientReportPlayer.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientReportPlayer) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptAimbot() uint32 {
	if x != nil && x.RptAimbot != nil {
		return *x.RptAimbot
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptWallhack() uint32 {
	if x != nil && x.RptWallhack != nil {
		return *x.RptWallhack
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptSpeedhack() uint32 {
	if x != nil && x.RptSpeedhack != nil {
		return *x.RptSpeedhack
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptTeamharm() uint32 {
	if x != nil && x.RptTeamharm != nil {
		return *x.RptTeamharm
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptTextabuse() uint32 {
	if x != nil && x.RptTextabuse != nil {
		return *x.RptTextabuse
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptVoiceabuse() uint32 {
	if x != nil && x.RptVoiceabuse != nil {
		return *x.RptVoiceabuse
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetReportFromDemo() bool {
	if x != nil && x.ReportFromDemo != nil {
		return *x.ReportFromDemo
	}
	return false
}

type CMsgGCCStrike15V2_ClientCommendPlayer struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	AccountId     *uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchId       *uint64                 `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Commendation  *PlayerCommendationInfo `protobuf:"bytes,9,opt,name=commendation" json:"commendation,omitempty"`
	Tokens        *uint32                 `protobuf:"varint,10,opt,name=tokens" json:"tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) Reset() {
	*x = CMsgGCCStrike15V2_ClientCommendPlayer{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientCommendPlayer) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientCommendPlayer.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientCommendPlayer) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) GetCommendation() *PlayerCommendationInfo {
	if x != nil {
		return x.Commendation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) GetTokens() uint32 {
	if x != nil && x.Tokens != nil {
		return *x.Tokens
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportServer struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RptPoorperf       *uint32                `protobuf:"varint,1,opt,name=rpt_poorperf,json=rptPoorperf" json:"rpt_poorperf,omitempty"`
	RptAbusivemodels  *uint32                `protobuf:"varint,2,opt,name=rpt_abusivemodels,json=rptAbusivemodels" json:"rpt_abusivemodels,omitempty"`
	RptBadmotd        *uint32                `protobuf:"varint,3,opt,name=rpt_badmotd,json=rptBadmotd" json:"rpt_badmotd,omitempty"`
	RptListingabuse   *uint32                `protobuf:"varint,4,opt,name=rpt_listingabuse,json=rptListingabuse" json:"rpt_listingabuse,omitempty"`
	RptInventoryabuse *uint32                `protobuf:"varint,5,opt,name=rpt_inventoryabuse,json=rptInventoryabuse" json:"rpt_inventoryabuse,omitempty"`
	MatchId           *uint64                `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientReportServer) Reset() {
	*x = CMsgGCCStrike15V2_ClientReportServer{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientReportServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientReportServer) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientReportServer) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientReportServer.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientReportServer) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptPoorperf() uint32 {
	if x != nil && x.RptPoorperf != nil {
		return *x.RptPoorperf
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptAbusivemodels() uint32 {
	if x != nil && x.RptAbusivemodels != nil {
		return *x.RptAbusivemodels
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptBadmotd() uint32 {
	if x != nil && x.RptBadmotd != nil {
		return *x.RptBadmotd
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptListingabuse() uint32 {
	if x != nil && x.RptListingabuse != nil {
		return *x.RptListingabuse
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptInventoryabuse() uint32 {
	if x != nil && x.RptInventoryabuse != nil {
		return *x.RptInventoryabuse
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConfirmationId *uint64                `protobuf:"varint,1,opt,name=confirmation_id,json=confirmationId" json:"confirmation_id,omitempty"`
	AccountId      *uint32                `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ServerIp       *uint32                `protobuf:"varint,3,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ResponseType   *uint32                `protobuf:"varint,4,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	ResponseResult *uint32                `protobuf:"varint,5,opt,name=response_result,json=responseResult" json:"response_result,omitempty"`
	Tokens         *uint32                `protobuf:"varint,6,opt,name=tokens" json:"tokens,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) Reset() {
	*x = CMsgGCCStrike15V2_ClientReportResponse{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientReportResponse) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientReportResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientReportResponse) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetConfirmationId() uint64 {
	if x != nil && x.ConfirmationId != nil {
		return *x.ConfirmationId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetResponseType() uint32 {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetResponseResult() uint32 {
	if x != nil && x.ResponseResult != nil {
		return *x.ResponseResult
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetTokens() uint32 {
	if x != nil && x.Tokens != nil {
		return *x.Tokens
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestWatchInfoFriends struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RequestId       *uint32                `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	AccountIds      []uint32               `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	Serverid        *uint64                `protobuf:"varint,3,opt,name=serverid" json:"serverid,omitempty"`
	Matchid         *uint64                `protobuf:"varint,4,opt,name=matchid" json:"matchid,omitempty"`
	ClientLauncher  *uint32                `protobuf:"varint,5,opt,name=client_launcher,json=clientLauncher" json:"client_launcher,omitempty"`
	DataCenterPings []*DataCenterPing      `protobuf:"bytes,6,rep,name=data_center_pings,json=dataCenterPings" json:"data_center_pings,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestWatchInfoFriends{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestWatchInfoFriends.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetServerid() uint64 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetClientLauncher() uint32 {
	if x != nil && x.ClientLauncher != nil {
		return *x.ClientLauncher
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetDataCenterPings() []*DataCenterPing {
	if x != nil {
		return x.DataCenterPings
	}
	return nil
}

type WatchableMatchInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ServerIp            *uint32                `protobuf:"varint,1,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	TvPort              *uint32                `protobuf:"varint,2,opt,name=tv_port,json=tvPort" json:"tv_port,omitempty"`
	TvSpectators        *uint32                `protobuf:"varint,3,opt,name=tv_spectators,json=tvSpectators" json:"tv_spectators,omitempty"`
	TvTime              *uint32                `protobuf:"varint,4,opt,name=tv_time,json=tvTime" json:"tv_time,omitempty"`
	TvWatchPassword     []byte                 `protobuf:"bytes,5,opt,name=tv_watch_password,json=tvWatchPassword" json:"tv_watch_password,omitempty"`
	ClDecryptdataKey    *uint64                `protobuf:"varint,6,opt,name=cl_decryptdata_key,json=clDecryptdataKey" json:"cl_decryptdata_key,omitempty"`
	ClDecryptdataKeyPub *uint64                `protobuf:"varint,7,opt,name=cl_decryptdata_key_pub,json=clDecryptdataKeyPub" json:"cl_decryptdata_key_pub,omitempty"`
	GameType            *uint32                `protobuf:"varint,8,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	GameMapgroup        *string                `protobuf:"bytes,9,opt,name=game_mapgroup,json=gameMapgroup" json:"game_mapgroup,omitempty"`
	GameMap             *string                `protobuf:"bytes,10,opt,name=game_map,json=gameMap" json:"game_map,omitempty"`
	ServerId            *uint64                `protobuf:"varint,11,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	MatchId             *uint64                `protobuf:"varint,12,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ReservationId       *uint64                `protobuf:"varint,13,opt,name=reservation_id,json=reservationId" json:"reservation_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WatchableMatchInfo) Reset() {
	*x = WatchableMatchInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchableMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchableMatchInfo) ProtoMessage() {}

func (x *WatchableMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchableMatchInfo.ProtoReflect.Descriptor instead.
func (*WatchableMatchInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{52}
}

func (x *WatchableMatchInfo) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *WatchableMatchInfo) GetTvPort() uint32 {
	if x != nil && x.TvPort != nil {
		return *x.TvPort
	}
	return 0
}

func (x *WatchableMatchInfo) GetTvSpectators() uint32 {
	if x != nil && x.TvSpectators != nil {
		return *x.TvSpectators
	}
	return 0
}

func (x *WatchableMatchInfo) GetTvTime() uint32 {
	if x != nil && x.TvTime != nil {
		return *x.TvTime
	}
	return 0
}

func (x *WatchableMatchInfo) GetTvWatchPassword() []byte {
	if x != nil {
		return x.TvWatchPassword
	}
	return nil
}

func (x *WatchableMatchInfo) GetClDecryptdataKey() uint64 {
	if x != nil && x.ClDecryptdataKey != nil {
		return *x.ClDecryptdataKey
	}
	return 0
}

func (x *WatchableMatchInfo) GetClDecryptdataKeyPub() uint64 {
	if x != nil && x.ClDecryptdataKeyPub != nil {
		return *x.ClDecryptdataKeyPub
	}
	return 0
}

func (x *WatchableMatchInfo) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *WatchableMatchInfo) GetGameMapgroup() string {
	if x != nil && x.GameMapgroup != nil {
		return *x.GameMapgroup
	}
	return ""
}

func (x *WatchableMatchInfo) GetGameMap() string {
	if x != nil && x.GameMap != nil {
		return *x.GameMap
	}
	return ""
}

func (x *WatchableMatchInfo) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *WatchableMatchInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *WatchableMatchInfo) GetReservationId() uint64 {
	if x != nil && x.ReservationId != nil {
		return *x.ReservationId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestJoinFriendData struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Version       *uint32                                        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	AccountId     *uint32                                        `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	JoinToken     *uint32                                        `protobuf:"varint,3,opt,name=join_token,json=joinToken" json:"join_token,omitempty"`
	JoinIpp       *uint32                                        `protobuf:"varint,4,opt,name=join_ipp,json=joinIpp" json:"join_ipp,omitempty"`
	Res           *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,5,opt,name=res" json:"res,omitempty"`
	Errormsg      *string                                        `protobuf:"bytes,6,opt,name=errormsg" json:"errormsg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestJoinFriendData{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestJoinFriendData) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestJoinFriendData.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestJoinFriendData) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetJoinToken() uint32 {
	if x != nil && x.JoinToken != nil {
		return *x.JoinToken
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetJoinIpp() uint32 {
	if x != nil && x.JoinIpp != nil {
		return *x.JoinIpp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetRes() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type CMsgGCCStrike15V2_ClientRequestJoinServerData struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Version       *uint32                                        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	AccountId     *uint32                                        `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Serverid      *uint64                                        `protobuf:"varint,3,opt,name=serverid" json:"serverid,omitempty"`
	ServerIp      *uint32                                        `protobuf:"varint,4,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort    *uint32                                        `protobuf:"varint,5,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	Res           *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,6,opt,name=res" json:"res,omitempty"`
	Errormsg      *string                                        `protobuf:"bytes,7,opt,name=errormsg" json:"errormsg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestJoinServerData{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestJoinServerData) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestJoinServerData.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestJoinServerData) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerid() uint64 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetRes() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type CMsgGCCstrike15V2_ClientRequestNewMission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MissionId     *uint32                `protobuf:"varint,2,opt,name=mission_id,json=missionId" json:"mission_id,omitempty"`
	CampaignId    *uint32                `protobuf:"varint,3,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) Reset() {
	*x = CMsgGCCstrike15V2_ClientRequestNewMission{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCstrike15V2_ClientRequestNewMission) ProtoMessage() {}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCstrike15V2_ClientRequestNewMission.ProtoReflect.Descriptor instead.
func (*CMsgGCCstrike15V2_ClientRequestNewMission) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) GetMissionId() uint32 {
	if x != nil && x.MissionId != nil {
		return *x.MissionId
	}
	return 0
}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) GetCampaignId() uint32 {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return 0
}

type CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	XpProgressData         []*XpProgressData      `protobuf:"bytes,1,rep,name=xp_progress_data,json=xpProgressData" json:"xp_progress_data,omitempty"`
	AccountId              *uint32                `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CurrentXp              *uint32                `protobuf:"varint,3,opt,name=current_xp,json=currentXp" json:"current_xp,omitempty"`
	CurrentLevel           *uint32                `protobuf:"varint,4,opt,name=current_level,json=currentLevel" json:"current_level,omitempty"`
	UpgradedDefidx         *uint32                `protobuf:"varint,5,opt,name=upgraded_defidx,json=upgradedDefidx" json:"upgraded_defidx,omitempty"`
	OperationPointsAwarded *uint32                `protobuf:"varint,6,opt,name=operation_points_awarded,json=operationPointsAwarded" json:"operation_points_awarded,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Reset() {
	*x = CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) ProtoMessage() {}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded.ProtoReflect.Descriptor instead.
func (*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetXpProgressData() []*XpProgressData {
	if x != nil {
		return x.XpProgressData
	}
	return nil
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetCurrentXp() uint32 {
	if x != nil && x.CurrentXp != nil {
		return *x.CurrentXp
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetCurrentLevel() uint32 {
	if x != nil && x.CurrentLevel != nil {
		return *x.CurrentLevel
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetUpgradedDefidx() uint32 {
	if x != nil && x.UpgradedDefidx != nil {
		return *x.UpgradedDefidx
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetOperationPointsAwarded() uint32 {
	if x != nil && x.OperationPointsAwarded != nil {
		return *x.OperationPointsAwarded
	}
	return 0
}

type CMsgGCCStrike15V2_WatchInfoUsers struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RequestId           *uint32                `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	AccountIds          []uint32               `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	WatchableMatchInfos []*WatchableMatchInfo  `protobuf:"bytes,3,rep,name=watchable_match_infos,json=watchableMatchInfos" json:"watchable_match_infos,omitempty"`
	ExtendedTimeout     *uint32                `protobuf:"varint,5,opt,name=extended_timeout,json=extendedTimeout" json:"extended_timeout,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) Reset() {
	*x = CMsgGCCStrike15V2_WatchInfoUsers{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_WatchInfoUsers) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_WatchInfoUsers.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_WatchInfoUsers) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) GetWatchableMatchInfos() []*WatchableMatchInfo {
	if x != nil {
		return x.WatchableMatchInfos
	}
	return nil
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) GetExtendedTimeout() uint32 {
	if x != nil && x.ExtendedTimeout != nil {
		return *x.ExtendedTimeout
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestPlayersProfile struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	RequestId_Deprecated  *uint32                `protobuf:"varint,1,opt,name=request_id__deprecated,json=requestIdDeprecated" json:"request_id__deprecated,omitempty"`
	AccountIds_Deprecated []uint32               `protobuf:"varint,2,rep,name=account_ids__deprecated,json=accountIdsDeprecated" json:"account_ids__deprecated,omitempty"`
	AccountId             *uint32                `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RequestLevel          *uint32                `protobuf:"varint,4,opt,name=request_level,json=requestLevel" json:"request_level,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestPlayersProfile{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestPlayersProfile) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestPlayersProfile.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestPlayersProfile) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetRequestId_Deprecated() uint32 {
	if x != nil && x.RequestId_Deprecated != nil {
		return *x.RequestId_Deprecated
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetAccountIds_Deprecated() []uint32 {
	if x != nil {
		return x.AccountIds_Deprecated
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetRequestLevel() uint32 {
	if x != nil && x.RequestLevel != nil {
		return *x.RequestLevel
	}
	return 0
}

type CMsgGCCStrike15V2_PlayersProfile struct {
	state           protoimpl.MessageState                         `protogen:"open.v1"`
	RequestId       *uint32                                        `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	AccountProfiles []*CMsgGCCStrike15V2_MatchmakingGC2ClientHello `protobuf:"bytes,2,rep,name=account_profiles,json=accountProfiles" json:"account_profiles,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_PlayersProfile) Reset() {
	*x = CMsgGCCStrike15V2_PlayersProfile{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_PlayersProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_PlayersProfile) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_PlayersProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_PlayersProfile.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_PlayersProfile) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgGCCStrike15V2_PlayersProfile) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayersProfile) GetAccountProfiles() []*CMsgGCCStrike15V2_MatchmakingGC2ClientHello {
	if x != nil {
		return x.AccountProfiles
	}
	return nil
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Caseid        *uint64                `protobuf:"varint,1,opt,name=caseid" json:"caseid,omitempty"`
	Suspectid     *uint32                `protobuf:"varint,3,opt,name=suspectid" json:"suspectid,omitempty"`
	Fractionid    *uint32                `protobuf:"varint,4,opt,name=fractionid" json:"fractionid,omitempty"`
	RptAimbot     *uint32                `protobuf:"varint,5,opt,name=rpt_aimbot,json=rptAimbot" json:"rpt_aimbot,omitempty"`
	RptWallhack   *uint32                `protobuf:"varint,6,opt,name=rpt_wallhack,json=rptWallhack" json:"rpt_wallhack,omitempty"`
	RptSpeedhack  *uint32                `protobuf:"varint,7,opt,name=rpt_speedhack,json=rptSpeedhack" json:"rpt_speedhack,omitempty"`
	RptTeamharm   *uint32                `protobuf:"varint,8,opt,name=rpt_teamharm,json=rptTeamharm" json:"rpt_teamharm,omitempty"`
	Reason        *uint32                `protobuf:"varint,9,opt,name=reason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Reset() {
	*x = CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetCaseid() uint64 {
	if x != nil && x.Caseid != nil {
		return *x.Caseid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetSuspectid() uint32 {
	if x != nil && x.Suspectid != nil {
		return *x.Suspectid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetFractionid() uint32 {
	if x != nil && x.Fractionid != nil {
		return *x.Fractionid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptAimbot() uint32 {
	if x != nil && x.RptAimbot != nil {
		return *x.RptAimbot
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptWallhack() uint32 {
	if x != nil && x.RptWallhack != nil {
		return *x.RptWallhack
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptSpeedhack() uint32 {
	if x != nil && x.RptSpeedhack != nil {
		return *x.RptSpeedhack
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptTeamharm() uint32 {
	if x != nil && x.RptTeamharm != nil {
		return *x.RptTeamharm
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Caseid            *uint64                `protobuf:"varint,1,opt,name=caseid" json:"caseid,omitempty"`
	Caseurl           *string                `protobuf:"bytes,2,opt,name=caseurl" json:"caseurl,omitempty"`
	Verdict           *uint32                `protobuf:"varint,3,opt,name=verdict" json:"verdict,omitempty"`
	Timestamp         *uint32                `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Throttleseconds   *uint32                `protobuf:"varint,5,opt,name=throttleseconds" json:"throttleseconds,omitempty"`
	Suspectid         *uint32                `protobuf:"varint,6,opt,name=suspectid" json:"suspectid,omitempty"`
	Fractionid        *uint32                `protobuf:"varint,7,opt,name=fractionid" json:"fractionid,omitempty"`
	Numrounds         *uint32                `protobuf:"varint,8,opt,name=numrounds" json:"numrounds,omitempty"`
	Fractionrounds    *uint32                `protobuf:"varint,9,opt,name=fractionrounds" json:"fractionrounds,omitempty"`
	Streakconvictions *int32                 `protobuf:"varint,10,opt,name=streakconvictions" json:"streakconvictions,omitempty"`
	Reason            *uint32                `protobuf:"varint,11,opt,name=reason" json:"reason,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Reset() {
	*x = CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetCaseid() uint64 {
	if x != nil && x.Caseid != nil {
		return *x.Caseid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetCaseurl() string {
	if x != nil && x.Caseurl != nil {
		return *x.Caseurl
	}
	return ""
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetVerdict() uint32 {
	if x != nil && x.Verdict != nil {
		return *x.Verdict
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetThrottleseconds() uint32 {
	if x != nil && x.Throttleseconds != nil {
		return *x.Throttleseconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetSuspectid() uint32 {
	if x != nil && x.Suspectid != nil {
		return *x.Suspectid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetFractionid() uint32 {
	if x != nil && x.Fractionid != nil {
		return *x.Fractionid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetNumrounds() uint32 {
	if x != nil && x.Numrounds != nil {
		return *x.Numrounds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetFractionrounds() uint32 {
	if x != nil && x.Fractionrounds != nil {
		return *x.Fractionrounds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetStreakconvictions() int32 {
	if x != nil && x.Streakconvictions != nil {
		return *x.Streakconvictions
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Caseid        *uint64                `protobuf:"varint,1,opt,name=caseid" json:"caseid,omitempty"`
	Statusid      *uint32                `protobuf:"varint,2,opt,name=statusid" json:"statusid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Reset() {
	*x = CMsgGCCStrike15V2_PlayerOverwatchCaseStatus{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_PlayerOverwatchCaseStatus.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) GetCaseid() uint64 {
	if x != nil && x.Caseid != nil {
		return *x.Caseid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) GetStatusid() uint32 {
	if x != nil && x.Statusid != nil {
		return *x.Statusid
	}
	return 0
}

type CClientHeaderOverwatchEvidence struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Caseid        *uint64                `protobuf:"varint,2,opt,name=caseid" json:"caseid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientHeaderOverwatchEvidence) Reset() {
	*x = CClientHeaderOverwatchEvidence{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientHeaderOverwatchEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientHeaderOverwatchEvidence) ProtoMessage() {}

func (x *CClientHeaderOverwatchEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientHeaderOverwatchEvidence.ProtoReflect.Descriptor instead.
func (*CClientHeaderOverwatchEvidence) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{63}
}

func (x *CClientHeaderOverwatchEvidence) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CClientHeaderOverwatchEvidence) GetCaseid() uint64 {
	if x != nil && x.Caseid != nil {
		return *x.Caseid
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientTextMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type          *uint32                `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientTextMsg{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientTextMsg) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientTextMsg.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientTextMsg) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CMsgGCCStrike15V2_Client2GCTextMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Args          [][]byte               `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCTextMsg{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCTextMsg) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCTextMsg.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCTextMsg) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type CMsgGCCStrike15V2_MatchEndRunRewardDrops struct {
	state             protoimpl.MessageState                                  `protogen:"open.v1"`
	Serverinfo        *CMsgGCCStrike15V2_MatchmakingServerReservationResponse `protobuf:"bytes,3,opt,name=serverinfo" json:"serverinfo,omitempty"`
	MatchEndQuestData *CMsgGC_ServerQuestUpdateData                           `protobuf:"bytes,4,opt,name=match_end_quest_data,json=matchEndQuestData" json:"match_end_quest_data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Reset() {
	*x = CMsgGCCStrike15V2_MatchEndRunRewardDrops{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchEndRunRewardDrops) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchEndRunRewardDrops.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchEndRunRewardDrops) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) GetServerinfo() *CMsgGCCStrike15V2_MatchmakingServerReservationResponse {
	if x != nil {
		return x.Serverinfo
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) GetMatchEndQuestData() *CMsgGC_ServerQuestUpdateData {
	if x != nil {
		return x.MatchEndQuestData
	}
	return nil
}

type CEconItemPreviewDataBlock struct {
	state              protoimpl.MessageState               `protogen:"open.v1"`
	Accountid          *uint32                              `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Itemid             *uint64                              `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
	Defindex           *uint32                              `protobuf:"varint,3,opt,name=defindex" json:"defindex,omitempty"`
	Paintindex         *uint32                              `protobuf:"varint,4,opt,name=paintindex" json:"paintindex,omitempty"`
	Rarity             *uint32                              `protobuf:"varint,5,opt,name=rarity" json:"rarity,omitempty"`
	Quality            *uint32                              `protobuf:"varint,6,opt,name=quality" json:"quality,omitempty"`
	Paintwear          *uint32                              `protobuf:"varint,7,opt,name=paintwear" json:"paintwear,omitempty"`
	Paintseed          *uint32                              `protobuf:"varint,8,opt,name=paintseed" json:"paintseed,omitempty"`
	Killeaterscoretype *uint32                              `protobuf:"varint,9,opt,name=killeaterscoretype" json:"killeaterscoretype,omitempty"`
	Killeatervalue     *uint32                              `protobuf:"varint,10,opt,name=killeatervalue" json:"killeatervalue,omitempty"`
	Customname         *string                              `protobuf:"bytes,11,opt,name=customname" json:"customname,omitempty"`
	Stickers           []*CEconItemPreviewDataBlock_Sticker `protobuf:"bytes,12,rep,name=stickers" json:"stickers,omitempty"`
	Inventory          *uint32                              `protobuf:"varint,13,opt,name=inventory" json:"inventory,omitempty"`
	Origin             *uint32                              `protobuf:"varint,14,opt,name=origin" json:"origin,omitempty"`
	Questid            *uint32                              `protobuf:"varint,15,opt,name=questid" json:"questid,omitempty"`
	Dropreason         *uint32                              `protobuf:"varint,16,opt,name=dropreason" json:"dropreason,omitempty"`
	Musicindex         *uint32                              `protobuf:"varint,17,opt,name=musicindex" json:"musicindex,omitempty"`
	Entindex           *int32                               `protobuf:"varint,18,opt,name=entindex" json:"entindex,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CEconItemPreviewDataBlock) Reset() {
	*x = CEconItemPreviewDataBlock{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CEconItemPreviewDataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconItemPreviewDataBlock) ProtoMessage() {}

func (x *CEconItemPreviewDataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconItemPreviewDataBlock.ProtoReflect.Descriptor instead.
func (*CEconItemPreviewDataBlock) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{67}
}

func (x *CEconItemPreviewDataBlock) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetPaintindex() uint32 {
	if x != nil && x.Paintindex != nil {
		return *x.Paintindex
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetRarity() uint32 {
	if x != nil && x.Rarity != nil {
		return *x.Rarity
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetPaintwear() uint32 {
	if x != nil && x.Paintwear != nil {
		return *x.Paintwear
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetPaintseed() uint32 {
	if x != nil && x.Paintseed != nil {
		return *x.Paintseed
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetKilleaterscoretype() uint32 {
	if x != nil && x.Killeaterscoretype != nil {
		return *x.Killeaterscoretype
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetKilleatervalue() uint32 {
	if x != nil && x.Killeatervalue != nil {
		return *x.Killeatervalue
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetCustomname() string {
	if x != nil && x.Customname != nil {
		return *x.Customname
	}
	return ""
}

func (x *CEconItemPreviewDataBlock) GetStickers() []*CEconItemPreviewDataBlock_Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *CEconItemPreviewDataBlock) GetInventory() uint32 {
	if x != nil && x.Inventory != nil {
		return *x.Inventory
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetOrigin() uint32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetDropreason() uint32 {
	if x != nil && x.Dropreason != nil {
		return *x.Dropreason
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetMusicindex() uint32 {
	if x != nil && x.Musicindex != nil {
		return *x.Musicindex
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetEntindex() int32 {
	if x != nil && x.Entindex != nil {
		return *x.Entindex
	}
	return 0
}

type CMsgGCCStrike15V2_MatchEndRewardDropsNotification struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Iteminfo      *CEconItemPreviewDataBlock `protobuf:"bytes,6,opt,name=iteminfo" json:"iteminfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Reset() {
	*x = CMsgGCCStrike15V2_MatchEndRewardDropsNotification{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchEndRewardDropsNotification) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchEndRewardDropsNotification.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) GetIteminfo() *CEconItemPreviewDataBlock {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

type CMsgItemAcknowledged struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Iteminfo      *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgItemAcknowledged) Reset() {
	*x = CMsgItemAcknowledged{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgItemAcknowledged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgItemAcknowledged) ProtoMessage() {}

func (x *CMsgItemAcknowledged) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgItemAcknowledged.ProtoReflect.Descriptor instead.
func (*CMsgItemAcknowledged) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgItemAcknowledged) GetIteminfo() *CEconItemPreviewDataBlock {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

type CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParamS        *uint64                `protobuf:"varint,1,opt,name=param_s,json=paramS" json:"param_s,omitempty"`
	ParamA        *uint64                `protobuf:"varint,2,opt,name=param_a,json=paramA" json:"param_a,omitempty"`
	ParamD        *uint64                `protobuf:"varint,3,opt,name=param_d,json=paramD" json:"param_d,omitempty"`
	ParamM        *uint64                `protobuf:"varint,4,opt,name=param_m,json=paramM" json:"param_m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamS() uint64 {
	if x != nil && x.ParamS != nil {
		return *x.ParamS
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamA() uint64 {
	if x != nil && x.ParamA != nil {
		return *x.ParamA
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamD() uint64 {
	if x != nil && x.ParamD != nil {
		return *x.ParamD
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamM() uint64 {
	if x != nil && x.ParamM != nil {
		return *x.ParamM
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Iteminfo      *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) GetIteminfo() *CEconItemPreviewDataBlock {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

type CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Defindex      *uint32                `protobuf:"varint,2,opt,name=defindex" json:"defindex,omitempty"`
	Accountids    []uint32               `protobuf:"varint,3,rep,name=accountids" json:"accountids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Reset() {
	*x = CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) GetAccountids() []uint32 {
	if x != nil {
		return x.Accountids
	}
	return nil
}

type CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{73}
}

type CMsgGCCStrike15V2_MatchListRequestLiveGameForUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestLiveGameForUser{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestLiveGameForUser.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestRecentUserGames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestRecentUserGames{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestRecentUserGames) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestRecentUserGames.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestTournamentGames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eventid       *int32                 `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestTournamentGames{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchListRequestTournamentGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestTournamentGames) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestTournamentGames) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestTournamentGames.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestTournamentGames) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgGCCStrike15V2_MatchListRequestTournamentGames) GetEventid() int32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestFullGameInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Matchid       *uint64                `protobuf:"varint,1,opt,name=matchid" json:"matchid,omitempty"`
	Outcomeid     *uint64                `protobuf:"varint,2,opt,name=outcomeid" json:"outcomeid,omitempty"`
	Token         *uint32                `protobuf:"varint,3,opt,name=token" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestFullGameInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestFullGameInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestFullGameInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetOutcomeid() uint64 {
	if x != nil && x.Outcomeid != nil {
		return *x.Outcomeid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetToken() uint32 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

type CDataGCCStrike15V2_MatchInfo struct {
	state              protoimpl.MessageState                           `protogen:"open.v1"`
	Matchid            *uint64                                          `protobuf:"varint,1,opt,name=matchid" json:"matchid,omitempty"`
	Matchtime          *uint32                                          `protobuf:"varint,2,opt,name=matchtime" json:"matchtime,omitempty"`
	Watchablematchinfo *WatchableMatchInfo                              `protobuf:"bytes,3,opt,name=watchablematchinfo" json:"watchablematchinfo,omitempty"`
	RoundstatsLegacy   *CMsgGCCStrike15V2_MatchmakingServerRoundStats   `protobuf:"bytes,4,opt,name=roundstats_legacy,json=roundstatsLegacy" json:"roundstats_legacy,omitempty"`
	Roundstatsall      []*CMsgGCCStrike15V2_MatchmakingServerRoundStats `protobuf:"bytes,5,rep,name=roundstatsall" json:"roundstatsall,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CDataGCCStrike15V2_MatchInfo) Reset() {
	*x = CDataGCCStrike15V2_MatchInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDataGCCStrike15V2_MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_MatchInfo) ProtoMessage() {}

func (x *CDataGCCStrike15V2_MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_MatchInfo.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_MatchInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{78}
}

func (x *CDataGCCStrike15V2_MatchInfo) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CDataGCCStrike15V2_MatchInfo) GetMatchtime() uint32 {
	if x != nil && x.Matchtime != nil {
		return *x.Matchtime
	}
	return 0
}

func (x *CDataGCCStrike15V2_MatchInfo) GetWatchablematchinfo() *WatchableMatchInfo {
	if x != nil {
		return x.Watchablematchinfo
	}
	return nil
}

func (x *CDataGCCStrike15V2_MatchInfo) GetRoundstatsLegacy() *CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if x != nil {
		return x.RoundstatsLegacy
	}
	return nil
}

func (x *CDataGCCStrike15V2_MatchInfo) GetRoundstatsall() []*CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if x != nil {
		return x.Roundstatsall
	}
	return nil
}

type CDataGCCStrike15V2_TournamentGroupTeam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        *int32                 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Score         *int32                 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Correctpick   *bool                  `protobuf:"varint,3,opt,name=correctpick" json:"correctpick,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) Reset() {
	*x = CDataGCCStrike15V2_TournamentGroupTeam{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentGroupTeam) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentGroupTeam.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentGroupTeam) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{79}
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) GetTeamId() int32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) GetCorrectpick() bool {
	if x != nil && x.Correctpick != nil {
		return *x.Correctpick
	}
	return false
}

type CDataGCCStrike15V2_TournamentGroup struct {
	state             protoimpl.MessageState                      `protogen:"open.v1"`
	Groupid           *uint32                                     `protobuf:"varint,1,opt,name=groupid" json:"groupid,omitempty"`
	Name              *string                                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Desc              *string                                     `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Picks_Deprecated  *uint32                                     `protobuf:"varint,4,opt,name=picks__deprecated,json=picksDeprecated" json:"picks__deprecated,omitempty"`
	Teams             []*CDataGCCStrike15V2_TournamentGroupTeam   `protobuf:"bytes,5,rep,name=teams" json:"teams,omitempty"`
	StageIds          []int32                                     `protobuf:"varint,6,rep,name=stage_ids,json=stageIds" json:"stage_ids,omitempty"`
	Picklockuntiltime *uint32                                     `protobuf:"varint,7,opt,name=picklockuntiltime" json:"picklockuntiltime,omitempty"`
	Pickableteams     *uint32                                     `protobuf:"varint,8,opt,name=pickableteams" json:"pickableteams,omitempty"`
	PointsPerPick     *uint32                                     `protobuf:"varint,9,opt,name=points_per_pick,json=pointsPerPick" json:"points_per_pick,omitempty"`
	Picks             []*CDataGCCStrike15V2_TournamentGroup_Picks `protobuf:"bytes,10,rep,name=picks" json:"picks,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CDataGCCStrike15V2_TournamentGroup) Reset() {
	*x = CDataGCCStrike15V2_TournamentGroup{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDataGCCStrike15V2_TournamentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentGroup) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentGroup.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentGroup) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{80}
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPicks_Deprecated() uint32 {
	if x != nil && x.Picks_Deprecated != nil {
		return *x.Picks_Deprecated
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetTeams() []*CDataGCCStrike15V2_TournamentGroupTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetStageIds() []int32 {
	if x != nil {
		return x.StageIds
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPicklockuntiltime() uint32 {
	if x != nil && x.Picklockuntiltime != nil {
		return *x.Picklockuntiltime
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPickableteams() uint32 {
	if x != nil && x.Pickableteams != nil {
		return *x.Pickableteams
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPointsPerPick() uint32 {
	if x != nil && x.PointsPerPick != nil {
		return *x.PointsPerPick
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPicks() []*CDataGCCStrike15V2_TournamentGroup_Picks {
	if x != nil {
		return x.Picks
	}
	return nil
}

type CDataGCCStrike15V2_TournamentSection struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Sectionid     *uint32                               `protobuf:"varint,1,opt,name=sectionid" json:"sectionid,omitempty"`
	Name          *string                               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Desc          *string                               `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Groups        []*CDataGCCStrike15V2_TournamentGroup `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDataGCCStrike15V2_TournamentSection) Reset() {
	*x = CDataGCCStrike15V2_TournamentSection{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDataGCCStrike15V2_TournamentSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentSection) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentSection) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentSection.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentSection) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{81}
}

func (x *CDataGCCStrike15V2_TournamentSection) GetSectionid() uint32 {
	if x != nil && x.Sectionid != nil {
		return *x.Sectionid
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentSection) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CDataGCCStrike15V2_TournamentSection) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CDataGCCStrike15V2_TournamentSection) GetGroups() []*CDataGCCStrike15V2_TournamentGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type CDataGCCStrike15V2_TournamentInfo struct {
	state           protoimpl.MessageState                  `protogen:"open.v1"`
	Sections        []*CDataGCCStrike15V2_TournamentSection `protobuf:"bytes,1,rep,name=sections" json:"sections,omitempty"`
	TournamentEvent *TournamentEvent                        `protobuf:"bytes,2,opt,name=tournament_event,json=tournamentEvent" json:"tournament_event,omitempty"`
	TournamentTeams []*TournamentTeam                       `protobuf:"bytes,3,rep,name=tournament_teams,json=tournamentTeams" json:"tournament_teams,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDataGCCStrike15V2_TournamentInfo) Reset() {
	*x = CDataGCCStrike15V2_TournamentInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDataGCCStrike15V2_TournamentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentInfo) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentInfo.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{82}
}

func (x *CDataGCCStrike15V2_TournamentInfo) GetSections() []*CDataGCCStrike15V2_TournamentSection {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentInfo) GetTournamentEvent() *TournamentEvent {
	if x != nil {
		return x.TournamentEvent
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentInfo) GetTournamentTeams() []*TournamentTeam {
	if x != nil {
		return x.TournamentTeams
	}
	return nil
}

type CMsgGCCStrike15V2_MatchList struct {
	state          protoimpl.MessageState             `protogen:"open.v1"`
	Msgrequestid   *uint32                            `protobuf:"varint,1,opt,name=msgrequestid" json:"msgrequestid,omitempty"`
	Accountid      *uint32                            `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
	Servertime     *uint32                            `protobuf:"varint,3,opt,name=servertime" json:"servertime,omitempty"`
	Matches        []*CDataGCCStrike15V2_MatchInfo    `protobuf:"bytes,4,rep,name=matches" json:"matches,omitempty"`
	Streams        []*TournamentTeam                  `protobuf:"bytes,5,rep,name=streams" json:"streams,omitempty"`
	Tournamentinfo *CDataGCCStrike15V2_TournamentInfo `protobuf:"bytes,6,opt,name=tournamentinfo" json:"tournamentinfo,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchList) Reset() {
	*x = CMsgGCCStrike15V2_MatchList{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchList) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchList) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchList.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchList) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{83}
}

func (x *CMsgGCCStrike15V2_MatchList) GetMsgrequestid() uint32 {
	if x != nil && x.Msgrequestid != nil {
		return *x.Msgrequestid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchList) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchList) GetServertime() uint32 {
	if x != nil && x.Servertime != nil {
		return *x.Servertime
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchList) GetMatches() []*CDataGCCStrike15V2_MatchInfo {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchList) GetStreams() []*TournamentTeam {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchList) GetTournamentinfo() *CDataGCCStrike15V2_TournamentInfo {
	if x != nil {
		return x.Tournamentinfo
	}
	return nil
}

type CMsgGCCStrike15V2_Predictions struct {
	state               protoimpl.MessageState                              `protogen:"open.v1"`
	EventId             *uint32                                             `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	GroupMatchTeamPicks []*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick `protobuf:"bytes,2,rep,name=group_match_team_picks,json=groupMatchTeamPicks" json:"group_match_team_picks,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Predictions) Reset() {
	*x = CMsgGCCStrike15V2_Predictions{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Predictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Predictions) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Predictions) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Predictions.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Predictions) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{84}
}

func (x *CMsgGCCStrike15V2_Predictions) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions) GetGroupMatchTeamPicks() []*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick {
	if x != nil {
		return x.GroupMatchTeamPicks
	}
	return nil
}

type CMsgGCCStrike15V2_Fantasy struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	EventId       *uint32                                  `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Teams         []*CMsgGCCStrike15V2_Fantasy_FantasyTeam `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Fantasy) Reset() {
	*x = CMsgGCCStrike15V2_Fantasy{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Fantasy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Fantasy) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Fantasy) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Fantasy.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Fantasy) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgGCCStrike15V2_Fantasy) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Fantasy) GetTeams() []*CMsgGCCStrike15V2_Fantasy_FantasyTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

type CAttribute_String struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *string                `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAttribute_String) Reset() {
	*x = CAttribute_String{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAttribute_String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAttribute_String) ProtoMessage() {}

func (x *CAttribute_String) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAttribute_String.ProtoReflect.Descriptor instead.
func (*CAttribute_String) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{86}
}

func (x *CAttribute_String) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgGCToGCReloadVersions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToGCReloadVersions) Reset() {
	*x = CMsgGCToGCReloadVersions{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToGCReloadVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCReloadVersions) ProtoMessage() {}

func (x *CMsgGCToGCReloadVersions) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCReloadVersions.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCReloadVersions) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{87}
}

type CMsgCStrike15Welcome struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	StoreItemHash           *uint32                `protobuf:"varint,5,opt,name=store_item_hash,json=storeItemHash" json:"store_item_hash,omitempty"`
	Timeplayedconsecutively *uint32                `protobuf:"varint,6,opt,name=timeplayedconsecutively" json:"timeplayedconsecutively,omitempty"`
	TimeFirstPlayed         *uint32                `protobuf:"varint,10,opt,name=time_first_played,json=timeFirstPlayed" json:"time_first_played,omitempty"`
	LastTimePlayed          *uint32                `protobuf:"varint,12,opt,name=last_time_played,json=lastTimePlayed" json:"last_time_played,omitempty"`
	LastIpAddress           *uint32                `protobuf:"varint,13,opt,name=last_ip_address,json=lastIpAddress" json:"last_ip_address,omitempty"`
	Gscookieid              *uint64                `protobuf:"varint,18,opt,name=gscookieid" json:"gscookieid,omitempty"`
	Uniqueid                *uint64                `protobuf:"varint,19,opt,name=uniqueid" json:"uniqueid,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CMsgCStrike15Welcome) Reset() {
	*x = CMsgCStrike15Welcome{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgCStrike15Welcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCStrike15Welcome) ProtoMessage() {}

func (x *CMsgCStrike15Welcome) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCStrike15Welcome.ProtoReflect.Descriptor instead.
func (*CMsgCStrike15Welcome) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgCStrike15Welcome) GetStoreItemHash() uint32 {
	if x != nil && x.StoreItemHash != nil {
		return *x.StoreItemHash
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetTimeplayedconsecutively() uint32 {
	if x != nil && x.Timeplayedconsecutively != nil {
		return *x.Timeplayedconsecutively
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetTimeFirstPlayed() uint32 {
	if x != nil && x.TimeFirstPlayed != nil {
		return *x.TimeFirstPlayed
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetLastTimePlayed() uint32 {
	if x != nil && x.LastTimePlayed != nil {
		return *x.LastTimePlayed
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetLastIpAddress() uint32 {
	if x != nil && x.LastIpAddress != nil {
		return *x.LastIpAddress
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetGscookieid() uint64 {
	if x != nil && x.Gscookieid != nil {
		return *x.Gscookieid
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetUniqueid() uint64 {
	if x != nil && x.Uniqueid != nil {
		return *x.Uniqueid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientVarValueNotificationInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValueName     *string                `protobuf:"bytes,1,opt,name=value_name,json=valueName" json:"value_name,omitempty"`
	ValueInt      *int32                 `protobuf:"varint,2,opt,name=value_int,json=valueInt" json:"value_int,omitempty"`
	ServerAddr    *uint32                `protobuf:"varint,3,opt,name=server_addr,json=serverAddr" json:"server_addr,omitempty"`
	ServerPort    *uint32                `protobuf:"varint,4,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	ChokedBlocks  []string               `protobuf:"bytes,5,rep,name=choked_blocks,json=chokedBlocks" json:"choked_blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Reset() {
	*x = CMsgGCCStrike15V2_ClientVarValueNotificationInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientVarValueNotificationInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientVarValueNotificationInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{89}
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetValueName() string {
	if x != nil && x.ValueName != nil {
		return *x.ValueName
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetValueInt() int32 {
	if x != nil && x.ValueInt != nil {
		return *x.ValueInt
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetServerAddr() uint32 {
	if x != nil && x.ServerAddr != nil {
		return *x.ServerAddr
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetChokedBlocks() []string {
	if x != nil {
		return x.ChokedBlocks
	}
	return nil
}

type CMsgGCCStrike15V2_ServerVarValueNotificationInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Viewangles    []uint32               `protobuf:"varint,2,rep,name=viewangles" json:"viewangles,omitempty"`
	Type          *uint32                `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Reset() {
	*x = CMsgGCCStrike15V2_ServerVarValueNotificationInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ServerVarValueNotificationInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ServerVarValueNotificationInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetViewangles() []uint32 {
	if x != nil {
		return x.Viewangles
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type CMsgGCCStrike15V2_GiftsLeaderboardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Reset() {
	*x = CMsgGCCStrike15V2_GiftsLeaderboardRequest{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GiftsLeaderboardRequest) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GiftsLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GiftsLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{91}
}

type CMsgGCCStrike15V2_GiftsLeaderboardResponse struct {
	state             protoimpl.MessageState                                             `protogen:"open.v1"`
	Servertime        *uint32                                                            `protobuf:"varint,1,opt,name=servertime" json:"servertime,omitempty"`
	TimePeriodSeconds *uint32                                                            `protobuf:"varint,2,opt,name=time_period_seconds,json=timePeriodSeconds" json:"time_period_seconds,omitempty"`
	TotalGiftsGiven   *uint32                                                            `protobuf:"varint,3,opt,name=total_gifts_given,json=totalGiftsGiven" json:"total_gifts_given,omitempty"`
	TotalGivers       *uint32                                                            `protobuf:"varint,4,opt,name=total_givers,json=totalGivers" json:"total_givers,omitempty"`
	Entries           []*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Reset() {
	*x = CMsgGCCStrike15V2_GiftsLeaderboardResponse{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GiftsLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetServertime() uint32 {
	if x != nil && x.Servertime != nil {
		return *x.Servertime
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTimePeriodSeconds() uint32 {
	if x != nil && x.TimePeriodSeconds != nil {
		return *x.TimePeriodSeconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTotalGiftsGiven() uint32 {
	if x != nil && x.TotalGiftsGiven != nil {
		return *x.TotalGiftsGiven
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTotalGivers() uint32 {
	if x != nil && x.TotalGivers != nil {
		return *x.TotalGivers
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetEntries() []*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_ClientSubmitSurveyVote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SurveyId      *uint32                `protobuf:"varint,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	Vote          *uint32                `protobuf:"varint,2,opt,name=vote" json:"vote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Reset() {
	*x = CMsgGCCStrike15V2_ClientSubmitSurveyVote{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientSubmitSurveyVote) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientSubmitSurveyVote.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientSubmitSurveyVote) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) GetSurveyId() uint32 {
	if x != nil && x.SurveyId != nil {
		return *x.SurveyId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) GetVote() uint32 {
	if x != nil && x.Vote != nil {
		return *x.Vote
	}
	return 0
}

type CMsgGCCStrike15V2_Server2GCClientValidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Server2GCClientValidate) Reset() {
	*x = CMsgGCCStrike15V2_Server2GCClientValidate{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Server2GCClientValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Server2GCClientValidate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Server2GCClientValidate) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Server2GCClientValidate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Server2GCClientValidate) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgGCCStrike15V2_Server2GCClientValidate) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_Server2GCPureServerValidationFailure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Path          *string                `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	File          *string                `protobuf:"bytes,3,opt,name=file" json:"file,omitempty"`
	Crc           *uint32                `protobuf:"varint,4,opt,name=crc" json:"crc,omitempty"`
	Hash          *int32                 `protobuf:"varint,5,opt,name=hash" json:"hash,omitempty"`
	Len           *int32                 `protobuf:"varint,6,opt,name=len" json:"len,omitempty"`
	PackNumber    *int32                 `protobuf:"varint,7,opt,name=pack_number,json=packNumber" json:"pack_number,omitempty"`
	PackFileId    *int32                 `protobuf:"varint,8,opt,name=pack_file_id,json=packFileId" json:"pack_file_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Reset() {
	*x = CMsgGCCStrike15V2_Server2GCPureServerValidationFailure{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Server2GCPureServerValidationFailure.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetFile() string {
	if x != nil && x.File != nil {
		return *x.File
	}
	return ""
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetCrc() uint32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetHash() int32 {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetPackNumber() int32 {
	if x != nil && x.PackNumber != nil {
		return *x.PackNumber
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetPackFileId() int32 {
	if x != nil && x.PackFileId != nil {
		return *x.PackFileId
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientTournamentInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eventid       *uint32                `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	Stageid       *uint32                `protobuf:"varint,2,opt,name=stageid" json:"stageid,omitempty"`
	GameType      *uint32                `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Teamids       []uint32               `protobuf:"varint,4,rep,name=teamids" json:"teamids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientTournamentInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientTournamentInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientTournamentInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientTournamentInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetEventid() uint32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetTeamids() []uint32 {
	if x != nil {
		return x.Teamids
	}
	return nil
}

type CSOEconCoupon struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Entryid        *uint32                `protobuf:"varint,1,opt,name=entryid" json:"entryid,omitempty"`
	Defidx         *uint32                `protobuf:"varint,2,opt,name=defidx" json:"defidx,omitempty"`
	ExpirationDate *uint32                `protobuf:"fixed32,3,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSOEconCoupon) Reset() {
	*x = CSOEconCoupon{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSOEconCoupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOEconCoupon) ProtoMessage() {}

func (x *CSOEconCoupon) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOEconCoupon.ProtoReflect.Descriptor instead.
func (*CSOEconCoupon) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{97}
}

func (x *CSOEconCoupon) GetEntryid() uint32 {
	if x != nil && x.Entryid != nil {
		return *x.Entryid
	}
	return 0
}

func (x *CSOEconCoupon) GetDefidx() uint32 {
	if x != nil && x.Defidx != nil {
		return *x.Defidx
	}
	return 0
}

func (x *CSOEconCoupon) GetExpirationDate() uint32 {
	if x != nil && x.ExpirationDate != nil {
		return *x.ExpirationDate
	}
	return 0
}

type CSOQuestProgress struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Questid         *uint32                `protobuf:"varint,1,opt,name=questid" json:"questid,omitempty"`
	PointsRemaining *uint32                `protobuf:"varint,2,opt,name=points_remaining,json=pointsRemaining" json:"points_remaining,omitempty"`
	BonusPoints     *uint32                `protobuf:"varint,3,opt,name=bonus_points,json=bonusPoints" json:"bonus_points,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSOQuestProgress) Reset() {
	*x = CSOQuestProgress{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSOQuestProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOQuestProgress) ProtoMessage() {}

func (x *CSOQuestProgress) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOQuestProgress.ProtoReflect.Descriptor instead.
func (*CSOQuestProgress) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{98}
}

func (x *CSOQuestProgress) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return 0
}

func (x *CSOQuestProgress) GetPointsRemaining() uint32 {
	if x != nil && x.PointsRemaining != nil {
		return *x.PointsRemaining
	}
	return 0
}

func (x *CSOQuestProgress) GetBonusPoints() uint32 {
	if x != nil && x.BonusPoints != nil {
		return *x.BonusPoints
	}
	return 0
}

type CSOAccountSeasonalOperation struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SeasonValue       *uint32                `protobuf:"varint,1,opt,name=season_value,json=seasonValue" json:"season_value,omitempty"`
	TierUnlocked      *uint32                `protobuf:"varint,2,opt,name=tier_unlocked,json=tierUnlocked" json:"tier_unlocked,omitempty"`
	PremiumTiers      *uint32                `protobuf:"varint,3,opt,name=premium_tiers,json=premiumTiers" json:"premium_tiers,omitempty"`
	MissionId         *uint32                `protobuf:"varint,4,opt,name=mission_id,json=missionId" json:"mission_id,omitempty"`
	MissionsCompleted *uint32                `protobuf:"varint,5,opt,name=missions_completed,json=missionsCompleted" json:"missions_completed,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CSOAccountSeasonalOperation) Reset() {
	*x = CSOAccountSeasonalOperation{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSOAccountSeasonalOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOAccountSeasonalOperation) ProtoMessage() {}

func (x *CSOAccountSeasonalOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOAccountSeasonalOperation.ProtoReflect.Descriptor instead.
func (*CSOAccountSeasonalOperation) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{99}
}

func (x *CSOAccountSeasonalOperation) GetSeasonValue() uint32 {
	if x != nil && x.SeasonValue != nil {
		return *x.SeasonValue
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetTierUnlocked() uint32 {
	if x != nil && x.TierUnlocked != nil {
		return *x.TierUnlocked
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetPremiumTiers() uint32 {
	if x != nil && x.PremiumTiers != nil {
		return *x.PremiumTiers
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetMissionId() uint32 {
	if x != nil && x.MissionId != nil {
		return *x.MissionId
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetMissionsCompleted() uint32 {
	if x != nil && x.MissionsCompleted != nil {
		return *x.MissionsCompleted
	}
	return 0
}

type CSOPersonaDataPublic struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	PlayerLevel   *int32                  `protobuf:"varint,1,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	Commendation  *PlayerCommendationInfo `protobuf:"bytes,2,opt,name=commendation" json:"commendation,omitempty"`
	ElevatedState *bool                   `protobuf:"varint,3,opt,name=elevated_state,json=elevatedState" json:"elevated_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSOPersonaDataPublic) Reset() {
	*x = CSOPersonaDataPublic{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSOPersonaDataPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOPersonaDataPublic) ProtoMessage() {}

func (x *CSOPersonaDataPublic) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOPersonaDataPublic.ProtoReflect.Descriptor instead.
func (*CSOPersonaDataPublic) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{100}
}

func (x *CSOPersonaDataPublic) GetPlayerLevel() int32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CSOPersonaDataPublic) GetCommendation() *PlayerCommendationInfo {
	if x != nil {
		return x.Commendation
	}
	return nil
}

func (x *CSOPersonaDataPublic) GetElevatedState() bool {
	if x != nil && x.ElevatedState != nil {
		return *x.ElevatedState
	}
	return false
}

type CMsgGC_GlobalGame_Subscribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticket        *uint64                `protobuf:"varint,1,opt,name=ticket" json:"ticket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGC_GlobalGame_Subscribe) Reset() {
	*x = CMsgGC_GlobalGame_Subscribe{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGC_GlobalGame_Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GlobalGame_Subscribe) ProtoMessage() {}

func (x *CMsgGC_GlobalGame_Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GlobalGame_Subscribe.ProtoReflect.Descriptor instead.
func (*CMsgGC_GlobalGame_Subscribe) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgGC_GlobalGame_Subscribe) GetTicket() uint64 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

type CMsgGC_GlobalGame_Unsubscribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timeleft      *int32                 `protobuf:"varint,1,opt,name=timeleft" json:"timeleft,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGC_GlobalGame_Unsubscribe) Reset() {
	*x = CMsgGC_GlobalGame_Unsubscribe{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGC_GlobalGame_Unsubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GlobalGame_Unsubscribe) ProtoMessage() {}

func (x *CMsgGC_GlobalGame_Unsubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GlobalGame_Unsubscribe.ProtoReflect.Descriptor instead.
func (*CMsgGC_GlobalGame_Unsubscribe) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{102}
}

func (x *CMsgGC_GlobalGame_Unsubscribe) GetTimeleft() int32 {
	if x != nil && x.Timeleft != nil {
		return *x.Timeleft
	}
	return 0
}

type CMsgGC_GlobalGame_Play struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticket        *uint64                `protobuf:"varint,1,opt,name=ticket" json:"ticket,omitempty"`
	Gametimems    *uint32                `protobuf:"varint,2,opt,name=gametimems" json:"gametimems,omitempty"`
	Msperpoint    *uint32                `protobuf:"varint,3,opt,name=msperpoint" json:"msperpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGC_GlobalGame_Play) Reset() {
	*x = CMsgGC_GlobalGame_Play{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGC_GlobalGame_Play) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GlobalGame_Play) ProtoMessage() {}

func (x *CMsgGC_GlobalGame_Play) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GlobalGame_Play.ProtoReflect.Descriptor instead.
func (*CMsgGC_GlobalGame_Play) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{103}
}

func (x *CMsgGC_GlobalGame_Play) GetTicket() uint64 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

func (x *CMsgGC_GlobalGame_Play) GetGametimems() uint32 {
	if x != nil && x.Gametimems != nil {
		return *x.Gametimems
	}
	return 0
}

func (x *CMsgGC_GlobalGame_Play) GetMsperpoint() uint32 {
	if x != nil && x.Msperpoint != nil {
		return *x.Msperpoint
	}
	return 0
}

type CMsgGCCStrike15V2_AcknowledgePenalty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Acknowledged  *int32                 `protobuf:"varint,1,opt,name=acknowledged" json:"acknowledged,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_AcknowledgePenalty) Reset() {
	*x = CMsgGCCStrike15V2_AcknowledgePenalty{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_AcknowledgePenalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_AcknowledgePenalty) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_AcknowledgePenalty) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_AcknowledgePenalty.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_AcknowledgePenalty) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{104}
}

func (x *CMsgGCCStrike15V2_AcknowledgePenalty) GetAcknowledged() int32 {
	if x != nil && x.Acknowledged != nil {
		return *x.Acknowledged
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Defindex      *uint32                `protobuf:"varint,1,opt,name=defindex" json:"defindex,omitempty"`
	Upgradeid     *uint64                `protobuf:"varint,2,opt,name=upgradeid" json:"upgradeid,omitempty"`
	Hours         *uint32                `protobuf:"varint,3,opt,name=hours" json:"hours,omitempty"`
	Prestigetime  *uint32                `protobuf:"varint,4,opt,name=prestigetime" json:"prestigetime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetUpgradeid() uint64 {
	if x != nil && x.Upgradeid != nil {
		return *x.Upgradeid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetHours() uint32 {
	if x != nil && x.Hours != nil {
		return *x.Hours
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetPrestigetime() uint32 {
	if x != nil && x.Prestigetime != nil {
		return *x.Prestigetime
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCStreamUnlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticket        *uint64                `protobuf:"varint,1,opt,name=ticket" json:"ticket,omitempty"`
	Os            *int32                 `protobuf:"varint,2,opt,name=os" json:"os,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCStreamUnlock{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCStreamUnlock) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCStreamUnlock.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCStreamUnlock) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) GetTicket() uint64 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) GetOs() int32 {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCRequestElevate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stage         *uint32                `protobuf:"varint,1,opt,name=stage" json:"stage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestElevate) Reset() {
	*x = CMsgGCCStrike15V2_ClientToGCRequestElevate{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestElevate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientToGCRequestElevate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientToGCRequestElevate) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientToGCRequestElevate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientToGCRequestElevate) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestElevate) GetStage() uint32 {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCChat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Text          *string                `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientToGCChat) Reset() {
	*x = CMsgGCCStrike15V2_ClientToGCChat{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientToGCChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientToGCChat) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientToGCChat) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientToGCChat.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientToGCChat) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{108}
}

func (x *CMsgGCCStrike15V2_ClientToGCChat) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientToGCChat) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CMsgGCCStrike15V2_GCToClientChat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Text          *string                `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GCToClientChat) Reset() {
	*x = CMsgGCCStrike15V2_GCToClientChat{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GCToClientChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GCToClientChat) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GCToClientChat) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GCToClientChat.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GCToClientChat) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{109}
}

func (x *CMsgGCCStrike15V2_GCToClientChat) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GCToClientChat) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CMsgGCCStrike15V2_ClientAuthKeyCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eventid       *uint32                `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	Code          *string                `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) Reset() {
	*x = CMsgGCCStrike15V2_ClientAuthKeyCode{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientAuthKeyCode) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientAuthKeyCode.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientAuthKeyCode) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) GetEventid() uint32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type CMsgGCCStrike15_GotvSyncPacket struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Data          *CEngineGotvSyncPacket `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15_GotvSyncPacket) Reset() {
	*x = CMsgGCCStrike15_GotvSyncPacket{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15_GotvSyncPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15_GotvSyncPacket) ProtoMessage() {}

func (x *CMsgGCCStrike15_GotvSyncPacket) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15_GotvSyncPacket.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15_GotvSyncPacket) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgGCCStrike15_GotvSyncPacket) GetData() *CEngineGotvSyncPacket {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlayerDecalDigitalSignature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signature     []byte                 `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	Accountid     *uint32                `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
	Rtime         *uint32                `protobuf:"varint,3,opt,name=rtime" json:"rtime,omitempty"`
	Endpos        []float32              `protobuf:"fixed32,4,rep,name=endpos" json:"endpos,omitempty"`
	Startpos      []float32              `protobuf:"fixed32,5,rep,name=startpos" json:"startpos,omitempty"`
	Right         []float32              `protobuf:"fixed32,6,rep,name=right" json:"right,omitempty"`
	TxDefidx      *uint32                `protobuf:"varint,7,opt,name=tx_defidx,json=txDefidx" json:"tx_defidx,omitempty"`
	Entindex      *int32                 `protobuf:"varint,8,opt,name=entindex" json:"entindex,omitempty"`
	Hitbox        *uint32                `protobuf:"varint,9,opt,name=hitbox" json:"hitbox,omitempty"`
	Creationtime  *float32               `protobuf:"fixed32,10,opt,name=creationtime" json:"creationtime,omitempty"`
	Equipslot     *uint32                `protobuf:"varint,11,opt,name=equipslot" json:"equipslot,omitempty"`
	TraceId       *uint32                `protobuf:"varint,12,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	Normal        []float32              `protobuf:"fixed32,13,rep,name=normal" json:"normal,omitempty"`
	TintId        *uint32                `protobuf:"varint,14,opt,name=tint_id,json=tintId" json:"tint_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerDecalDigitalSignature) Reset() {
	*x = PlayerDecalDigitalSignature{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerDecalDigitalSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDecalDigitalSignature) ProtoMessage() {}

func (x *PlayerDecalDigitalSignature) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDecalDigitalSignature.ProtoReflect.Descriptor instead.
func (*PlayerDecalDigitalSignature) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{112}
}

func (x *PlayerDecalDigitalSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetRtime() uint32 {
	if x != nil && x.Rtime != nil {
		return *x.Rtime
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetEndpos() []float32 {
	if x != nil {
		return x.Endpos
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetStartpos() []float32 {
	if x != nil {
		return x.Startpos
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetRight() []float32 {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetTxDefidx() uint32 {
	if x != nil && x.TxDefidx != nil {
		return *x.TxDefidx
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetEntindex() int32 {
	if x != nil && x.Entindex != nil {
		return *x.Entindex
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetHitbox() uint32 {
	if x != nil && x.Hitbox != nil {
		return *x.Hitbox
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetCreationtime() float32 {
	if x != nil && x.Creationtime != nil {
		return *x.Creationtime
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetEquipslot() uint32 {
	if x != nil && x.Equipslot != nil {
		return *x.Equipslot
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetTraceId() uint32 {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetNormal() []float32 {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetTintId() uint32 {
	if x != nil && x.TintId != nil {
		return *x.TintId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientPlayerDecalSign struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Data          *PlayerDecalDigitalSignature `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Itemid        *uint64                      `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) Reset() {
	*x = CMsgGCCStrike15V2_ClientPlayerDecalSign{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPlayerDecalSign) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPlayerDecalSign.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPlayerDecalSign) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{113}
}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) GetData() *PlayerDecalDigitalSignature {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientLogonFatalError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Errorcode     *uint32                `protobuf:"varint,1,opt,name=errorcode" json:"errorcode,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Country       *string                `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) Reset() {
	*x = CMsgGCCStrike15V2_ClientLogonFatalError{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientLogonFatalError) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientLogonFatalError.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientLogonFatalError) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{114}
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) GetErrorcode() uint32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type CMsgGCCStrike15V2_ClientPollState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pollid        *uint32                `protobuf:"varint,1,opt,name=pollid" json:"pollid,omitempty"`
	Names         []string               `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	Values        []int32                `protobuf:"varint,3,rep,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientPollState) Reset() {
	*x = CMsgGCCStrike15V2_ClientPollState{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientPollState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPollState) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPollState) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPollState.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPollState) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{115}
}

func (x *CMsgGCCStrike15V2_ClientPollState) GetPollid() uint32 {
	if x != nil && x.Pollid != nil {
		return *x.Pollid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPollState) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientPollState) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CMsgGCCStrike15V2_Party_Register struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ver           *uint32                `protobuf:"varint,2,opt,name=ver" json:"ver,omitempty"`
	Apr           *uint32                `protobuf:"varint,3,opt,name=apr" json:"apr,omitempty"`
	Ark           *uint32                `protobuf:"varint,4,opt,name=ark" json:"ark,omitempty"`
	Nby           *uint32                `protobuf:"varint,5,opt,name=nby" json:"nby,omitempty"`
	Grp           *uint32                `protobuf:"varint,6,opt,name=grp" json:"grp,omitempty"`
	Slots         *uint32                `protobuf:"varint,7,opt,name=slots" json:"slots,omitempty"`
	Launcher      *uint32                `protobuf:"varint,8,opt,name=launcher" json:"launcher,omitempty"`
	GameType      *uint32                `protobuf:"varint,9,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Party_Register) Reset() {
	*x = CMsgGCCStrike15V2_Party_Register{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Party_Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_Register) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_Register) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_Register.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_Register) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{116}
}

func (x *CMsgGCCStrike15V2_Party_Register) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetVer() uint32 {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetApr() uint32 {
	if x != nil && x.Apr != nil {
		return *x.Apr
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetArk() uint32 {
	if x != nil && x.Ark != nil {
		return *x.Ark
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetNby() uint32 {
	if x != nil && x.Nby != nil {
		return *x.Nby
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetGrp() uint32 {
	if x != nil && x.Grp != nil {
		return *x.Grp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetSlots() uint32 {
	if x != nil && x.Slots != nil {
		return *x.Slots
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetLauncher() uint32 {
	if x != nil && x.Launcher != nil {
		return *x.Launcher
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

type CMsgGCCStrike15V2_Party_Search struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ver           *uint32                `protobuf:"varint,1,opt,name=ver" json:"ver,omitempty"`
	Apr           *uint32                `protobuf:"varint,2,opt,name=apr" json:"apr,omitempty"`
	Ark           *uint32                `protobuf:"varint,3,opt,name=ark" json:"ark,omitempty"`
	Grps          []uint32               `protobuf:"varint,4,rep,name=grps" json:"grps,omitempty"`
	Launcher      *uint32                `protobuf:"varint,5,opt,name=launcher" json:"launcher,omitempty"`
	GameType      *uint32                `protobuf:"varint,6,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Party_Search) Reset() {
	*x = CMsgGCCStrike15V2_Party_Search{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Party_Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_Search) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_Search) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_Search.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_Search) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{117}
}

func (x *CMsgGCCStrike15V2_Party_Search) GetVer() uint32 {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Search) GetApr() uint32 {
	if x != nil && x.Apr != nil {
		return *x.Apr
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Search) GetArk() uint32 {
	if x != nil && x.Ark != nil {
		return *x.Ark
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Search) GetGrps() []uint32 {
	if x != nil {
		return x.Grps
	}
	return nil
}

func (x *CMsgGCCStrike15V2_Party_Search) GetLauncher() uint32 {
	if x != nil && x.Launcher != nil {
		return *x.Launcher
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Search) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

type CMsgGCCStrike15V2_Party_SearchResults struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Entries       []*CMsgGCCStrike15V2_Party_SearchResults_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Party_SearchResults) Reset() {
	*x = CMsgGCCStrike15V2_Party_SearchResults{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Party_SearchResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_SearchResults) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_SearchResults) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_SearchResults.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_SearchResults) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{118}
}

func (x *CMsgGCCStrike15V2_Party_SearchResults) GetEntries() []*CMsgGCCStrike15V2_Party_SearchResults_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_Party_Invite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Lobbyid       *uint32                `protobuf:"varint,2,opt,name=lobbyid" json:"lobbyid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Party_Invite) Reset() {
	*x = CMsgGCCStrike15V2_Party_Invite{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Party_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_Invite) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_Invite.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_Invite) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{119}
}

func (x *CMsgGCCStrike15V2_Party_Invite) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Invite) GetLobbyid() uint32 {
	if x != nil && x.Lobbyid != nil {
		return *x.Lobbyid
	}
	return 0
}

type CMsgGCCStrike15V2_Account_RequestCoPlays struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Players       []*CMsgGCCStrike15V2_Account_RequestCoPlays_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Servertime    *uint32                                            `protobuf:"varint,2,opt,name=servertime" json:"servertime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) Reset() {
	*x = CMsgGCCStrike15V2_Account_RequestCoPlays{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Account_RequestCoPlays) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Account_RequestCoPlays.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Account_RequestCoPlays) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{120}
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) GetPlayers() []*CMsgGCCStrike15V2_Account_RequestCoPlays_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) GetServertime() uint32 {
	if x != nil && x.Servertime != nil {
		return *x.Servertime
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCRequestTicket struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AuthorizedSteamId    *uint64                `protobuf:"fixed64,1,opt,name=authorized_steam_id,json=authorizedSteamId" json:"authorized_steam_id,omitempty"`
	AuthorizedPublicIp   *uint32                `protobuf:"fixed32,2,opt,name=authorized_public_ip,json=authorizedPublicIp" json:"authorized_public_ip,omitempty"`
	GameserverSteamId    *uint64                `protobuf:"fixed64,3,opt,name=gameserver_steam_id,json=gameserverSteamId" json:"gameserver_steam_id,omitempty"`
	GameserverSdrRouting *string                `protobuf:"bytes,5,opt,name=gameserver_sdr_routing,json=gameserverSdrRouting" json:"gameserver_sdr_routing,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) Reset() {
	*x = CMsgGCCStrike15V2_ClientToGCRequestTicket{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientToGCRequestTicket) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientToGCRequestTicket.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientToGCRequestTicket) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{121}
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetAuthorizedSteamId() uint64 {
	if x != nil && x.AuthorizedSteamId != nil {
		return *x.AuthorizedSteamId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetAuthorizedPublicIp() uint32 {
	if x != nil && x.AuthorizedPublicIp != nil {
		return *x.AuthorizedPublicIp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetGameserverSteamId() uint64 {
	if x != nil && x.GameserverSteamId != nil {
		return *x.GameserverSteamId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetGameserverSdrRouting() string {
	if x != nil && x.GameserverSdrRouting != nil {
		return *x.GameserverSdrRouting
	}
	return ""
}

type CMsgGCToClientSteamDatagramTicket struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SerializedTicket []byte                 `protobuf:"bytes,16,opt,name=serialized_ticket,json=serializedTicket" json:"serialized_ticket,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGCToClientSteamDatagramTicket) Reset() {
	*x = CMsgGCToClientSteamDatagramTicket{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientSteamDatagramTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientSteamDatagramTicket) ProtoMessage() {}

func (x *CMsgGCToClientSteamDatagramTicket) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientSteamDatagramTicket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientSteamDatagramTicket) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{122}
}

func (x *CMsgGCToClientSteamDatagramTicket) GetSerializedTicket() []byte {
	if x != nil {
		return x.SerializedTicket
	}
	return nil
}

type CMsgGCCStrike15V2_ClientRequestOffers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientRequestOffers) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestOffers{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientRequestOffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestOffers) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestOffers) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestOffers.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestOffers) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{123}
}

type CMsgGCCStrike15V2_ClientRequestSouvenir struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Itemid        *uint64                `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Matchid       *uint64                `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	Eventid       *int32                 `protobuf:"varint,3,opt,name=eventid" json:"eventid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestSouvenir{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestSouvenir) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestSouvenir.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestSouvenir) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{124}
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) GetEventid() int32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientAccountBalance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        *uint64                `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Url           *string                `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) Reset() {
	*x = CMsgGCCStrike15V2_ClientAccountBalance{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientAccountBalance) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientAccountBalance.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientAccountBalance) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{125}
}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type CMsgGCCStrike15V2_ClientPartyJoinRelay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Lobbyid       *uint64                `protobuf:"varint,2,opt,name=lobbyid" json:"lobbyid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) Reset() {
	*x = CMsgGCCStrike15V2_ClientPartyJoinRelay{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPartyJoinRelay) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPartyJoinRelay.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPartyJoinRelay) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{126}
}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) GetLobbyid() uint64 {
	if x != nil && x.Lobbyid != nil {
		return *x.Lobbyid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientPartyWarning struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Entries       []*CMsgGCCStrike15V2_ClientPartyWarning_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning) Reset() {
	*x = CMsgGCCStrike15V2_ClientPartyWarning{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPartyWarning) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPartyWarning) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPartyWarning.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPartyWarning) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{127}
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning) GetEntries() []*CMsgGCCStrike15V2_ClientPartyWarning_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_SetEventFavorite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eventid       *uint64                `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	IsFavorite    *bool                  `protobuf:"varint,2,opt,name=is_favorite,json=isFavorite" json:"is_favorite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_SetEventFavorite) Reset() {
	*x = CMsgGCCStrike15V2_SetEventFavorite{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_SetEventFavorite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_SetEventFavorite) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_SetEventFavorite) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_SetEventFavorite.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_SetEventFavorite) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{128}
}

func (x *CMsgGCCStrike15V2_SetEventFavorite) GetEventid() uint64 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_SetEventFavorite) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

type CMsgGCCStrike15V2_GetEventFavorites_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AllEvents     *bool                  `protobuf:"varint,1,opt,name=all_events,json=allEvents" json:"all_events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Request) Reset() {
	*x = CMsgGCCStrike15V2_GetEventFavorites_Request{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GetEventFavorites_Request) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GetEventFavorites_Request.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GetEventFavorites_Request) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{129}
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Request) GetAllEvents() bool {
	if x != nil && x.AllEvents != nil {
		return *x.AllEvents
	}
	return false
}

type CMsgGCCStrike15V2_GetEventFavorites_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AllEvents     *bool                  `protobuf:"varint,1,opt,name=all_events,json=allEvents" json:"all_events,omitempty"`
	JsonFavorites *string                `protobuf:"bytes,2,opt,name=json_favorites,json=jsonFavorites" json:"json_favorites,omitempty"`
	JsonFeatured  *string                `protobuf:"bytes,3,opt,name=json_featured,json=jsonFeatured" json:"json_featured,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) Reset() {
	*x = CMsgGCCStrike15V2_GetEventFavorites_Response{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GetEventFavorites_Response) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GetEventFavorites_Response.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GetEventFavorites_Response) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{130}
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) GetAllEvents() bool {
	if x != nil && x.AllEvents != nil {
		return *x.AllEvents
	}
	return false
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) GetJsonFavorites() string {
	if x != nil && x.JsonFavorites != nil {
		return *x.JsonFavorites
	}
	return ""
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) GetJsonFeatured() string {
	if x != nil && x.JsonFeatured != nil {
		return *x.JsonFeatured
	}
	return ""
}

type CMsgGCCStrike15V2_ClientPerfReport struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Entries       []*CMsgGCCStrike15V2_ClientPerfReport_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientPerfReport) Reset() {
	*x = CMsgGCCStrike15V2_ClientPerfReport{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientPerfReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPerfReport) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPerfReport) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPerfReport.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPerfReport) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{131}
}

func (x *CMsgGCCStrike15V2_ClientPerfReport) GetEntries() []*CMsgGCCStrike15V2_ClientPerfReport_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_ClientReportValidation struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	FileReport          *string                `protobuf:"bytes,1,opt,name=file_report,json=fileReport" json:"file_report,omitempty"`
	CommandLine         *string                `protobuf:"bytes,2,opt,name=command_line,json=commandLine" json:"command_line,omitempty"`
	TotalFiles          *uint32                `protobuf:"varint,3,opt,name=total_files,json=totalFiles" json:"total_files,omitempty"`
	InternalError       *uint32                `protobuf:"varint,4,opt,name=internal_error,json=internalError" json:"internal_error,omitempty"`
	TrustTime           *uint32                `protobuf:"varint,5,opt,name=trust_time,json=trustTime" json:"trust_time,omitempty"`
	CountPending        *uint32                `protobuf:"varint,6,opt,name=count_pending,json=countPending" json:"count_pending,omitempty"`
	CountCompleted      *uint32                `protobuf:"varint,7,opt,name=count_completed,json=countCompleted" json:"count_completed,omitempty"`
	ProcessId           *uint32                `protobuf:"varint,8,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Osversion           *int32                 `protobuf:"varint,9,opt,name=osversion" json:"osversion,omitempty"`
	Clientreportversion *uint32                `protobuf:"varint,10,opt,name=clientreportversion" json:"clientreportversion,omitempty"`
	StatusId            *uint32                `protobuf:"varint,11,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	Diagnostic1         *uint32                `protobuf:"varint,12,opt,name=diagnostic1" json:"diagnostic1,omitempty"`
	Diagnostic2         *uint64                `protobuf:"varint,13,opt,name=diagnostic2" json:"diagnostic2,omitempty"`
	Diagnostic3         *uint64                `protobuf:"varint,14,opt,name=diagnostic3" json:"diagnostic3,omitempty"`
	LastLaunchData      *string                `protobuf:"bytes,15,opt,name=last_launch_data,json=lastLaunchData" json:"last_launch_data,omitempty"`
	ReportCount         *uint32                `protobuf:"varint,16,opt,name=report_count,json=reportCount" json:"report_count,omitempty"`
	ClientTime          *uint64                `protobuf:"varint,17,opt,name=client_time,json=clientTime" json:"client_time,omitempty"`
	Diagnostic4         *uint64                `protobuf:"varint,18,opt,name=diagnostic4" json:"diagnostic4,omitempty"`
	Diagnostic5         *uint64                `protobuf:"varint,19,opt,name=diagnostic5" json:"diagnostic5,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) Reset() {
	*x = CMsgGCCStrike15V2_ClientReportValidation{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientReportValidation) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientReportValidation) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientReportValidation.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientReportValidation) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{132}
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetFileReport() string {
	if x != nil && x.FileReport != nil {
		return *x.FileReport
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetCommandLine() string {
	if x != nil && x.CommandLine != nil {
		return *x.CommandLine
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetTotalFiles() uint32 {
	if x != nil && x.TotalFiles != nil {
		return *x.TotalFiles
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetInternalError() uint32 {
	if x != nil && x.InternalError != nil {
		return *x.InternalError
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetTrustTime() uint32 {
	if x != nil && x.TrustTime != nil {
		return *x.TrustTime
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetCountPending() uint32 {
	if x != nil && x.CountPending != nil {
		return *x.CountPending
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetCountCompleted() uint32 {
	if x != nil && x.CountCompleted != nil {
		return *x.CountCompleted
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetProcessId() uint32 {
	if x != nil && x.ProcessId != nil {
		return *x.ProcessId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetOsversion() int32 {
	if x != nil && x.Osversion != nil {
		return *x.Osversion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetClientreportversion() uint32 {
	if x != nil && x.Clientreportversion != nil {
		return *x.Clientreportversion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetStatusId() uint32 {
	if x != nil && x.StatusId != nil {
		return *x.StatusId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic1() uint32 {
	if x != nil && x.Diagnostic1 != nil {
		return *x.Diagnostic1
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic2() uint64 {
	if x != nil && x.Diagnostic2 != nil {
		return *x.Diagnostic2
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic3() uint64 {
	if x != nil && x.Diagnostic3 != nil {
		return *x.Diagnostic3
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetLastLaunchData() string {
	if x != nil && x.LastLaunchData != nil {
		return *x.LastLaunchData
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetReportCount() uint32 {
	if x != nil && x.ReportCount != nil {
		return *x.ReportCount
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetClientTime() uint64 {
	if x != nil && x.ClientTime != nil {
		return *x.ClientTime
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic4() uint64 {
	if x != nil && x.Diagnostic4 != nil {
		return *x.Diagnostic4
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic5() uint64 {
	if x != nil && x.Diagnostic5 != nil {
		return *x.Diagnostic5
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientRefuseSecureMode struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	FileReport            *string                `protobuf:"bytes,1,opt,name=file_report,json=fileReport" json:"file_report,omitempty"`
	OfferInsecureMode     *bool                  `protobuf:"varint,2,opt,name=offer_insecure_mode,json=offerInsecureMode" json:"offer_insecure_mode,omitempty"`
	OfferSecureMode       *bool                  `protobuf:"varint,3,opt,name=offer_secure_mode,json=offerSecureMode" json:"offer_secure_mode,omitempty"`
	ShowUnsignedUi        *bool                  `protobuf:"varint,4,opt,name=show_unsigned_ui,json=showUnsignedUi" json:"show_unsigned_ui,omitempty"`
	KickUser              *bool                  `protobuf:"varint,5,opt,name=kick_user,json=kickUser" json:"kick_user,omitempty"`
	ShowTrustedUi         *bool                  `protobuf:"varint,6,opt,name=show_trusted_ui,json=showTrustedUi" json:"show_trusted_ui,omitempty"`
	ShowWarningNotTrusted *bool                  `protobuf:"varint,7,opt,name=show_warning_not_trusted,json=showWarningNotTrusted" json:"show_warning_not_trusted,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientRefuseSecureMode{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientRefuseSecureMode.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{133}
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetFileReport() string {
	if x != nil && x.FileReport != nil {
		return *x.FileReport
	}
	return ""
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetOfferInsecureMode() bool {
	if x != nil && x.OfferInsecureMode != nil {
		return *x.OfferInsecureMode
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetOfferSecureMode() bool {
	if x != nil && x.OfferSecureMode != nil {
		return *x.OfferSecureMode
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetShowUnsignedUi() bool {
	if x != nil && x.ShowUnsignedUi != nil {
		return *x.ShowUnsignedUi
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetKickUser() bool {
	if x != nil && x.KickUser != nil {
		return *x.KickUser
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetShowTrustedUi() bool {
	if x != nil && x.ShowTrustedUi != nil {
		return *x.ShowTrustedUi
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetShowWarningNotTrusted() bool {
	if x != nil && x.ShowWarningNotTrusted != nil {
		return *x.ShowWarningNotTrusted
	}
	return false
}

type CMsgGCCStrike15V2_GC2ClientRequestValidation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FullReport    *bool                  `protobuf:"varint,1,opt,name=full_report,json=fullReport" json:"full_report,omitempty"`
	Module        *string                `protobuf:"bytes,2,opt,name=module" json:"module,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientRequestValidation{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientRequestValidation) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientRequestValidation.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientRequestValidation) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{134}
}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) GetFullReport() bool {
	if x != nil && x.FullReport != nil {
		return *x.FullReport
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) GetModule() string {
	if x != nil && x.Module != nil {
		return *x.Module
	}
	return ""
}

type ScoreLeaderboardData_Entry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           *uint32                `protobuf:"varint,1,opt,name=tag" json:"tag,omitempty"`
	Val           *uint32                `protobuf:"varint,2,opt,name=val" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScoreLeaderboardData_Entry) Reset() {
	*x = ScoreLeaderboardData_Entry{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreLeaderboardData_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreLeaderboardData_Entry) ProtoMessage() {}

func (x *ScoreLeaderboardData_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreLeaderboardData_Entry.ProtoReflect.Descriptor instead.
func (*ScoreLeaderboardData_Entry) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ScoreLeaderboardData_Entry) GetTag() uint32 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

func (x *ScoreLeaderboardData_Entry) GetVal() uint32 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

type ScoreLeaderboardData_AccountEntries struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Accountid     *uint32                       `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Entries       []*ScoreLeaderboardData_Entry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScoreLeaderboardData_AccountEntries) Reset() {
	*x = ScoreLeaderboardData_AccountEntries{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreLeaderboardData_AccountEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreLeaderboardData_AccountEntries) ProtoMessage() {}

func (x *ScoreLeaderboardData_AccountEntries) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreLeaderboardData_AccountEntries.ProtoReflect.Descriptor instead.
func (*ScoreLeaderboardData_AccountEntries) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{20, 1}
}

func (x *ScoreLeaderboardData_AccountEntries) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *ScoreLeaderboardData_AccountEntries) GetEntries() []*ScoreLeaderboardData_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type PlayerQuestData_QuestItemData struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	QuestId                 *uint64                `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	QuestNormalPointsEarned *int32                 `protobuf:"varint,2,opt,name=quest_normal_points_earned,json=questNormalPointsEarned" json:"quest_normal_points_earned,omitempty"`
	QuestBonusPointsEarned  *int32                 `protobuf:"varint,3,opt,name=quest_bonus_points_earned,json=questBonusPointsEarned" json:"quest_bonus_points_earned,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PlayerQuestData_QuestItemData) Reset() {
	*x = PlayerQuestData_QuestItemData{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerQuestData_QuestItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuestData_QuestItemData) ProtoMessage() {}

func (x *PlayerQuestData_QuestItemData) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuestData_QuestItemData.ProtoReflect.Descriptor instead.
func (*PlayerQuestData_QuestItemData) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{21, 0}
}

func (x *PlayerQuestData_QuestItemData) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *PlayerQuestData_QuestItemData) GetQuestNormalPointsEarned() int32 {
	if x != nil && x.QuestNormalPointsEarned != nil {
		return *x.QuestNormalPointsEarned
	}
	return 0
}

func (x *PlayerQuestData_QuestItemData) GetQuestBonusPointsEarned() int32 {
	if x != nil && x.QuestBonusPointsEarned != nil {
		return *x.QuestBonusPointsEarned
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *int32                 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	RegionId      *int32                 `protobuf:"varint,2,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	RegionR       *float32               `protobuf:"fixed32,3,opt,name=region_r,json=regionR" json:"region_r,omitempty"`
	Distance      *float32               `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetRegionId() int32 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetRegionR() float32 {
	if x != nil && x.RegionR != nil {
		return *x.RegionR
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

type CDataGCCStrike15V2_TournamentMatchDraft_Entry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mapid         *int32                 `protobuf:"varint,1,opt,name=mapid" json:"mapid,omitempty"`
	TeamIdCt      *int32                 `protobuf:"varint,2,opt,name=team_id_ct,json=teamIdCt" json:"team_id_ct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Reset() {
	*x = CDataGCCStrike15V2_TournamentMatchDraft_Entry{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentMatchDraft_Entry) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentMatchDraft_Entry.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentMatchDraft_Entry) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{30, 0}
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) GetMapid() int32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) GetTeamIdCt() int32 {
	if x != nil && x.TeamIdCt != nil {
		return *x.TeamIdCt
	}
	return 0
}

type CPreMatchInfoData_TeamStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MatchInfoIdxtxt *int32                 `protobuf:"varint,1,opt,name=match_info_idxtxt,json=matchInfoIdxtxt" json:"match_info_idxtxt,omitempty"`
	MatchInfoTxt    *string                `protobuf:"bytes,2,opt,name=match_info_txt,json=matchInfoTxt" json:"match_info_txt,omitempty"`
	MatchInfoTeams  []string               `protobuf:"bytes,3,rep,name=match_info_teams,json=matchInfoTeams" json:"match_info_teams,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPreMatchInfoData_TeamStats) Reset() {
	*x = CPreMatchInfoData_TeamStats{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPreMatchInfoData_TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPreMatchInfoData_TeamStats) ProtoMessage() {}

func (x *CPreMatchInfoData_TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPreMatchInfoData_TeamStats.ProtoReflect.Descriptor instead.
func (*CPreMatchInfoData_TeamStats) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CPreMatchInfoData_TeamStats) GetMatchInfoIdxtxt() int32 {
	if x != nil && x.MatchInfoIdxtxt != nil {
		return *x.MatchInfoIdxtxt
	}
	return 0
}

func (x *CPreMatchInfoData_TeamStats) GetMatchInfoTxt() string {
	if x != nil && x.MatchInfoTxt != nil {
		return *x.MatchInfoTxt
	}
	return ""
}

func (x *CPreMatchInfoData_TeamStats) GetMatchInfoTeams() []string {
	if x != nil {
		return x.MatchInfoTeams
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountMvp    *uint32                `protobuf:"varint,1,opt,name=account_mvp,json=accountMvp" json:"account_mvp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{35, 0}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) GetAccountMvp() uint32 {
	if x != nil && x.AccountMvp != nil {
		return *x.AccountMvp
	}
	return 0
}

type CMsgGCCStrike15V2_AccountPrivacySettings_Setting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SettingType   *uint32                `protobuf:"varint,1,opt,name=setting_type,json=settingType" json:"setting_type,omitempty"`
	SettingValue  *uint32                `protobuf:"varint,2,opt,name=setting_value,json=settingValue" json:"setting_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Reset() {
	*x = CMsgGCCStrike15V2_AccountPrivacySettings_Setting{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_AccountPrivacySettings_Setting) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_AccountPrivacySettings_Setting.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{40, 0}
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) GetSettingType() uint32 {
	if x != nil && x.SettingType != nil {
		return *x.SettingType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) GetSettingValue() uint32 {
	if x != nil && x.SettingValue != nil {
		return *x.SettingValue
	}
	return 0
}

type CEconItemPreviewDataBlock_Sticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slot          *uint32                `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
	StickerId     *uint32                `protobuf:"varint,2,opt,name=sticker_id,json=stickerId" json:"sticker_id,omitempty"`
	Wear          *float32               `protobuf:"fixed32,3,opt,name=wear" json:"wear,omitempty"`
	Scale         *float32               `protobuf:"fixed32,4,opt,name=scale" json:"scale,omitempty"`
	Rotation      *float32               `protobuf:"fixed32,5,opt,name=rotation" json:"rotation,omitempty"`
	TintId        *uint32                `protobuf:"varint,6,opt,name=tint_id,json=tintId" json:"tint_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CEconItemPreviewDataBlock_Sticker) Reset() {
	*x = CEconItemPreviewDataBlock_Sticker{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CEconItemPreviewDataBlock_Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconItemPreviewDataBlock_Sticker) ProtoMessage() {}

func (x *CEconItemPreviewDataBlock_Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconItemPreviewDataBlock_Sticker.ProtoReflect.Descriptor instead.
func (*CEconItemPreviewDataBlock_Sticker) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{67, 0}
}

func (x *CEconItemPreviewDataBlock_Sticker) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetStickerId() uint32 {
	if x != nil && x.StickerId != nil {
		return *x.StickerId
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetWear() float32 {
	if x != nil && x.Wear != nil {
		return *x.Wear
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetRotation() float32 {
	if x != nil && x.Rotation != nil {
		return *x.Rotation
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetTintId() uint32 {
	if x != nil && x.TintId != nil {
		return *x.TintId
	}
	return 0
}

type CDataGCCStrike15V2_TournamentGroup_Picks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pickids       []int32                `protobuf:"varint,1,rep,name=pickids" json:"pickids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDataGCCStrike15V2_TournamentGroup_Picks) Reset() {
	*x = CDataGCCStrike15V2_TournamentGroup_Picks{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDataGCCStrike15V2_TournamentGroup_Picks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentGroup_Picks) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentGroup_Picks) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentGroup_Picks.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentGroup_Picks) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{80, 0}
}

func (x *CDataGCCStrike15V2_TournamentGroup_Picks) GetPickids() []int32 {
	if x != nil {
		return x.Pickids
	}
	return nil
}

type CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sectionid     *int32                 `protobuf:"varint,1,opt,name=sectionid" json:"sectionid,omitempty"`
	Groupid       *int32                 `protobuf:"varint,2,opt,name=groupid" json:"groupid,omitempty"`
	Index         *int32                 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Teamid        *int32                 `protobuf:"varint,4,opt,name=teamid" json:"teamid,omitempty"`
	Itemid        *uint64                `protobuf:"varint,5,opt,name=itemid" json:"itemid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Reset() {
	*x = CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{84, 0}
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetSectionid() int32 {
	if x != nil && x.Sectionid != nil {
		return *x.Sectionid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetGroupid() int32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetTeamid() int32 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_Fantasy_FantasySlot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *int32                 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Pick          *int32                 `protobuf:"varint,2,opt,name=pick" json:"pick,omitempty"`
	Itemid        *uint64                `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) Reset() {
	*x = CMsgGCCStrike15V2_Fantasy_FantasySlot{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Fantasy_FantasySlot) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Fantasy_FantasySlot.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Fantasy_FantasySlot) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{85, 0}
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetPick() int32 {
	if x != nil && x.Pick != nil {
		return *x.Pick
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_Fantasy_FantasyTeam struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Sectionid     *int32                                   `protobuf:"varint,1,opt,name=sectionid" json:"sectionid,omitempty"`
	Slots         []*CMsgGCCStrike15V2_Fantasy_FantasySlot `protobuf:"bytes,2,rep,name=slots" json:"slots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Reset() {
	*x = CMsgGCCStrike15V2_Fantasy_FantasyTeam{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Fantasy_FantasyTeam) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Fantasy_FantasyTeam.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Fantasy_FantasyTeam) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{85, 1}
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) GetSectionid() int32 {
	if x != nil && x.Sectionid != nil {
		return *x.Sectionid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) GetSlots() []*CMsgGCCStrike15V2_Fantasy_FantasySlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Gifts         *uint32                `protobuf:"varint,2,opt,name=gifts" json:"gifts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Reset() {
	*x = CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{92, 0}
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) GetGifts() uint32 {
	if x != nil && x.Gifts != nil {
		return *x.Gifts
	}
	return 0
}

type CMsgGCCStrike15V2_Party_SearchResults_Entry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Grp           *uint32                `protobuf:"varint,2,opt,name=grp" json:"grp,omitempty"`
	GameType      *uint32                `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Apr           *uint32                `protobuf:"varint,4,opt,name=apr" json:"apr,omitempty"`
	Ark           *uint32                `protobuf:"varint,5,opt,name=ark" json:"ark,omitempty"`
	Loc           *uint32                `protobuf:"varint,6,opt,name=loc" json:"loc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) Reset() {
	*x = CMsgGCCStrike15V2_Party_SearchResults_Entry{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_SearchResults_Entry) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_SearchResults_Entry.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_SearchResults_Entry) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{118, 0}
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetGrp() uint32 {
	if x != nil && x.Grp != nil {
		return *x.Grp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetApr() uint32 {
	if x != nil && x.Apr != nil {
		return *x.Apr
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetArk() uint32 {
	if x != nil && x.Ark != nil {
		return *x.Ark
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetLoc() uint32 {
	if x != nil && x.Loc != nil {
		return *x.Loc
	}
	return 0
}

type CMsgGCCStrike15V2_Account_RequestCoPlays_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Rtcoplay      *uint32                `protobuf:"varint,2,opt,name=rtcoplay" json:"rtcoplay,omitempty"`
	Online        *bool                  `protobuf:"varint,3,opt,name=online" json:"online,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) Reset() {
	*x = CMsgGCCStrike15V2_Account_RequestCoPlays_Player{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Account_RequestCoPlays_Player) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Account_RequestCoPlays_Player.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Account_RequestCoPlays_Player) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{120, 0}
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) GetRtcoplay() uint32 {
	if x != nil && x.Rtcoplay != nil {
		return *x.Rtcoplay
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

type CMsgGCCStrike15V2_ClientPartyWarning_Entry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Warntype      *uint32                `protobuf:"varint,2,opt,name=warntype" json:"warntype,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) Reset() {
	*x = CMsgGCCStrike15V2_ClientPartyWarning_Entry{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPartyWarning_Entry) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPartyWarning_Entry.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPartyWarning_Entry) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{127, 0}
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) GetWarntype() uint32 {
	if x != nil && x.Warntype != nil {
		return *x.Warntype
	}
	return 0
}

type CMsgGCCStrike15V2_ClientPerfReport_Entry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Perfcounter   *uint32                `protobuf:"varint,1,opt,name=perfcounter" json:"perfcounter,omitempty"`
	Length        *uint32                `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	Reference     []byte                 `protobuf:"bytes,3,opt,name=reference" json:"reference,omitempty"`
	Actual        []byte                 `protobuf:"bytes,4,opt,name=actual" json:"actual,omitempty"`
	Sourceid      *uint32                `protobuf:"varint,5,opt,name=sourceid" json:"sourceid,omitempty"`
	Status        *uint32                `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) Reset() {
	*x = CMsgGCCStrike15V2_ClientPerfReport_Entry{}
	mi := &file_cstrike15_gcmessages_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPerfReport_Entry) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_cstrike15_gcmessages_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPerfReport_Entry.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPerfReport_Entry) Descriptor() ([]byte, []int) {
	return file_cstrike15_gcmessages_proto_rawDescGZIP(), []int{131, 0}
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetPerfcounter() uint32 {
	if x != nil && x.Perfcounter != nil {
		return *x.Perfcounter
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetReference() []byte {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetActual() []byte {
	if x != nil {
		return x.Actual
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetSourceid() uint32 {
	if x != nil && x.Sourceid != nil {
		return *x.Sourceid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

var File_cstrike15_gcmessages_proto protoreflect.FileDescriptor

const file_cstrike15_gcmessages_proto_rawDesc = "" +
	"\n" +
	"\x1acstrike15_gcmessages.proto\x1a\x13steammessages.proto\x1a\x17engine_gcmessages.proto\"R\n" +
	"\x0eGameServerPing\x12\x12\n" +
	"\x04ping\x18\x02 \x01(\x05R\x04ping\x12\x0e\n" +
	"\x02ip\x18\x03 \x01(\rR\x02ip\x12\x1c\n" +
	"\tinstances\x18\x05 \x01(\rR\tinstances\"J\n" +
	"\x0eDataCenterPing\x12$\n" +
	"\x0edata_center_id\x18\x01 \x01(\aR\fdataCenterId\x12\x12\n" +
	"\x04ping\x18\x02 \x01(\x11R\x04ping\"\x8b\x01\n" +
	"\x17DetailedSearchStatistic\x12\x1b\n" +
	"\tgame_type\x18\x01 \x01(\rR\bgameType\x12&\n" +
	"\x0fsearch_time_avg\x18\x02 \x01(\rR\rsearchTimeAvg\x12+\n" +
	"\x11players_searching\x18\x04 \x01(\rR\x10playersSearching\"\xfd\x01\n" +
	"\x10TournamentPlayer\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x1f\n" +
	"\vplayer_nick\x18\x02 \x01(\tR\n" +
	"playerNick\x12\x1f\n" +
	"\vplayer_name\x18\x03 \x01(\tR\n" +
	"playerName\x12\x1d\n" +
	"\n" +
	"player_dob\x18\x04 \x01(\rR\tplayerDob\x12\x1f\n" +
	"\vplayer_flag\x18\x05 \x01(\tR\n" +
	"playerFlag\x12'\n" +
	"\x0fplayer_location\x18\x06 \x01(\tR\x0eplayerLocation\x12\x1f\n" +
	"\vplayer_desc\x18\a \x01(\tR\n" +
	"playerDesc\"\xab\x01\n" +
	"\x0eTournamentTeam\x12\x17\n" +
	"\ateam_id\x18\x01 \x01(\x05R\x06teamId\x12\x19\n" +
	"\bteam_tag\x18\x02 \x01(\tR\ateamTag\x12\x1b\n" +
	"\tteam_flag\x18\x03 \x01(\tR\bteamFlag\x12\x1b\n" +
	"\tteam_name\x18\x04 \x01(\tR\bteamName\x12+\n" +
	"\aplayers\x18\x05 \x03(\v2\x11.TournamentPlayerR\aplayers\"\xd7\x02\n" +
	"\x0fTournamentEvent\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\x05R\aeventId\x12\x1b\n" +
	"\tevent_tag\x18\x02 \x01(\tR\beventTag\x12\x1d\n" +
	"\n" +
	"event_name\x18\x03 \x01(\tR\teventName\x12(\n" +
	"\x10event_time_start\x18\x04 \x01(\rR\x0eeventTimeStart\x12$\n" +
	"\x0eevent_time_end\x18\x05 \x01(\rR\feventTimeEnd\x12!\n" +
	"\fevent_public\x18\x06 \x01(\x05R\veventPublic\x12$\n" +
	"\x0eevent_stage_id\x18\a \x01(\x05R\feventStageId\x12(\n" +
	"\x10event_stage_name\x18\b \x01(\tR\x0eeventStageName\x12*\n" +
	"\x11active_section_id\x18\t \x01(\rR\x0factiveSectionId\"\xc8\x05\n" +
	"\x10GlobalStatistics\x12%\n" +
	"\x0eplayers_online\x18\x01 \x01(\rR\rplayersOnline\x12%\n" +
	"\x0eservers_online\x18\x02 \x01(\rR\rserversOnline\x12+\n" +
	"\x11players_searching\x18\x03 \x01(\rR\x10playersSearching\x12+\n" +
	"\x11servers_available\x18\x04 \x01(\rR\x10serversAvailable\x12'\n" +
	"\x0fongoing_matches\x18\x05 \x01(\rR\x0eongoingMatches\x12&\n" +
	"\x0fsearch_time_avg\x18\x06 \x01(\rR\rsearchTimeAvg\x12E\n" +
	"\x11search_statistics\x18\a \x03(\v2\x18.DetailedSearchStatisticR\x10searchStatistics\x12\"\n" +
	"\rmain_post_url\x18\b \x01(\tR\vmainPostUrl\x124\n" +
	"\x16required_appid_version\x18\t \x01(\rR\x14requiredAppidVersion\x12-\n" +
	"\x12pricesheet_version\x18\n" +
	" \x01(\rR\x11pricesheetVersion\x124\n" +
	"\x16twitch_streams_version\x18\v \x01(\rR\x14twitchStreamsVersion\x12:\n" +
	"\x19active_tournament_eventid\x18\f \x01(\rR\x17activeTournamentEventid\x12(\n" +
	"\x10active_survey_id\x18\r \x01(\rR\x0eactiveSurveyId\x12\x1f\n" +
	"\vrtime32_cur\x18\x0e \x01(\rR\n" +
	"rtime32Cur\x12.\n" +
	"\x13rtime32_event_start\x18\x0f \x01(\rR\x11rtime32EventStart\"K\n" +
	"\x1fOperationalStatisticDescription\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05idkey\x18\x02 \x01(\rR\x05idkey\"K\n" +
	"\x1bOperationalStatisticElement\x12\x14\n" +
	"\x05idkey\x18\x01 \x01(\rR\x05idkey\x12\x16\n" +
	"\x06values\x18\x02 \x03(\x05R\x06values\"\x91\x01\n" +
	"\x1bOperationalStatisticsPacket\x12\x1a\n" +
	"\bpacketid\x18\x01 \x01(\x05R\bpacketid\x12 \n" +
	"\vmstimestamp\x18\x02 \x01(\x05R\vmstimestamp\x124\n" +
	"\x06values\x18\x03 \x03(\v2\x1c.OperationalStatisticElementR\x06values\"\xa2\x01\n" +
	"\x11PlayerRankingInfo\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x17\n" +
	"\arank_id\x18\x02 \x01(\rR\x06rankId\x12\x12\n" +
	"\x04wins\x18\x03 \x01(\rR\x04wins\x12\x1f\n" +
	"\vrank_change\x18\x04 \x01(\x02R\n" +
	"rankChange\x12 \n" +
	"\frank_type_id\x18\x06 \x01(\rR\n" +
	"rankTypeId\"}\n" +
	"\x16PlayerCommendationInfo\x12!\n" +
	"\fcmd_friendly\x18\x01 \x01(\rR\vcmdFriendly\x12!\n" +
	"\fcmd_teaching\x18\x02 \x01(\rR\vcmdTeaching\x12\x1d\n" +
	"\n" +
	"cmd_leader\x18\x04 \x01(\rR\tcmdLeader\"\x85\x01\n" +
	"\x10PlayerMedalsInfo\x120\n" +
	"\x14display_items_defidx\x18\a \x03(\rR\x12displayItemsDefidx\x12?\n" +
	"\x1cfeatured_display_item_defidx\x18\b \x01(\rR\x19featuredDisplayItemDefidx\"m\n" +
	"\x0fAccountActivity\x12\x1a\n" +
	"\bactivity\x18\x01 \x01(\rR\bactivity\x12\x12\n" +
	"\x04mode\x18\x02 \x01(\rR\x04mode\x12\x10\n" +
	"\x03map\x18\x03 \x01(\rR\x03map\x12\x18\n" +
	"\amatchid\x18\x04 \x01(\x04R\amatchid\"\x91\x01\n" +
	"\x14TournamentMatchSetup\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\x05R\aeventId\x12\x1c\n" +
	"\n" +
	"team_id_ct\x18\x02 \x01(\x05R\bteamIdCt\x12\x1a\n" +
	"\tteam_id_t\x18\x03 \x01(\x05R\ateamIdT\x12$\n" +
	"\x0eevent_stage_id\x18\x04 \x01(\x05R\feventStageId\"\xcf\x05\n" +
	"\x0eServerHltvInfo\x12\x1e\n" +
	"\vtv_udp_port\x18\x01 \x01(\rR\ttvUdpPort\x12 \n" +
	"\ftv_watch_key\x18\x02 \x01(\x04R\n" +
	"tvWatchKey\x12\x19\n" +
	"\btv_slots\x18\x03 \x01(\rR\atvSlots\x12\x1d\n" +
	"\n" +
	"tv_clients\x18\x04 \x01(\rR\ttvClients\x12\x1d\n" +
	"\n" +
	"tv_proxies\x18\x05 \x01(\rR\ttvProxies\x12\x17\n" +
	"\atv_time\x18\x06 \x01(\rR\x06tvTime\x12\x1b\n" +
	"\tgame_type\x18\b \x01(\rR\bgameType\x12#\n" +
	"\rgame_mapgroup\x18\t \x01(\tR\fgameMapgroup\x12\x19\n" +
	"\bgame_map\x18\n" +
	" \x01(\tR\agameMap\x12*\n" +
	"\x11tv_master_steamid\x18\v \x01(\x04R\x0ftvMasterSteamid\x12$\n" +
	"\x0etv_local_slots\x18\f \x01(\rR\ftvLocalSlots\x12(\n" +
	"\x10tv_local_clients\x18\r \x01(\rR\x0etvLocalClients\x12(\n" +
	"\x10tv_local_proxies\x18\x0e \x01(\rR\x0etvLocalProxies\x12$\n" +
	"\x0etv_relay_slots\x18\x0f \x01(\rR\ftvRelaySlots\x12(\n" +
	"\x10tv_relay_clients\x18\x10 \x01(\rR\x0etvRelayClients\x12(\n" +
	"\x10tv_relay_proxies\x18\x11 \x01(\rR\x0etvRelayProxies\x12(\n" +
	"\x10tv_relay_address\x18\x12 \x01(\rR\x0etvRelayAddress\x12\"\n" +
	"\rtv_relay_port\x18\x13 \x01(\rR\vtvRelayPort\x12(\n" +
	"\x10tv_relay_steamid\x18\x14 \x01(\x04R\x0etvRelaySteamid\x12\x14\n" +
	"\x05flags\x18\x15 \x01(\rR\x05flags\"q\n" +
	"\rIpAddressMask\x12\f\n" +
	"\x01a\x18\x01 \x01(\rR\x01a\x12\f\n" +
	"\x01b\x18\x02 \x01(\rR\x01b\x12\f\n" +
	"\x01c\x18\x03 \x01(\rR\x01c\x12\f\n" +
	"\x01d\x18\x04 \x01(\rR\x01d\x12\x12\n" +
	"\x04bits\x18\x05 \x01(\rR\x04bits\x12\x14\n" +
	"\x05token\x18\x06 \x01(\rR\x05token\"\x7f\n" +
	"\x1bCMsgCsgoSteamUserStatChange\x12.\n" +
	"\x12ecsgosteamuserstat\x18\x01 \x01(\x05R\x12ecsgosteamuserstat\x12\x14\n" +
	"\x05delta\x18\x02 \x01(\x05R\x05delta\x12\x1a\n" +
	"\babsolute\x18\x03 \x01(\bR\babsolute\"N\n" +
	"\x0eXpProgressData\x12\x1b\n" +
	"\txp_points\x18\x01 \x01(\rR\bxpPoints\x12\x1f\n" +
	"\vxp_category\x18\x02 \x01(\x05R\n" +
	"xpCategory\"\x8b\x01\n" +
	"\x13MatchEndItemUpdates\x12\x17\n" +
	"\aitem_id\x18\x01 \x01(\x04R\x06itemId\x12(\n" +
	"\x10item_attr_defidx\x18\x02 \x01(\rR\x0eitemAttrDefidx\x121\n" +
	"\x15item_attr_delta_value\x18\x03 \x01(\rR\x12itemAttrDeltaValue\"\xea\x02\n" +
	"\x14ScoreLeaderboardData\x12\x19\n" +
	"\bquest_id\x18\x01 \x01(\x04R\aquestId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\rR\x05score\x12L\n" +
	"\x0eaccountentries\x18\x03 \x03(\v2$.ScoreLeaderboardData.AccountEntriesR\x0eaccountentries\x12?\n" +
	"\fmatchentries\x18\x05 \x03(\v2\x1b.ScoreLeaderboardData.EntryR\fmatchentries\x1a+\n" +
	"\x05Entry\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\rR\x03tag\x12\x10\n" +
	"\x03val\x18\x02 \x01(\rR\x03val\x1ae\n" +
	"\x0eAccountEntries\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x125\n" +
	"\aentries\x18\x02 \x03(\v2\x1b.ScoreLeaderboardData.EntryR\aentries\"\xe7\x04\n" +
	"\x0fPlayerQuestData\x12,\n" +
	"\x12quester_account_id\x18\x01 \x01(\rR\x10questerAccountId\x12F\n" +
	"\x0fquest_item_data\x18\x02 \x03(\v2\x1e.PlayerQuestData.QuestItemDataR\rquestItemData\x129\n" +
	"\x10xp_progress_data\x18\x03 \x03(\v2\x0f.XpProgressDataR\x0expProgressData\x12\x1f\n" +
	"\vtime_played\x18\x04 \x01(\rR\n" +
	"timePlayed\x12 \n" +
	"\fmm_game_mode\x18\x05 \x01(\rR\n" +
	"mmGameMode\x127\n" +
	"\fitem_updates\x18\x06 \x03(\v2\x14.MatchEndItemUpdatesR\vitemUpdates\x12:\n" +
	"\x19operation_points_eligible\x18\a \x01(\bR\x17operationPointsEligible\x12F\n" +
	"\x0fuserstatchanges\x18\b \x03(\v2\x1c.CMsgCsgoSteamUserStatChangeR\x0fuserstatchanges\x1a\xa2\x01\n" +
	"\rQuestItemData\x12\x19\n" +
	"\bquest_id\x18\x01 \x01(\x04R\aquestId\x12;\n" +
	"\x1aquest_normal_points_earned\x18\x02 \x01(\x05R\x17questNormalPointsEarned\x129\n" +
	"\x19quest_bonus_points_earned\x18\x03 \x01(\x05R\x16questBonusPointsEarned\"\xde\x01\n" +
	"\x1cCMsgGC_ServerQuestUpdateData\x12<\n" +
	"\x11player_quest_data\x18\x01 \x03(\v2\x10.PlayerQuestDataR\x0fplayerQuestData\x12\x1f\n" +
	"\vbinary_data\x18\x02 \x01(\fR\n" +
	"binaryData\x12 \n" +
	"\fmm_game_mode\x18\x03 \x01(\rR\n" +
	"mmGameMode\x12=\n" +
	"\x0emissionlbsdata\x18\x04 \x01(\v2\x15.ScoreLeaderboardDataR\x0emissionlbsdata\"\xc4\x01\n" +
	"0CMsgGCCStrike15_v2_MatchmakingGCOperationalStats\x12\x1a\n" +
	"\bpacketid\x18\x01 \x01(\x05R\bpacketid\x12<\n" +
	"\bnamekeys\x18\x02 \x03(\v2 .OperationalStatisticDescriptionR\bnamekeys\x126\n" +
	"\apackets\x18\x03 \x03(\v2\x1c.OperationalStatisticsPacketR\apackets\"x\n" +
	".CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm\x12\x14\n" +
	"\x05token\x18\x01 \x01(\rR\x05token\x12\x14\n" +
	"\x05stamp\x18\x02 \x01(\rR\x05stamp\x12\x1a\n" +
	"\bexchange\x18\x03 \x01(\x04R\bexchange\"\x9b\x01\n" +
	"-CMsgGCCStrike15_v2_GC2ServerReservationUpdate\x124\n" +
	"\x16viewers_external_total\x18\x01 \x01(\rR\x14viewersExternalTotal\x124\n" +
	"\x16viewers_external_steam\x18\x02 \x01(\rR\x14viewersExternalSteam\"\x8c\x02\n" +
	"#CMsgGCCStrike15_v2_MatchmakingStart\x12\x1f\n" +
	"\vaccount_ids\x18\x01 \x03(\rR\n" +
	"accountIds\x12\x1b\n" +
	"\tgame_type\x18\x02 \x01(\rR\bgameType\x12\x1f\n" +
	"\vticket_data\x18\x03 \x01(\tR\n" +
	"ticketData\x12%\n" +
	"\x0eclient_version\x18\x04 \x01(\rR\rclientVersion\x12@\n" +
	"\x10tournament_match\x18\x05 \x01(\v2\x15.TournamentMatchSetupR\x0ftournamentMatch\x12\x1d\n" +
	"\n" +
	"prime_only\x18\x06 \x01(\bR\tprimeOnly\">\n" +
	"\"CMsgGCCStrike15_v2_MatchmakingStop\x12\x18\n" +
	"\aabandon\x18\x01 \x01(\x05R\aabandon\"\xa7\x02\n" +
	"/CMsgGCCStrike15_v2_MatchmakingClient2ServerPing\x129\n" +
	"\x0fgameserverpings\x18\x01 \x03(\v2\x0f.GameServerPingR\x0fgameserverpings\x12!\n" +
	"\foffset_index\x18\x02 \x01(\x05R\voffsetIndex\x12\x1f\n" +
	"\vfinal_batch\x18\x03 \x01(\x05R\n" +
	"finalBatch\x12;\n" +
	"\x11data_center_pings\x18\x04 \x03(\v2\x0f.DataCenterPingR\x0fdataCenterPings\x12\x19\n" +
	"\bmax_ping\x18\x05 \x01(\rR\amaxPing\x12\x1d\n" +
	"\n" +
	"test_token\x18\x06 \x01(\aR\ttestToken\"\xf3\b\n" +
	"-CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate\x12 \n" +
	"\vmatchmaking\x18\x01 \x01(\x05R\vmatchmaking\x12=\n" +
	"\x1bwaiting_account_id_sessions\x18\x02 \x03(\rR\x18waitingAccountIdSessions\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x12G\n" +
	" ongoingmatch_account_id_sessions\x18\x06 \x03(\rR\x1dongoingmatchAccountIdSessions\x124\n" +
	"\fglobal_stats\x18\a \x01(\v2\x11.GlobalStatisticsR\vglobalStats\x12?\n" +
	"\x1cfailping_account_id_sessions\x18\b \x03(\rR\x19failpingAccountIdSessions\x12=\n" +
	"\x1bpenalty_account_id_sessions\x18\t \x03(\rR\x18penaltyAccountIdSessions\x12A\n" +
	"\x1dfailready_account_id_sessions\x18\n" +
	" \x03(\rR\x1afailreadyAccountIdSessions\x12A\n" +
	"\x1dvacbanned_account_id_sessions\x18\v \x03(\rR\x1avacbannedAccountIdSessions\x12B\n" +
	"\x15server_ipaddress_mask\x18\f \x01(\v2\x0e.IpAddressMaskR\x13serverIpaddressMask\x12I\n" +
	"\x05notes\x18\r \x03(\v23.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.NoteR\x05notes\x12H\n" +
	"!penalty_account_id_sessions_green\x18\x0e \x03(\rR\x1dpenaltyAccountIdSessionsGreen\x12=\n" +
	"\x1ainsufficientlevel_sessions\x18\x0f \x03(\rR\x19insufficientlevelSessions\x12?\n" +
	"\x1cvsncheck_account_id_sessions\x18\x10 \x03(\rR\x19vsncheckAccountIdSessions\x12<\n" +
	"\x1alauncher_mismatch_sessions\x18\x11 \x03(\rR\x18launcherMismatchSessions\x12?\n" +
	"\x1cinsecure_account_id_sessions\x18\x12 \x03(\rR\x19insecureAccountIdSessions\x1an\n" +
	"\x04Note\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12\x1b\n" +
	"\tregion_id\x18\x02 \x01(\x05R\bregionId\x12\x19\n" +
	"\bregion_r\x18\x03 \x01(\x02R\aregionR\x12\x1a\n" +
	"\bdistance\x18\x04 \x01(\x02R\bdistance\"\xd7\x03\n" +
	"(CDataGCCStrike15_v2_TournamentMatchDraft\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\x05R\aeventId\x12$\n" +
	"\x0eevent_stage_id\x18\x02 \x01(\x05R\feventStageId\x12\x1a\n" +
	"\tteam_id_0\x18\x03 \x01(\x05R\ateamId0\x12\x1a\n" +
	"\tteam_id_1\x18\x04 \x01(\x05R\ateamId1\x12\x1d\n" +
	"\n" +
	"maps_count\x18\x05 \x01(\x05R\tmapsCount\x12!\n" +
	"\fmaps_current\x18\x06 \x01(\x05R\vmapsCurrent\x12\"\n" +
	"\rteam_id_start\x18\a \x01(\x05R\vteamIdStart\x12\"\n" +
	"\rteam_id_veto1\x18\b \x01(\x05R\vteamIdVeto1\x12\"\n" +
	"\rteam_id_pickn\x18\t \x01(\x05R\vteamIdPickn\x12G\n" +
	"\x06drafts\x18\n" +
	" \x03(\v2/.CDataGCCStrike15_v2_TournamentMatchDraft.EntryR\x06drafts\x1a;\n" +
	"\x05Entry\x12\x14\n" +
	"\x05mapid\x18\x01 \x01(\x05R\x05mapid\x12\x1c\n" +
	"\n" +
	"team_id_ct\x18\x02 \x01(\x05R\bteamIdCt\"\xcf\x02\n" +
	"\x11CPreMatchInfoData\x12'\n" +
	"\x0fpredictions_pct\x18\x01 \x01(\x05R\x0epredictionsPct\x12?\n" +
	"\x05draft\x18\x04 \x01(\v2).CDataGCCStrike15_v2_TournamentMatchDraftR\x05draft\x122\n" +
	"\x05stats\x18\x05 \x03(\v2\x1c.CPreMatchInfoData.TeamStatsR\x05stats\x12\x12\n" +
	"\x04wins\x18\x06 \x03(\x05R\x04wins\x1a\x87\x01\n" +
	"\tTeamStats\x12*\n" +
	"\x11match_info_idxtxt\x18\x01 \x01(\x05R\x0fmatchInfoIdxtxt\x12$\n" +
	"\x0ematch_info_txt\x18\x02 \x01(\tR\fmatchInfoTxt\x12(\n" +
	"\x10match_info_teams\x18\x03 \x03(\tR\x0ematchInfoTeams\"\xb3\x06\n" +
	".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve\x12\x1f\n" +
	"\vaccount_ids\x18\x01 \x03(\rR\n" +
	"accountIds\x12\x1b\n" +
	"\tgame_type\x18\x02 \x01(\rR\bgameType\x12\x19\n" +
	"\bmatch_id\x18\x03 \x01(\x04R\amatchId\x12%\n" +
	"\x0eserver_version\x18\x04 \x01(\rR\rserverVersion\x12\x14\n" +
	"\x05flags\x18\x12 \x01(\rR\x05flags\x12.\n" +
	"\brankings\x18\x05 \x03(\v2\x12.PlayerRankingInfoR\brankings\x12%\n" +
	"\x0eencryption_key\x18\x06 \x01(\x04R\rencryptionKey\x12,\n" +
	"\x12encryption_key_pub\x18\a \x01(\x04R\x10encryptionKeyPub\x12\x1b\n" +
	"\tparty_ids\x18\b \x03(\rR\bpartyIds\x12,\n" +
	"\twhitelist\x18\t \x03(\v2\x0e.IpAddressMaskR\twhitelist\x12*\n" +
	"\x11tv_master_steamid\x18\n" +
	" \x01(\x04R\x0ftvMasterSteamid\x12;\n" +
	"\x10tournament_event\x18\v \x01(\v2\x10.TournamentEventR\x0ftournamentEvent\x12:\n" +
	"\x10tournament_teams\x18\f \x03(\v2\x0f.TournamentTeamR\x0ftournamentTeams\x12C\n" +
	"\x1etournament_casters_account_ids\x18\r \x03(\rR\x1btournamentCastersAccountIds\x12(\n" +
	"\x10tv_relay_steamid\x18\x0e \x01(\x04R\x0etvRelaySteamid\x128\n" +
	"\x0epre_match_data\x18\x0f \x01(\v2\x12.CPreMatchInfoDataR\fpreMatchData\x12.\n" +
	"\x13rtime32_event_start\x18\x10 \x01(\rR\x11rtime32EventStart\x12\x1d\n" +
	"\n" +
	"tv_control\x18\x11 \x01(\rR\ttvControl\"\xcf\x06\n" +
	"7CMsgGCCStrike15_v2_MatchmakingServerReservationResponse\x12$\n" +
	"\rreservationid\x18\x01 \x01(\x04R\rreservationid\x12Q\n" +
	"\vreservation\x18\x02 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveR\vreservation\x12\x10\n" +
	"\x03map\x18\x03 \x01(\tR\x03map\x12.\n" +
	"\x13gc_reservation_sent\x18\x04 \x01(\x04R\x11gcReservationSent\x12%\n" +
	"\x0eserver_version\x18\x05 \x01(\rR\rserverVersion\x12(\n" +
	"\atv_info\x18\x06 \x01(\v2\x0f.ServerHltvInfoR\x06tvInfo\x124\n" +
	"\x16reward_player_accounts\x18\a \x03(\rR\x14rewardPlayerAccounts\x120\n" +
	"\x14idle_player_accounts\x18\b \x03(\rR\x12idlePlayerAccounts\x126\n" +
	"\x18reward_item_attr_def_idx\x18\t \x01(\rR\x14rewardItemAttrDefIdx\x123\n" +
	"\x16reward_item_attr_value\x18\n" +
	" \x01(\rR\x13rewardItemAttrValue\x12<\n" +
	"\x1breward_item_attr_reward_idx\x18\v \x01(\rR\x17rewardItemAttrRewardIdx\x12(\n" +
	"\x10reward_drop_list\x18\f \x01(\rR\x0erewardDropList\x12%\n" +
	"\x0etournament_tag\x18\r \x01(\tR\rtournamentTag\x12:\n" +
	"\x19legacy_steamdatagram_port\x18\x0e \x01(\rR\x17legacySteamdatagramPort\x123\n" +
	"\x15steamdatagram_routing\x18\x11 \x01(\rR\x14steamdatagramRouting\x12\x1d\n" +
	"\n" +
	"test_token\x18\x0f \x01(\aR\ttestToken\x12\x14\n" +
	"\x05flags\x18\x10 \x01(\rR\x05flags\"\xca\x02\n" +
	".CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve\x12\x1a\n" +
	"\bserverid\x18\x01 \x01(\x04R\bserverid\x12\"\n" +
	"\rdirect_udp_ip\x18\x02 \x01(\rR\vdirectUdpIp\x12&\n" +
	"\x0fdirect_udp_port\x18\x03 \x01(\rR\rdirectUdpPort\x12$\n" +
	"\rreservationid\x18\x04 \x01(\x04R\rreservationid\x12Q\n" +
	"\vreservation\x18\x05 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveR\vreservation\x12\x10\n" +
	"\x03map\x18\x06 \x01(\tR\x03map\x12%\n" +
	"\x0eserver_address\x18\a \x01(\tR\rserverAddress\"\xbb\b\n" +
	".CMsgGCCStrike15_v2_MatchmakingServerRoundStats\x12$\n" +
	"\rreservationid\x18\x01 \x01(\x04R\rreservationid\x12Q\n" +
	"\vreservation\x18\x02 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveR\vreservation\x12\x10\n" +
	"\x03map\x18\x03 \x01(\tR\x03map\x12\x14\n" +
	"\x05round\x18\x04 \x01(\x05R\x05round\x12\x14\n" +
	"\x05kills\x18\x05 \x03(\x05R\x05kills\x12\x18\n" +
	"\aassists\x18\x06 \x03(\x05R\aassists\x12\x16\n" +
	"\x06deaths\x18\a \x03(\x05R\x06deaths\x12\x16\n" +
	"\x06scores\x18\b \x03(\x05R\x06scores\x12\x14\n" +
	"\x05pings\x18\t \x03(\x05R\x05pings\x12!\n" +
	"\fround_result\x18\n" +
	" \x01(\x05R\vroundResult\x12!\n" +
	"\fmatch_result\x18\v \x01(\x05R\vmatchResult\x12\x1f\n" +
	"\vteam_scores\x18\f \x03(\x05R\n" +
	"teamScores\x12I\n" +
	"\aconfirm\x18\r \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmR\aconfirm\x12+\n" +
	"\x11reservation_stage\x18\x0e \x01(\x05R\x10reservationStage\x12%\n" +
	"\x0ematch_duration\x18\x0f \x01(\x05R\rmatchDuration\x12\x1f\n" +
	"\venemy_kills\x18\x10 \x03(\x05R\n" +
	"enemyKills\x12'\n" +
	"\x0fenemy_headshots\x18\x11 \x03(\x05R\x0eenemyHeadshots\x12\x1b\n" +
	"\tenemy_3ks\x18\x12 \x03(\x05R\benemy3ks\x12\x1b\n" +
	"\tenemy_4ks\x18\x13 \x03(\x05R\benemy4ks\x12\x1b\n" +
	"\tenemy_5ks\x18\x14 \x03(\x05R\benemy5ks\x12\x12\n" +
	"\x04mvps\x18\x15 \x03(\x05R\x04mvps\x12)\n" +
	"\x10spectators_count\x18\x16 \x01(\rR\x0fspectatorsCount\x12.\n" +
	"\x13spectators_count_tv\x18\x17 \x01(\rR\x11spectatorsCountTv\x120\n" +
	"\x14spectators_count_lnk\x18\x18 \x01(\rR\x12spectatorsCountLnk\x12&\n" +
	"\x0fenemy_kills_agg\x18\x19 \x03(\x05R\renemyKillsAgg\x12U\n" +
	"\tdrop_info\x18\x1a \x01(\v28.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfoR\bdropInfo\x1a+\n" +
	"\bDropInfo\x12\x1f\n" +
	"\vaccount_mvp\x18\x01 \x01(\rR\n" +
	"accountMvp\"\xc5\x03\n" +
	",CMsgGCCStrike15_v2_MatchmakingServerMatchEnd\x12E\n" +
	"\x05stats\x18\x01 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingServerRoundStatsR\x05stats\x12I\n" +
	"\aconfirm\x18\x03 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmR\aconfirm\x12\x18\n" +
	"\arematch\x18\x04 \x01(\x04R\arematch\x12!\n" +
	"\freplay_token\x18\x05 \x01(\rR\vreplayToken\x12*\n" +
	"\x11replay_cluster_id\x18\x06 \x01(\rR\x0freplayClusterId\x12#\n" +
	"\raborted_match\x18\a \x01(\bR\fabortedMatch\x12N\n" +
	"\x14match_end_quest_data\x18\b \x01(\v2\x1d.CMsgGC_ServerQuestUpdateDataR\x11matchEndQuestData\x12%\n" +
	"\x0eserver_version\x18\t \x01(\rR\rserverVersion\"\xfe\x02\n" +
	"3CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial\x12$\n" +
	"\rreservationid\x18\x01 \x01(\x04R\rreservationid\x12Q\n" +
	"\vreservation\x18\x02 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveR\vreservation\x12I\n" +
	"\aconfirm\x18\x03 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmR\aconfirm\x12\\\n" +
	"\x1bcompleted_player_quest_data\x18\x04 \x01(\v2\x1d.CMsgGC_ServerQuestUpdateDataR\x18completedPlayerQuestData\x12%\n" +
	"\x0eserver_version\x18\x05 \x01(\rR\rserverVersion\".\n" +
	",CMsgGCCStrike15_v2_MatchmakingClient2GCHello\"\xda\a\n" +
	",CMsgGCCStrike15_v2_MatchmakingGC2ClientHello\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12S\n" +
	"\fongoingmatch\x18\x02 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveR\fongoingmatch\x124\n" +
	"\fglobal_stats\x18\x03 \x01(\v2\x11.GlobalStatisticsR\vglobalStats\x12'\n" +
	"\x0fpenalty_seconds\x18\x04 \x01(\rR\x0epenaltySeconds\x12%\n" +
	"\x0epenalty_reason\x18\x05 \x01(\rR\rpenaltyReason\x12\x1d\n" +
	"\n" +
	"vac_banned\x18\x06 \x01(\x05R\tvacBanned\x12,\n" +
	"\aranking\x18\a \x01(\v2\x12.PlayerRankingInfoR\aranking\x12;\n" +
	"\fcommendation\x18\b \x01(\v2\x17.PlayerCommendationInfoR\fcommendation\x12)\n" +
	"\x06medals\x18\t \x01(\v2\x11.PlayerMedalsInfoR\x06medals\x12:\n" +
	"\x10my_current_event\x18\n" +
	" \x01(\v2\x10.TournamentEventR\x0emyCurrentEvent\x12D\n" +
	"\x16my_current_event_teams\x18\v \x03(\v2\x0f.TournamentTeamR\x13myCurrentEventTeams\x127\n" +
	"\x0fmy_current_team\x18\f \x01(\v2\x0f.TournamentTeamR\rmyCurrentTeam\x12G\n" +
	"\x17my_current_event_stages\x18\r \x03(\v2\x10.TournamentEventR\x14myCurrentEventStages\x12\x1f\n" +
	"\vsurvey_vote\x18\x0e \x01(\rR\n" +
	"surveyVote\x12,\n" +
	"\bactivity\x18\x0f \x01(\v2\x10.AccountActivityR\bactivity\x12!\n" +
	"\fplayer_level\x18\x11 \x01(\x05R\vplayerLevel\x12\"\n" +
	"\rplayer_cur_xp\x18\x12 \x01(\x05R\vplayerCurXp\x121\n" +
	"\x15player_xp_bonus_flags\x18\x13 \x01(\x05R\x12playerXpBonusFlags\x12.\n" +
	"\brankings\x18\x14 \x03(\v2\x12.PlayerRankingInfoR\brankings\"\xce\x01\n" +
	")CMsgGCCStrike15_v2_AccountPrivacySettings\x12N\n" +
	"\bsettings\x18\x01 \x03(\v22.CMsgGCCStrike15_v2_AccountPrivacySettings.SettingR\bsettings\x1aQ\n" +
	"\aSetting\x12!\n" +
	"\fsetting_type\x18\x01 \x01(\rR\vsettingType\x12#\n" +
	"\rsetting_value\x18\x02 \x01(\rR\fsettingValue\"\xf9\x01\n" +
	".CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12X\n" +
	"\x0fabandoned_match\x18\x02 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveR\x0eabandonedMatch\x12'\n" +
	"\x0fpenalty_seconds\x18\x03 \x01(\rR\x0epenaltySeconds\x12%\n" +
	"\x0epenalty_reason\x18\x04 \x01(\rR\rpenaltyReason\"\xb7\x01\n" +
	"+CMsgGCCStrike15_v2_MatchmakingServer2GCKick\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12Q\n" +
	"\vreservation\x18\x02 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveR\vreservation\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\rR\x06reason\"~\n" +
	"1CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate\x12.\n" +
	"\brankings\x18\x01 \x03(\v2\x12.PlayerRankingInfoR\brankings\x12\x19\n" +
	"\bmatch_id\x18\x02 \x01(\x04R\amatchId\"W\n" +
	"%CMsgGCCStrike15_v2_ClientGCRankUpdate\x12.\n" +
	"\brankings\x18\x01 \x03(\v2\x12.PlayerRankingInfoR\brankings\"Y\n" +
	"3CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate\x12\"\n" +
	"\rmain_post_url\x18\x01 \x01(\tR\vmainPostUrl\"\xbd\x01\n" +
	"3CMsgGCCStrike15_v2_ServerNotificationForUserPenalty\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\rR\x06reason\x12\x18\n" +
	"\aseconds\x18\x03 \x01(\rR\aseconds\x125\n" +
	"\x16communication_cooldown\x18\x04 \x01(\bR\x15communicationCooldown\"\xe1\x02\n" +
	"%CMsgGCCStrike15_v2_ClientReportPlayer\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x1d\n" +
	"\n" +
	"rpt_aimbot\x18\x02 \x01(\rR\trptAimbot\x12!\n" +
	"\frpt_wallhack\x18\x03 \x01(\rR\vrptWallhack\x12#\n" +
	"\rrpt_speedhack\x18\x04 \x01(\rR\frptSpeedhack\x12!\n" +
	"\frpt_teamharm\x18\x05 \x01(\rR\vrptTeamharm\x12#\n" +
	"\rrpt_textabuse\x18\x06 \x01(\rR\frptTextabuse\x12%\n" +
	"\x0erpt_voiceabuse\x18\a \x01(\rR\rrptVoiceabuse\x12\x19\n" +
	"\bmatch_id\x18\b \x01(\x04R\amatchId\x12(\n" +
	"\x10report_from_demo\x18\t \x01(\bR\x0ereportFromDemo\"\xb7\x01\n" +
	"&CMsgGCCStrike15_v2_ClientCommendPlayer\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x19\n" +
	"\bmatch_id\x18\b \x01(\x04R\amatchId\x12;\n" +
	"\fcommendation\x18\t \x01(\v2\x17.PlayerCommendationInfoR\fcommendation\x12\x16\n" +
	"\x06tokens\x18\n" +
	" \x01(\rR\x06tokens\"\x8d\x02\n" +
	"%CMsgGCCStrike15_v2_ClientReportServer\x12!\n" +
	"\frpt_poorperf\x18\x01 \x01(\rR\vrptPoorperf\x12+\n" +
	"\x11rpt_abusivemodels\x18\x02 \x01(\rR\x10rptAbusivemodels\x12\x1f\n" +
	"\vrpt_badmotd\x18\x03 \x01(\rR\n" +
	"rptBadmotd\x12)\n" +
	"\x10rpt_listingabuse\x18\x04 \x01(\rR\x0frptListingabuse\x12-\n" +
	"\x12rpt_inventoryabuse\x18\x05 \x01(\rR\x11rptInventoryabuse\x12\x19\n" +
	"\bmatch_id\x18\b \x01(\x04R\amatchId\"\xf4\x01\n" +
	"'CMsgGCCStrike15_v2_ClientReportResponse\x12'\n" +
	"\x0fconfirmation_id\x18\x01 \x01(\x04R\x0econfirmationId\x12\x1d\n" +
	"\n" +
	"account_id\x18\x02 \x01(\rR\taccountId\x12\x1b\n" +
	"\tserver_ip\x18\x03 \x01(\rR\bserverIp\x12#\n" +
	"\rresponse_type\x18\x04 \x01(\rR\fresponseType\x12'\n" +
	"\x0fresponse_result\x18\x05 \x01(\rR\x0eresponseResult\x12\x16\n" +
	"\x06tokens\x18\x06 \x01(\rR\x06tokens\"\x8e\x02\n" +
	"0CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\rR\trequestId\x12\x1f\n" +
	"\vaccount_ids\x18\x02 \x03(\rR\n" +
	"accountIds\x12\x1a\n" +
	"\bserverid\x18\x03 \x01(\x04R\bserverid\x12\x18\n" +
	"\amatchid\x18\x04 \x01(\x04R\amatchid\x12'\n" +
	"\x0fclient_launcher\x18\x05 \x01(\rR\x0eclientLauncher\x12;\n" +
	"\x11data_center_pings\x18\x06 \x03(\v2\x0f.DataCenterPingR\x0fdataCenterPings\"\xd3\x03\n" +
	"\x12WatchableMatchInfo\x12\x1b\n" +
	"\tserver_ip\x18\x01 \x01(\rR\bserverIp\x12\x17\n" +
	"\atv_port\x18\x02 \x01(\rR\x06tvPort\x12#\n" +
	"\rtv_spectators\x18\x03 \x01(\rR\ftvSpectators\x12\x17\n" +
	"\atv_time\x18\x04 \x01(\rR\x06tvTime\x12*\n" +
	"\x11tv_watch_password\x18\x05 \x01(\fR\x0ftvWatchPassword\x12,\n" +
	"\x12cl_decryptdata_key\x18\x06 \x01(\x04R\x10clDecryptdataKey\x123\n" +
	"\x16cl_decryptdata_key_pub\x18\a \x01(\x04R\x13clDecryptdataKeyPub\x12\x1b\n" +
	"\tgame_type\x18\b \x01(\rR\bgameType\x12#\n" +
	"\rgame_mapgroup\x18\t \x01(\tR\fgameMapgroup\x12\x19\n" +
	"\bgame_map\x18\n" +
	" \x01(\tR\agameMap\x12\x1b\n" +
	"\tserver_id\x18\v \x01(\x04R\bserverId\x12\x19\n" +
	"\bmatch_id\x18\f \x01(\x04R\amatchId\x12%\n" +
	"\x0ereservation_id\x18\r \x01(\x04R\rreservationId\"\x82\x02\n" +
	".CMsgGCCStrike15_v2_ClientRequestJoinFriendData\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12\x1d\n" +
	"\n" +
	"account_id\x18\x02 \x01(\rR\taccountId\x12\x1d\n" +
	"\n" +
	"join_token\x18\x03 \x01(\rR\tjoinToken\x12\x19\n" +
	"\bjoin_ipp\x18\x04 \x01(\rR\ajoinIpp\x12A\n" +
	"\x03res\x18\x05 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveR\x03res\x12\x1a\n" +
	"\berrormsg\x18\x06 \x01(\tR\berrormsg\"\xa2\x02\n" +
	".CMsgGCCStrike15_v2_ClientRequestJoinServerData\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12\x1d\n" +
	"\n" +
	"account_id\x18\x02 \x01(\rR\taccountId\x12\x1a\n" +
	"\bserverid\x18\x03 \x01(\x04R\bserverid\x12\x1b\n" +
	"\tserver_ip\x18\x04 \x01(\rR\bserverIp\x12\x1f\n" +
	"\vserver_port\x18\x05 \x01(\rR\n" +
	"serverPort\x12A\n" +
	"\x03res\x18\x06 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveR\x03res\x12\x1a\n" +
	"\berrormsg\x18\a \x01(\tR\berrormsg\"l\n" +
	"*CMsgGCCstrike15_v2_ClientRequestNewMission\x12\x1d\n" +
	"\n" +
	"mission_id\x18\x02 \x01(\rR\tmissionId\x12\x1f\n" +
	"\vcampaign_id\x18\x03 \x01(\rR\n" +
	"campaignId\"\xaf\x02\n" +
	",CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded\x129\n" +
	"\x10xp_progress_data\x18\x01 \x03(\v2\x0f.XpProgressDataR\x0expProgressData\x12\x1d\n" +
	"\n" +
	"account_id\x18\x02 \x01(\rR\taccountId\x12\x1d\n" +
	"\n" +
	"current_xp\x18\x03 \x01(\rR\tcurrentXp\x12#\n" +
	"\rcurrent_level\x18\x04 \x01(\rR\fcurrentLevel\x12'\n" +
	"\x0fupgraded_defidx\x18\x05 \x01(\rR\x0eupgradedDefidx\x128\n" +
	"\x18operation_points_awarded\x18\x06 \x01(\rR\x16operationPointsAwarded\"\xd7\x01\n" +
	"!CMsgGCCStrike15_v2_WatchInfoUsers\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\rR\trequestId\x12\x1f\n" +
	"\vaccount_ids\x18\x02 \x03(\rR\n" +
	"accountIds\x12G\n" +
	"\x15watchable_match_infos\x18\x03 \x03(\v2\x13.WatchableMatchInfoR\x13watchableMatchInfos\x12)\n" +
	"\x10extended_timeout\x18\x05 \x01(\rR\x0fextendedTimeout\"\xe0\x01\n" +
	".CMsgGCCStrike15_v2_ClientRequestPlayersProfile\x123\n" +
	"\x16request_id__deprecated\x18\x01 \x01(\rR\x13requestIdDeprecated\x125\n" +
	"\x17account_ids__deprecated\x18\x02 \x03(\rR\x14accountIdsDeprecated\x12\x1d\n" +
	"\n" +
	"account_id\x18\x03 \x01(\rR\taccountId\x12#\n" +
	"\rrequest_level\x18\x04 \x01(\rR\frequestLevel\"\x9c\x01\n" +
	"!CMsgGCCStrike15_v2_PlayersProfile\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\rR\trequestId\x12X\n" +
	"\x10account_profiles\x18\x02 \x03(\v2-.CMsgGCCStrike15_v2_MatchmakingGC2ClientHelloR\x0faccountProfiles\"\xa6\x02\n" +
	",CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate\x12\x16\n" +
	"\x06caseid\x18\x01 \x01(\x04R\x06caseid\x12\x1c\n" +
	"\tsuspectid\x18\x03 \x01(\rR\tsuspectid\x12\x1e\n" +
	"\n" +
	"fractionid\x18\x04 \x01(\rR\n" +
	"fractionid\x12\x1d\n" +
	"\n" +
	"rpt_aimbot\x18\x05 \x01(\rR\trptAimbot\x12!\n" +
	"\frpt_wallhack\x18\x06 \x01(\rR\vrptWallhack\x12#\n" +
	"\rrpt_speedhack\x18\a \x01(\rR\frptSpeedhack\x12!\n" +
	"\frpt_teamharm\x18\b \x01(\rR\vrptTeamharm\x12\x16\n" +
	"\x06reason\x18\t \x01(\rR\x06reason\"\x90\x03\n" +
	"0CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment\x12\x16\n" +
	"\x06caseid\x18\x01 \x01(\x04R\x06caseid\x12\x18\n" +
	"\acaseurl\x18\x02 \x01(\tR\acaseurl\x12\x18\n" +
	"\averdict\x18\x03 \x01(\rR\averdict\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\rR\ttimestamp\x12(\n" +
	"\x0fthrottleseconds\x18\x05 \x01(\rR\x0fthrottleseconds\x12\x1c\n" +
	"\tsuspectid\x18\x06 \x01(\rR\tsuspectid\x12\x1e\n" +
	"\n" +
	"fractionid\x18\a \x01(\rR\n" +
	"fractionid\x12\x1c\n" +
	"\tnumrounds\x18\b \x01(\rR\tnumrounds\x12&\n" +
	"\x0efractionrounds\x18\t \x01(\rR\x0efractionrounds\x12,\n" +
	"\x11streakconvictions\x18\n" +
	" \x01(\x05R\x11streakconvictions\x12\x16\n" +
	"\x06reason\x18\v \x01(\rR\x06reason\"b\n" +
	",CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus\x12\x16\n" +
	"\x06caseid\x18\x01 \x01(\x04R\x06caseid\x12\x1a\n" +
	"\bstatusid\x18\x02 \x01(\rR\bstatusid\"V\n" +
	"\x1eCClientHeaderOverwatchEvidence\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x16\n" +
	"\x06caseid\x18\x02 \x01(\x04R\x06caseid\"c\n" +
	"#CMsgGCCStrike15_v2_GC2ClientTextMsg\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\rR\x04type\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\"I\n" +
	"#CMsgGCCStrike15_v2_Client2GCTextMsg\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04args\x18\x02 \x03(\fR\x04args\"\xd5\x01\n" +
	")CMsgGCCStrike15_v2_MatchEndRunRewardDrops\x12X\n" +
	"\n" +
	"serverinfo\x18\x03 \x01(\v28.CMsgGCCStrike15_v2_MatchmakingServerReservationResponseR\n" +
	"serverinfo\x12N\n" +
	"\x14match_end_quest_data\x18\x04 \x01(\v2\x1d.CMsgGC_ServerQuestUpdateDataR\x11matchEndQuestData\"\xfd\x05\n" +
	"\x19CEconItemPreviewDataBlock\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x16\n" +
	"\x06itemid\x18\x02 \x01(\x04R\x06itemid\x12\x1a\n" +
	"\bdefindex\x18\x03 \x01(\rR\bdefindex\x12\x1e\n" +
	"\n" +
	"paintindex\x18\x04 \x01(\rR\n" +
	"paintindex\x12\x16\n" +
	"\x06rarity\x18\x05 \x01(\rR\x06rarity\x12\x18\n" +
	"\aquality\x18\x06 \x01(\rR\aquality\x12\x1c\n" +
	"\tpaintwear\x18\a \x01(\rR\tpaintwear\x12\x1c\n" +
	"\tpaintseed\x18\b \x01(\rR\tpaintseed\x12.\n" +
	"\x12killeaterscoretype\x18\t \x01(\rR\x12killeaterscoretype\x12&\n" +
	"\x0ekilleatervalue\x18\n" +
	" \x01(\rR\x0ekilleatervalue\x12\x1e\n" +
	"\n" +
	"customname\x18\v \x01(\tR\n" +
	"customname\x12>\n" +
	"\bstickers\x18\f \x03(\v2\".CEconItemPreviewDataBlock.StickerR\bstickers\x12\x1c\n" +
	"\tinventory\x18\r \x01(\rR\tinventory\x12\x16\n" +
	"\x06origin\x18\x0e \x01(\rR\x06origin\x12\x18\n" +
	"\aquestid\x18\x0f \x01(\rR\aquestid\x12\x1e\n" +
	"\n" +
	"dropreason\x18\x10 \x01(\rR\n" +
	"dropreason\x12\x1e\n" +
	"\n" +
	"musicindex\x18\x11 \x01(\rR\n" +
	"musicindex\x12\x1a\n" +
	"\bentindex\x18\x12 \x01(\x05R\bentindex\x1a\x9b\x01\n" +
	"\aSticker\x12\x12\n" +
	"\x04slot\x18\x01 \x01(\rR\x04slot\x12\x1d\n" +
	"\n" +
	"sticker_id\x18\x02 \x01(\rR\tstickerId\x12\x12\n" +
	"\x04wear\x18\x03 \x01(\x02R\x04wear\x12\x14\n" +
	"\x05scale\x18\x04 \x01(\x02R\x05scale\x12\x1a\n" +
	"\brotation\x18\x05 \x01(\x02R\brotation\x12\x17\n" +
	"\atint_id\x18\x06 \x01(\rR\x06tintId\"l\n" +
	"2CMsgGCCStrike15_v2_MatchEndRewardDropsNotification\x126\n" +
	"\biteminfo\x18\x06 \x01(\v2\x1a.CEconItemPreviewDataBlockR\biteminfo\"N\n" +
	"\x14CMsgItemAcknowledged\x126\n" +
	"\biteminfo\x18\x01 \x01(\v2\x1a.CEconItemPreviewDataBlockR\biteminfo\"\x9d\x01\n" +
	"7CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest\x12\x17\n" +
	"\aparam_s\x18\x01 \x01(\x04R\x06paramS\x12\x17\n" +
	"\aparam_a\x18\x02 \x01(\x04R\x06paramA\x12\x17\n" +
	"\aparam_d\x18\x03 \x01(\x04R\x06paramD\x12\x17\n" +
	"\aparam_m\x18\x04 \x01(\x04R\x06paramM\"r\n" +
	"8CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse\x126\n" +
	"\biteminfo\x18\x01 \x01(\v2\x1a.CEconItemPreviewDataBlockR\biteminfo\"\x92\x01\n" +
	"9CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12\x1a\n" +
	"\bdefindex\x18\x02 \x01(\rR\bdefindex\x12\x1e\n" +
	"\n" +
	"accountids\x18\x03 \x03(\rR\n" +
	"accountids\"5\n" +
	"3CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames\"R\n" +
	"2CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\"R\n" +
	"2CMsgGCCStrike15_v2_MatchListRequestRecentUserGames\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\"N\n" +
	"2CMsgGCCStrike15_v2_MatchListRequestTournamentGames\x12\x18\n" +
	"\aeventid\x18\x01 \x01(\x05R\aeventid\"\x7f\n" +
	"/CMsgGCCStrike15_v2_MatchListRequestFullGameInfo\x12\x18\n" +
	"\amatchid\x18\x01 \x01(\x04R\amatchid\x12\x1c\n" +
	"\toutcomeid\x18\x02 \x01(\x04R\toutcomeid\x12\x14\n" +
	"\x05token\x18\x03 \x01(\rR\x05token\"\xd1\x02\n" +
	"\x1dCDataGCCStrike15_v2_MatchInfo\x12\x18\n" +
	"\amatchid\x18\x01 \x01(\x04R\amatchid\x12\x1c\n" +
	"\tmatchtime\x18\x02 \x01(\rR\tmatchtime\x12C\n" +
	"\x12watchablematchinfo\x18\x03 \x01(\v2\x13.WatchableMatchInfoR\x12watchablematchinfo\x12\\\n" +
	"\x11roundstats_legacy\x18\x04 \x01(\v2/.CMsgGCCStrike15_v2_MatchmakingServerRoundStatsR\x10roundstatsLegacy\x12U\n" +
	"\rroundstatsall\x18\x05 \x03(\v2/.CMsgGCCStrike15_v2_MatchmakingServerRoundStatsR\rroundstatsall\"z\n" +
	"'CDataGCCStrike15_v2_TournamentGroupTeam\x12\x17\n" +
	"\ateam_id\x18\x01 \x01(\x05R\x06teamId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x05R\x05score\x12 \n" +
	"\vcorrectpick\x18\x03 \x01(\bR\vcorrectpick\"\xd1\x03\n" +
	"#CDataGCCStrike15_v2_TournamentGroup\x12\x18\n" +
	"\agroupid\x18\x01 \x01(\rR\agroupid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04desc\x18\x03 \x01(\tR\x04desc\x12*\n" +
	"\x11picks__deprecated\x18\x04 \x01(\rR\x0fpicksDeprecated\x12>\n" +
	"\x05teams\x18\x05 \x03(\v2(.CDataGCCStrike15_v2_TournamentGroupTeamR\x05teams\x12\x1b\n" +
	"\tstage_ids\x18\x06 \x03(\x05R\bstageIds\x12,\n" +
	"\x11picklockuntiltime\x18\a \x01(\rR\x11picklockuntiltime\x12$\n" +
	"\rpickableteams\x18\b \x01(\rR\rpickableteams\x12&\n" +
	"\x0fpoints_per_pick\x18\t \x01(\rR\rpointsPerPick\x12@\n" +
	"\x05picks\x18\n" +
	" \x03(\v2*.CDataGCCStrike15_v2_TournamentGroup.PicksR\x05picks\x1a!\n" +
	"\x05Picks\x12\x18\n" +
	"\apickids\x18\x01 \x03(\x05R\apickids\"\xab\x01\n" +
	"%CDataGCCStrike15_v2_TournamentSection\x12\x1c\n" +
	"\tsectionid\x18\x01 \x01(\rR\tsectionid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04desc\x18\x03 \x01(\tR\x04desc\x12<\n" +
	"\x06groups\x18\x04 \x03(\v2$.CDataGCCStrike15_v2_TournamentGroupR\x06groups\"\xe1\x01\n" +
	"\"CDataGCCStrike15_v2_TournamentInfo\x12B\n" +
	"\bsections\x18\x01 \x03(\v2&.CDataGCCStrike15_v2_TournamentSectionR\bsections\x12;\n" +
	"\x10tournament_event\x18\x02 \x01(\v2\x10.TournamentEventR\x0ftournamentEvent\x12:\n" +
	"\x10tournament_teams\x18\x03 \x03(\v2\x0f.TournamentTeamR\x0ftournamentTeams\"\xb2\x02\n" +
	"\x1cCMsgGCCStrike15_v2_MatchList\x12\"\n" +
	"\fmsgrequestid\x18\x01 \x01(\rR\fmsgrequestid\x12\x1c\n" +
	"\taccountid\x18\x02 \x01(\rR\taccountid\x12\x1e\n" +
	"\n" +
	"servertime\x18\x03 \x01(\rR\n" +
	"servertime\x128\n" +
	"\amatches\x18\x04 \x03(\v2\x1e.CDataGCCStrike15_v2_MatchInfoR\amatches\x12)\n" +
	"\astreams\x18\x05 \x03(\v2\x0f.TournamentTeamR\astreams\x12K\n" +
	"\x0etournamentinfo\x18\x06 \x01(\v2#.CDataGCCStrike15_v2_TournamentInfoR\x0etournamentinfo\"\xb9\x02\n" +
	"\x1eCMsgGCCStrike15_v2_Predictions\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\rR\aeventId\x12g\n" +
	"\x16group_match_team_picks\x18\x02 \x03(\v22.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPickR\x13groupMatchTeamPicks\x1a\x92\x01\n" +
	"\x12GroupMatchTeamPick\x12\x1c\n" +
	"\tsectionid\x18\x01 \x01(\x05R\tsectionid\x12\x18\n" +
	"\agroupid\x18\x02 \x01(\x05R\agroupid\x12\x14\n" +
	"\x05index\x18\x03 \x01(\x05R\x05index\x12\x16\n" +
	"\x06teamid\x18\x04 \x01(\x05R\x06teamid\x12\x16\n" +
	"\x06itemid\x18\x05 \x01(\x04R\x06itemid\"\xb1\x02\n" +
	"\x1aCMsgGCCStrike15_v2_Fantasy\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\rR\aeventId\x12=\n" +
	"\x05teams\x18\x02 \x03(\v2'.CMsgGCCStrike15_v2_Fantasy.FantasyTeamR\x05teams\x1aM\n" +
	"\vFantasySlot\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12\x12\n" +
	"\x04pick\x18\x02 \x01(\x05R\x04pick\x12\x16\n" +
	"\x06itemid\x18\x03 \x01(\x04R\x06itemid\x1aj\n" +
	"\vFantasyTeam\x12\x1c\n" +
	"\tsectionid\x18\x01 \x01(\x05R\tsectionid\x12=\n" +
	"\x05slots\x18\x02 \x03(\v2'.CMsgGCCStrike15_v2_Fantasy.FantasySlotR\x05slots\")\n" +
	"\x11CAttribute_String\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\x1a\n" +
	"\x18CMsgGCToGCReloadVersions\"\xb2\x02\n" +
	"\x14CMsgCStrike15Welcome\x12&\n" +
	"\x0fstore_item_hash\x18\x05 \x01(\rR\rstoreItemHash\x128\n" +
	"\x17timeplayedconsecutively\x18\x06 \x01(\rR\x17timeplayedconsecutively\x12*\n" +
	"\x11time_first_played\x18\n" +
	" \x01(\rR\x0ftimeFirstPlayed\x12(\n" +
	"\x10last_time_played\x18\f \x01(\rR\x0elastTimePlayed\x12&\n" +
	"\x0flast_ip_address\x18\r \x01(\rR\rlastIpAddress\x12\x1e\n" +
	"\n" +
	"gscookieid\x18\x12 \x01(\x04R\n" +
	"gscookieid\x12\x1a\n" +
	"\buniqueid\x18\x13 \x01(\x04R\buniqueid\"\xd6\x01\n" +
	"1CMsgGCCStrike15_v2_ClientVarValueNotificationInfo\x12\x1d\n" +
	"\n" +
	"value_name\x18\x01 \x01(\tR\tvalueName\x12\x1b\n" +
	"\tvalue_int\x18\x02 \x01(\x05R\bvalueInt\x12\x1f\n" +
	"\vserver_addr\x18\x03 \x01(\rR\n" +
	"serverAddr\x12\x1f\n" +
	"\vserver_port\x18\x04 \x01(\rR\n" +
	"serverPort\x12#\n" +
	"\rchoked_blocks\x18\x05 \x03(\tR\fchokedBlocks\"\x85\x01\n" +
	"1CMsgGCCStrike15_v2_ServerVarValueNotificationInfo\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x1e\n" +
	"\n" +
	"viewangles\x18\x02 \x03(\rR\n" +
	"viewangles\x12\x12\n" +
	"\x04type\x18\x03 \x01(\rR\x04type\",\n" +
	"*CMsgGCCStrike15_v2_GiftsLeaderboardRequest\"\xf5\x02\n" +
	"+CMsgGCCStrike15_v2_GiftsLeaderboardResponse\x12\x1e\n" +
	"\n" +
	"servertime\x18\x01 \x01(\rR\n" +
	"servertime\x12.\n" +
	"\x13time_period_seconds\x18\x02 \x01(\rR\x11timePeriodSeconds\x12*\n" +
	"\x11total_gifts_given\x18\x03 \x01(\rR\x0ftotalGiftsGiven\x12!\n" +
	"\ftotal_givers\x18\x04 \x01(\rR\vtotalGivers\x12[\n" +
	"\aentries\x18\x05 \x03(\v2A.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntryR\aentries\x1aJ\n" +
	"\x14GiftLeaderboardEntry\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x14\n" +
	"\x05gifts\x18\x02 \x01(\rR\x05gifts\"\\\n" +
	")CMsgGCCStrike15_v2_ClientSubmitSurveyVote\x12\x1b\n" +
	"\tsurvey_id\x18\x01 \x01(\rR\bsurveyId\x12\x12\n" +
	"\x04vote\x18\x02 \x01(\rR\x04vote\"J\n" +
	"*CMsgGCCStrike15_v2_Server2GCClientValidate\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\"\xfa\x01\n" +
	"7CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x12\n" +
	"\x04file\x18\x03 \x01(\tR\x04file\x12\x10\n" +
	"\x03crc\x18\x04 \x01(\rR\x03crc\x12\x12\n" +
	"\x04hash\x18\x05 \x01(\x05R\x04hash\x12\x10\n" +
	"\x03len\x18\x06 \x01(\x05R\x03len\x12\x1f\n" +
	"\vpack_number\x18\a \x01(\x05R\n" +
	"packNumber\x12 \n" +
	"\fpack_file_id\x18\b \x01(\x05R\n" +
	"packFileId\"\x97\x01\n" +
	"*CMsgGCCStrike15_v2_GC2ClientTournamentInfo\x12\x18\n" +
	"\aeventid\x18\x01 \x01(\rR\aeventid\x12\x18\n" +
	"\astageid\x18\x02 \x01(\rR\astageid\x12\x1b\n" +
	"\tgame_type\x18\x03 \x01(\rR\bgameType\x12\x18\n" +
	"\ateamids\x18\x04 \x03(\rR\ateamids\"p\n" +
	"\rCSOEconCoupon\x12\x1e\n" +
	"\aentryid\x18\x01 \x01(\rB\x04\x80\xa6\x1d\x01R\aentryid\x12\x16\n" +
	"\x06defidx\x18\x02 \x01(\rR\x06defidx\x12'\n" +
	"\x0fexpiration_date\x18\x03 \x01(\aR\x0eexpirationDate\"\x80\x01\n" +
	"\x10CSOQuestProgress\x12\x1e\n" +
	"\aquestid\x18\x01 \x01(\rB\x04\x80\xa6\x1d\x01R\aquestid\x12)\n" +
	"\x10points_remaining\x18\x02 \x01(\rR\x0fpointsRemaining\x12!\n" +
	"\fbonus_points\x18\x03 \x01(\rR\vbonusPoints\"\xde\x01\n" +
	"\x1bCSOAccountSeasonalOperation\x12'\n" +
	"\fseason_value\x18\x01 \x01(\rB\x04\x80\xa6\x1d\x01R\vseasonValue\x12#\n" +
	"\rtier_unlocked\x18\x02 \x01(\rR\ftierUnlocked\x12#\n" +
	"\rpremium_tiers\x18\x03 \x01(\rR\fpremiumTiers\x12\x1d\n" +
	"\n" +
	"mission_id\x18\x04 \x01(\rR\tmissionId\x12-\n" +
	"\x12missions_completed\x18\x05 \x01(\rR\x11missionsCompleted\"\x9d\x01\n" +
	"\x14CSOPersonaDataPublic\x12!\n" +
	"\fplayer_level\x18\x01 \x01(\x05R\vplayerLevel\x12;\n" +
	"\fcommendation\x18\x02 \x01(\v2\x17.PlayerCommendationInfoR\fcommendation\x12%\n" +
	"\x0eelevated_state\x18\x03 \x01(\bR\relevatedState\"5\n" +
	"\x1bCMsgGC_GlobalGame_Subscribe\x12\x16\n" +
	"\x06ticket\x18\x01 \x01(\x04R\x06ticket\";\n" +
	"\x1dCMsgGC_GlobalGame_Unsubscribe\x12\x1a\n" +
	"\btimeleft\x18\x01 \x01(\x05R\btimeleft\"p\n" +
	"\x16CMsgGC_GlobalGame_Play\x12\x16\n" +
	"\x06ticket\x18\x01 \x01(\x04R\x06ticket\x12\x1e\n" +
	"\n" +
	"gametimems\x18\x02 \x01(\rR\n" +
	"gametimems\x12\x1e\n" +
	"\n" +
	"msperpoint\x18\x03 \x01(\rR\n" +
	"msperpoint\"K\n" +
	"%CMsgGCCStrike15_v2_AcknowledgePenalty\x12\"\n" +
	"\facknowledged\x18\x01 \x01(\x05R\facknowledged\"\xa5\x01\n" +
	"/CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin\x12\x1a\n" +
	"\bdefindex\x18\x01 \x01(\rR\bdefindex\x12\x1c\n" +
	"\tupgradeid\x18\x02 \x01(\x04R\tupgradeid\x12\x14\n" +
	"\x05hours\x18\x03 \x01(\rR\x05hours\x12\"\n" +
	"\fprestigetime\x18\x04 \x01(\rR\fprestigetime\"R\n" +
	"(CMsgGCCStrike15_v2_Client2GCStreamUnlock\x12\x16\n" +
	"\x06ticket\x18\x01 \x01(\x04R\x06ticket\x12\x0e\n" +
	"\x02os\x18\x02 \x01(\x05R\x02os\"C\n" +
	"+CMsgGCCStrike15_v2_ClientToGCRequestElevate\x12\x14\n" +
	"\x05stage\x18\x01 \x01(\rR\x05stage\"R\n" +
	"!CMsgGCCStrike15_v2_ClientToGCChat\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"V\n" +
	"!CMsgGCCStrike15_v2_GCToClientChat\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"T\n" +
	"$CMsgGCCStrike15_v2_ClientAuthKeyCode\x12\x18\n" +
	"\aeventid\x18\x01 \x01(\rR\aeventid\x12\x12\n" +
	"\x04code\x18\x02 \x01(\tR\x04code\"L\n" +
	"\x1eCMsgGCCStrike15_GotvSyncPacket\x12*\n" +
	"\x04data\x18\x01 \x01(\v2\x16.CEngineGotvSyncPacketR\x04data\"\x98\x03\n" +
	"\x1bPlayerDecalDigitalSignature\x12\x1c\n" +
	"\tsignature\x18\x01 \x01(\fR\tsignature\x12\x1c\n" +
	"\taccountid\x18\x02 \x01(\rR\taccountid\x12\x14\n" +
	"\x05rtime\x18\x03 \x01(\rR\x05rtime\x12\x16\n" +
	"\x06endpos\x18\x04 \x03(\x02R\x06endpos\x12\x1a\n" +
	"\bstartpos\x18\x05 \x03(\x02R\bstartpos\x12\x14\n" +
	"\x05right\x18\x06 \x03(\x02R\x05right\x12\x1b\n" +
	"\ttx_defidx\x18\a \x01(\rR\btxDefidx\x12\x1a\n" +
	"\bentindex\x18\b \x01(\x05R\bentindex\x12\x16\n" +
	"\x06hitbox\x18\t \x01(\rR\x06hitbox\x12\"\n" +
	"\fcreationtime\x18\n" +
	" \x01(\x02R\fcreationtime\x12\x1c\n" +
	"\tequipslot\x18\v \x01(\rR\tequipslot\x12\x19\n" +
	"\btrace_id\x18\f \x01(\rR\atraceId\x12\x16\n" +
	"\x06normal\x18\r \x03(\x02R\x06normal\x12\x17\n" +
	"\atint_id\x18\x0e \x01(\rR\x06tintId\"t\n" +
	"(CMsgGCCStrike15_v2_ClientPlayerDecalSign\x120\n" +
	"\x04data\x18\x01 \x01(\v2\x1c.PlayerDecalDigitalSignatureR\x04data\x12\x16\n" +
	"\x06itemid\x18\x02 \x01(\x04R\x06itemid\"|\n" +
	"(CMsgGCCStrike15_v2_ClientLogonFatalError\x12\x1c\n" +
	"\terrorcode\x18\x01 \x01(\rR\terrorcode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x18\n" +
	"\acountry\x18\x03 \x01(\tR\acountry\"j\n" +
	"\"CMsgGCCStrike15_v2_ClientPollState\x12\x16\n" +
	"\x06pollid\x18\x01 \x01(\rR\x06pollid\x12\x14\n" +
	"\x05names\x18\x02 \x03(\tR\x05names\x12\x16\n" +
	"\x06values\x18\x03 \x03(\x05R\x06values\"\xdc\x01\n" +
	"!CMsgGCCStrike15_v2_Party_Register\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x10\n" +
	"\x03ver\x18\x02 \x01(\rR\x03ver\x12\x10\n" +
	"\x03apr\x18\x03 \x01(\rR\x03apr\x12\x10\n" +
	"\x03ark\x18\x04 \x01(\rR\x03ark\x12\x10\n" +
	"\x03nby\x18\x05 \x01(\rR\x03nby\x12\x10\n" +
	"\x03grp\x18\x06 \x01(\rR\x03grp\x12\x14\n" +
	"\x05slots\x18\a \x01(\rR\x05slots\x12\x1a\n" +
	"\blauncher\x18\b \x01(\rR\blauncher\x12\x1b\n" +
	"\tgame_type\x18\t \x01(\rR\bgameType\"\xa4\x01\n" +
	"\x1fCMsgGCCStrike15_v2_Party_Search\x12\x10\n" +
	"\x03ver\x18\x01 \x01(\rR\x03ver\x12\x10\n" +
	"\x03apr\x18\x02 \x01(\rR\x03apr\x12\x10\n" +
	"\x03ark\x18\x03 \x01(\rR\x03ark\x12\x12\n" +
	"\x04grps\x18\x04 \x03(\rR\x04grps\x12\x1a\n" +
	"\blauncher\x18\x05 \x01(\rR\blauncher\x12\x1b\n" +
	"\tgame_type\x18\x06 \x01(\rR\bgameType\"\xef\x01\n" +
	"&CMsgGCCStrike15_v2_Party_SearchResults\x12G\n" +
	"\aentries\x18\x01 \x03(\v2-.CMsgGCCStrike15_v2_Party_SearchResults.EntryR\aentries\x1a|\n" +
	"\x05Entry\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x10\n" +
	"\x03grp\x18\x02 \x01(\rR\x03grp\x12\x1b\n" +
	"\tgame_type\x18\x03 \x01(\rR\bgameType\x12\x10\n" +
	"\x03apr\x18\x04 \x01(\rR\x03apr\x12\x10\n" +
	"\x03ark\x18\x05 \x01(\rR\x03ark\x12\x10\n" +
	"\x03loc\x18\x06 \x01(\rR\x03loc\"Y\n" +
	"\x1fCMsgGCCStrike15_v2_Party_Invite\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x18\n" +
	"\alobbyid\x18\x02 \x01(\rR\alobbyid\"\xf4\x01\n" +
	")CMsgGCCStrike15_v2_Account_RequestCoPlays\x12K\n" +
	"\aplayers\x18\x01 \x03(\v21.CMsgGCCStrike15_v2_Account_RequestCoPlays.PlayerR\aplayers\x12\x1e\n" +
	"\n" +
	"servertime\x18\x02 \x01(\rR\n" +
	"servertime\x1aZ\n" +
	"\x06Player\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x1a\n" +
	"\brtcoplay\x18\x02 \x01(\rR\brtcoplay\x12\x16\n" +
	"\x06online\x18\x03 \x01(\bR\x06online\"\xf4\x01\n" +
	"*CMsgGCCStrike15_v2_ClientToGCRequestTicket\x12.\n" +
	"\x13authorized_steam_id\x18\x01 \x01(\x06R\x11authorizedSteamId\x120\n" +
	"\x14authorized_public_ip\x18\x02 \x01(\aR\x12authorizedPublicIp\x12.\n" +
	"\x13gameserver_steam_id\x18\x03 \x01(\x06R\x11gameserverSteamId\x124\n" +
	"\x16gameserver_sdr_routing\x18\x05 \x01(\tR\x14gameserverSdrRouting\"P\n" +
	"!CMsgGCToClientSteamDatagramTicket\x12+\n" +
	"\x11serialized_ticket\x18\x10 \x01(\fR\x10serializedTicket\"(\n" +
	"&CMsgGCCStrike15_v2_ClientRequestOffers\"v\n" +
	"(CMsgGCCStrike15_v2_ClientRequestSouvenir\x12\x16\n" +
	"\x06itemid\x18\x01 \x01(\x04R\x06itemid\x12\x18\n" +
	"\amatchid\x18\x02 \x01(\x04R\amatchid\x12\x18\n" +
	"\aeventid\x18\x03 \x01(\x05R\aeventid\"S\n" +
	"'CMsgGCCStrike15_v2_ClientAccountBalance\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x04R\x06amount\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\"a\n" +
	"'CMsgGCCStrike15_v2_ClientPartyJoinRelay\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x18\n" +
	"\alobbyid\x18\x02 \x01(\x04R\alobbyid\"\xb2\x01\n" +
	"%CMsgGCCStrike15_v2_ClientPartyWarning\x12F\n" +
	"\aentries\x18\x01 \x03(\v2,.CMsgGCCStrike15_v2_ClientPartyWarning.EntryR\aentries\x1aA\n" +
	"\x05Entry\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x1a\n" +
	"\bwarntype\x18\x02 \x01(\rR\bwarntype\"`\n" +
	"#CMsgGCCStrike15_v2_SetEventFavorite\x12\x18\n" +
	"\aeventid\x18\x01 \x01(\x04R\aeventid\x12\x1f\n" +
	"\vis_favorite\x18\x02 \x01(\bR\n" +
	"isFavorite\"M\n" +
	",CMsgGCCStrike15_v2_GetEventFavorites_Request\x12\x1d\n" +
	"\n" +
	"all_events\x18\x01 \x01(\bR\tallEvents\"\x9a\x01\n" +
	"-CMsgGCCStrike15_v2_GetEventFavorites_Response\x12\x1d\n" +
	"\n" +
	"all_events\x18\x01 \x01(\bR\tallEvents\x12%\n" +
	"\x0ejson_favorites\x18\x02 \x01(\tR\rjsonFavorites\x12#\n" +
	"\rjson_featured\x18\x03 \x01(\tR\fjsonFeatured\"\x99\x02\n" +
	"#CMsgGCCStrike15_v2_ClientPerfReport\x12D\n" +
	"\aentries\x18\x01 \x03(\v2*.CMsgGCCStrike15_v2_ClientPerfReport.EntryR\aentries\x1a\xab\x01\n" +
	"\x05Entry\x12 \n" +
	"\vperfcounter\x18\x01 \x01(\rR\vperfcounter\x12\x16\n" +
	"\x06length\x18\x02 \x01(\rR\x06length\x12\x1c\n" +
	"\treference\x18\x03 \x01(\fR\treference\x12\x16\n" +
	"\x06actual\x18\x04 \x01(\fR\x06actual\x12\x1a\n" +
	"\bsourceid\x18\x05 \x01(\rR\bsourceid\x12\x16\n" +
	"\x06status\x18\x06 \x01(\rR\x06status\"\xc8\x05\n" +
	")CMsgGCCStrike15_v2_ClientReportValidation\x12\x1f\n" +
	"\vfile_report\x18\x01 \x01(\tR\n" +
	"fileReport\x12!\n" +
	"\fcommand_line\x18\x02 \x01(\tR\vcommandLine\x12\x1f\n" +
	"\vtotal_files\x18\x03 \x01(\rR\n" +
	"totalFiles\x12%\n" +
	"\x0einternal_error\x18\x04 \x01(\rR\rinternalError\x12\x1d\n" +
	"\n" +
	"trust_time\x18\x05 \x01(\rR\ttrustTime\x12#\n" +
	"\rcount_pending\x18\x06 \x01(\rR\fcountPending\x12'\n" +
	"\x0fcount_completed\x18\a \x01(\rR\x0ecountCompleted\x12\x1d\n" +
	"\n" +
	"process_id\x18\b \x01(\rR\tprocessId\x12\x1c\n" +
	"\tosversion\x18\t \x01(\x05R\tosversion\x120\n" +
	"\x13clientreportversion\x18\n" +
	" \x01(\rR\x13clientreportversion\x12\x1b\n" +
	"\tstatus_id\x18\v \x01(\rR\bstatusId\x12 \n" +
	"\vdiagnostic1\x18\f \x01(\rR\vdiagnostic1\x12 \n" +
	"\vdiagnostic2\x18\r \x01(\x04R\vdiagnostic2\x12 \n" +
	"\vdiagnostic3\x18\x0e \x01(\x04R\vdiagnostic3\x12(\n" +
	"\x10last_launch_data\x18\x0f \x01(\tR\x0elastLaunchData\x12!\n" +
	"\freport_count\x18\x10 \x01(\rR\vreportCount\x12\x1f\n" +
	"\vclient_time\x18\x11 \x01(\x04R\n" +
	"clientTime\x12 \n" +
	"\vdiagnostic4\x18\x12 \x01(\x04R\vdiagnostic4\x12 \n" +
	"\vdiagnostic5\x18\x13 \x01(\x04R\vdiagnostic5\"\xd3\x02\n" +
	",CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode\x12\x1f\n" +
	"\vfile_report\x18\x01 \x01(\tR\n" +
	"fileReport\x12.\n" +
	"\x13offer_insecure_mode\x18\x02 \x01(\bR\x11offerInsecureMode\x12*\n" +
	"\x11offer_secure_mode\x18\x03 \x01(\bR\x0fofferSecureMode\x12(\n" +
	"\x10show_unsigned_ui\x18\x04 \x01(\bR\x0eshowUnsignedUi\x12\x1b\n" +
	"\tkick_user\x18\x05 \x01(\bR\bkickUser\x12&\n" +
	"\x0fshow_trusted_ui\x18\x06 \x01(\bR\rshowTrustedUi\x127\n" +
	"\x18show_warning_not_trusted\x18\a \x01(\bR\x15showWarningNotTrusted\"h\n" +
	"-CMsgGCCStrike15_v2_GC2ClientRequestValidation\x12\x1f\n" +
	"\vfull_report\x18\x01 \x01(\bR\n" +
	"fullReport\x12\x16\n" +
	"\x06module\x18\x02 \x01(\tR\x06module*\x82)\n" +
	"\n" +
	"ECsgoGCMsg\x12\x1e\n" +
	"\x19k_EMsgGCCStrike15_v2_Base\x10\x8cG\x12*\n" +
	"%k_EMsgGCCStrike15_v2_MatchmakingStart\x10\x8dG\x12)\n" +
	"$k_EMsgGCCStrike15_v2_MatchmakingStop\x10\x8eG\x126\n" +
	"1k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing\x10\x8fG\x124\n" +
	"/k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate\x10\x90G\x125\n" +
	"0k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve\x10\x91G\x12>\n" +
	"9k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse\x10\x92G\x125\n" +
	"0k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve\x10\x93G\x125\n" +
	"0k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats\x10\x94G\x123\n" +
	".k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello\x10\x95G\x123\n" +
	".k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello\x10\x96G\x123\n" +
	".k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd\x10\x97G\x125\n" +
	"0k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon\x10\x98G\x122\n" +
	"-k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick\x10\x99G\x125\n" +
	"0k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm\x10\x9aG\x127\n" +
	"2k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats\x10\x9bG\x128\n" +
	"3k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate\x10\x9cG\x12:\n" +
	"5k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate\x10\x9dG\x12:\n" +
	"5k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty\x10\x9eG\x12,\n" +
	"'k_EMsgGCCStrike15_v2_ClientReportPlayer\x10\x9fG\x12,\n" +
	"'k_EMsgGCCStrike15_v2_ClientReportServer\x10\xa0G\x12-\n" +
	"(k_EMsgGCCStrike15_v2_ClientCommendPlayer\x10\xa1G\x12.\n" +
	")k_EMsgGCCStrike15_v2_ClientReportResponse\x10\xa2G\x122\n" +
	"-k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery\x10\xa3G\x12:\n" +
	"5k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse\x10\xa4G\x12(\n" +
	"#k_EMsgGCCStrike15_v2_WatchInfoUsers\x10\xa6G\x125\n" +
	"0k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile\x10\xa7G\x12(\n" +
	"#k_EMsgGCCStrike15_v2_PlayersProfile\x10\xa8G\x123\n" +
	".k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate\x10\xabG\x127\n" +
	"2k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment\x10\xacG\x123\n" +
	".k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus\x10\xadG\x12*\n" +
	"%k_EMsgGCCStrike15_v2_GC2ClientTextMsg\x10\xaeG\x12*\n" +
	"%k_EMsgGCCStrike15_v2_Client2GCTextMsg\x10\xafG\x120\n" +
	"+k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops\x10\xb0G\x129\n" +
	"4k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification\x10\xb1G\x128\n" +
	"3k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2\x10\xb2G\x12#\n" +
	"\x1ek_EMsgGCCStrike15_v2_MatchList\x10\xb3G\x12:\n" +
	"5k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames\x10\xb4G\x129\n" +
	"4k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames\x10\xb5G\x124\n" +
	"/k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate\x10\xb6G\x128\n" +
	"3k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo\x10\xb8G\x12@\n" +
	";k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification\x10\xb9G\x129\n" +
	"4k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames\x10\xbaG\x126\n" +
	"1k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo\x10\xbbG\x121\n" +
	",k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest\x10\xbcG\x122\n" +
	"-k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse\x10\xbdG\x128\n" +
	"3k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo\x10\xbeG\x12\x1f\n" +
	"\x1ak_EMsgGCToGCReloadVersions\x10\xbfG\x120\n" +
	"+k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote\x10\xc0G\x121\n" +
	",k_EMsgGCCStrike15_v2_Server2GCClientValidate\x10\xc1G\x129\n" +
	"4k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser\x10\xc2G\x12>\n" +
	"9k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure\x10\xc3G\x12>\n" +
	"9k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest\x10\xc4G\x12?\n" +
	":k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse\x10\xc5G\x120\n" +
	"+k_EMsgGCCStrike15_v2_AccountPrivacySettings\x10\xc6G\x12+\n" +
	"&k_EMsgGCCStrike15_v2_SetMyActivityInfo\x10\xc7G\x12?\n" +
	":k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions\x10\xc8G\x12>\n" +
	"9k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions\x10\xc9G\x12&\n" +
	"!k_EMsgGCCStrike15_v2_DraftSummary\x10\xcaG\x125\n" +
	"0k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData\x10\xcbG\x125\n" +
	"0k_EMsgGCCStrike15_v2_ClientRequestJoinServerData\x10\xccG\x121\n" +
	",k_EMsgGCCStrike15_v2_ClientRequestNewMission\x10\xcdG\x123\n" +
	".k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded\x10\xceG\x121\n" +
	",k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo\x10\xcfG\x12\"\n" +
	"\x1dk_EMsgGC_GlobalGame_Subscribe\x10\xd0G\x12$\n" +
	"\x1fk_EMsgGC_GlobalGame_Unsubscribe\x10\xd1G\x12\x1d\n" +
	"\x18k_EMsgGC_GlobalGame_Play\x10\xd2G\x12,\n" +
	"'k_EMsgGCCStrike15_v2_AcknowledgePenalty\x10\xd3G\x126\n" +
	"1k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin\x10\xd4G\x12.\n" +
	")k_EMsgGCCStrike15_v2_GC2ClientGlobalStats\x10\xd5G\x12/\n" +
	"*k_EMsgGCCStrike15_v2_Client2GCStreamUnlock\x10\xd6G\x122\n" +
	"-k_EMsgGCCStrike15_v2_FantasyRequestClientData\x10\xd7G\x121\n" +
	",k_EMsgGCCStrike15_v2_FantasyUpdateClientData\x10\xd8G\x127\n" +
	"2k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket\x10\xd9G\x121\n" +
	",k_EMsgGCCStrike15_v2_ClientToGCRequestTicket\x10\xdaG\x122\n" +
	"-k_EMsgGCCStrike15_v2_ClientToGCRequestElevate\x10\xdbG\x12$\n" +
	"\x1fk_EMsgGCCStrike15_v2_GlobalChat\x10\xdcG\x12.\n" +
	")k_EMsgGCCStrike15_v2_GlobalChat_Subscribe\x10\xddG\x120\n" +
	"+k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe\x10\xdeG\x12+\n" +
	"&k_EMsgGCCStrike15_v2_ClientAuthKeyCode\x10\xdfG\x12(\n" +
	"#k_EMsgGCCStrike15_v2_GotvSyncPacket\x10\xe0G\x12/\n" +
	"*k_EMsgGCCStrike15_v2_ClientPlayerDecalSign\x10\xe1G\x12/\n" +
	"*k_EMsgGCCStrike15_v2_ClientLogonFatalError\x10\xe3G\x12)\n" +
	"$k_EMsgGCCStrike15_v2_ClientPollState\x10\xe4G\x12(\n" +
	"#k_EMsgGCCStrike15_v2_Party_Register\x10\xe5G\x12*\n" +
	"%k_EMsgGCCStrike15_v2_Party_Unregister\x10\xe6G\x12&\n" +
	"!k_EMsgGCCStrike15_v2_Party_Search\x10\xe7G\x12&\n" +
	"!k_EMsgGCCStrike15_v2_Party_Invite\x10\xe8G\x120\n" +
	"+k_EMsgGCCStrike15_v2_Account_RequestCoPlays\x10\xe9G\x12,\n" +
	"'k_EMsgGCCStrike15_v2_ClientGCRankUpdate\x10\xeaG\x12-\n" +
	"(k_EMsgGCCStrike15_v2_ClientRequestOffers\x10\xebG\x12.\n" +
	")k_EMsgGCCStrike15_v2_ClientAccountBalance\x10\xecG\x12.\n" +
	")k_EMsgGCCStrike15_v2_ClientPartyJoinRelay\x10\xedG\x12,\n" +
	"'k_EMsgGCCStrike15_v2_ClientPartyWarning\x10\xeeG\x12:\n" +
	"5k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial\x10\xefG\x12*\n" +
	"%k_EMsgGCCStrike15_v2_SetEventFavorite\x10\xf0G\x123\n" +
	".k_EMsgGCCStrike15_v2_GetEventFavorites_Request\x10\xf1G\x12*\n" +
	"%k_EMsgGCCStrike15_v2_ClientPerfReport\x10\xf2G\x124\n" +
	"/k_EMsgGCCStrike15_v2_GetEventFavorites_Response\x10\xf3G\x12/\n" +
	"*k_EMsgGCCStrike15_v2_ClientRequestSouvenir\x10\xf4G\x120\n" +
	"+k_EMsgGCCStrike15_v2_ClientReportValidation\x10\xf5G\x123\n" +
	".k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode\x10\xf6G\x124\n" +
	"/k_EMsgGCCStrike15_v2_GC2ClientRequestValidation\x10\xf7G*\x98\x01\n" +
	"\x12ECsgoSteamUserStat\x12&\n" +
	"\"k_ECsgoSteamUserStat_XpEarnedGames\x10\x01\x12-\n" +
	")k_ECsgoSteamUserStat_MatchWinsCompetitive\x10\x02\x12+\n" +
	"'k_ECsgoSteamUserStat_SurvivedDangerZone\x10\x03*\xa1\x01\n" +
	"\x17EClientReportingVersion\x12(\n" +
	"$k_EClientReportingVersion_OldVersion\x10\x00\x12)\n" +
	"%k_EClientReportingVersion_BetaVersion\x10\x01\x121\n" +
	"-k_EClientReportingVersion_SupportsTrustedMode\x10\x02B\x05H\x01\x80\x01\x00"

var (
	file_cstrike15_gcmessages_proto_rawDescOnce sync.Once
	file_cstrike15_gcmessages_proto_rawDescData []byte
)

func file_cstrike15_gcmessages_proto_rawDescGZIP() []byte {
	file_cstrike15_gcmessages_proto_rawDescOnce.Do(func() {
		file_cstrike15_gcmessages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cstrike15_gcmessages_proto_rawDesc), len(file_cstrike15_gcmessages_proto_rawDesc)))
	})
	return file_cstrike15_gcmessages_proto_rawDescData
}

var file_cstrike15_gcmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cstrike15_gcmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 153)
var file_cstrike15_gcmessages_proto_goTypes = []any{
	(ECsgoGCMsg)(0),                                                         // 0: ECsgoGCMsg
	(ECsgoSteamUserStat)(0),                                                 // 1: ECsgoSteamUserStat
	(EClientReportingVersion)(0),                                            // 2: EClientReportingVersion
	(*GameServerPing)(nil),                                                  // 3: GameServerPing
	(*DataCenterPing)(nil),                                                  // 4: DataCenterPing
	(*DetailedSearchStatistic)(nil),                                         // 5: DetailedSearchStatistic
	(*TournamentPlayer)(nil),                                                // 6: TournamentPlayer
	(*TournamentTeam)(nil),                                                  // 7: TournamentTeam
	(*TournamentEvent)(nil),                                                 // 8: TournamentEvent
	(*GlobalStatistics)(nil),                                                // 9: GlobalStatistics
	(*OperationalStatisticDescription)(nil),                                 // 10: OperationalStatisticDescription
	(*OperationalStatisticElement)(nil),                                     // 11: OperationalStatisticElement
	(*OperationalStatisticsPacket)(nil),                                     // 12: OperationalStatisticsPacket
	(*PlayerRankingInfo)(nil),                                               // 13: PlayerRankingInfo
	(*PlayerCommendationInfo)(nil),                                          // 14: PlayerCommendationInfo
	(*PlayerMedalsInfo)(nil),                                                // 15: PlayerMedalsInfo
	(*AccountActivity)(nil),                                                 // 16: AccountActivity
	(*TournamentMatchSetup)(nil),                                            // 17: TournamentMatchSetup
	(*ServerHltvInfo)(nil),                                                  // 18: ServerHltvInfo
	(*IpAddressMask)(nil),                                                   // 19: IpAddressMask
	(*CMsgCsgoSteamUserStatChange)(nil),                                     // 20: CMsgCsgoSteamUserStatChange
	(*XpProgressData)(nil),                                                  // 21: XpProgressData
	(*MatchEndItemUpdates)(nil),                                             // 22: MatchEndItemUpdates
	(*ScoreLeaderboardData)(nil),                                            // 23: ScoreLeaderboardData
	(*PlayerQuestData)(nil),                                                 // 24: PlayerQuestData
	(*CMsgGC_ServerQuestUpdateData)(nil),                                    // 25: CMsgGC_ServerQuestUpdateData
	(*CMsgGCCStrike15V2_MatchmakingGCOperationalStats)(nil),                 // 26: CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
	(*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm)(nil),                   // 27: CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
	(*CMsgGCCStrike15V2_GC2ServerReservationUpdate)(nil),                    // 28: CMsgGCCStrike15_v2_GC2ServerReservationUpdate
	(*CMsgGCCStrike15V2_MatchmakingStart)(nil),                              // 29: CMsgGCCStrike15_v2_MatchmakingStart
	(*CMsgGCCStrike15V2_MatchmakingStop)(nil),                               // 30: CMsgGCCStrike15_v2_MatchmakingStop
	(*CMsgGCCStrike15V2_MatchmakingClient2ServerPing)(nil),                  // 31: CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate)(nil),                    // 32: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
	(*CDataGCCStrike15V2_TournamentMatchDraft)(nil),                         // 33: CDataGCCStrike15_v2_TournamentMatchDraft
	(*CPreMatchInfoData)(nil),                                               // 34: CPreMatchInfoData
	(*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve)(nil),                   // 35: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	(*CMsgGCCStrike15V2_MatchmakingServerReservationResponse)(nil),          // 36: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve)(nil),                   // 37: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	(*CMsgGCCStrike15V2_MatchmakingServerRoundStats)(nil),                   // 38: CMsgGCCStrike15_v2_MatchmakingServerRoundStats
	(*CMsgGCCStrike15V2_MatchmakingServerMatchEnd)(nil),                     // 39: CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
	(*CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial)(nil),              // 40: CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
	(*CMsgGCCStrike15V2_MatchmakingClient2GCHello)(nil),                     // 41: CMsgGCCStrike15_v2_MatchmakingClient2GCHello
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientHello)(nil),                     // 42: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
	(*CMsgGCCStrike15V2_AccountPrivacySettings)(nil),                        // 43: CMsgGCCStrike15_v2_AccountPrivacySettings
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon)(nil),                   // 44: CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
	(*CMsgGCCStrike15V2_MatchmakingServer2GCKick)(nil),                      // 45: CMsgGCCStrike15_v2_MatchmakingServer2GCKick
	(*CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate)(nil),                // 46: CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
	(*CMsgGCCStrike15V2_ClientGCRankUpdate)(nil),                            // 47: CMsgGCCStrike15_v2_ClientGCRankUpdate
	(*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate)(nil),              // 48: CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
	(*CMsgGCCStrike15V2_ServerNotificationForUserPenalty)(nil),              // 49: CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
	(*CMsgGCCStrike15V2_ClientReportPlayer)(nil),                            // 50: CMsgGCCStrike15_v2_ClientReportPlayer
	(*CMsgGCCStrike15V2_ClientCommendPlayer)(nil),                           // 51: CMsgGCCStrike15_v2_ClientCommendPlayer
	(*CMsgGCCStrike15V2_ClientReportServer)(nil),                            // 52: CMsgGCCStrike15_v2_ClientReportServer
	(*CMsgGCCStrike15V2_ClientReportResponse)(nil),                          // 53: CMsgGCCStrike15_v2_ClientReportResponse
	(*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends)(nil),                 // 54: CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
	(*WatchableMatchInfo)(nil),                                              // 55: WatchableMatchInfo
	(*CMsgGCCStrike15V2_ClientRequestJoinFriendData)(nil),                   // 56: CMsgGCCStrike15_v2_ClientRequestJoinFriendData
	(*CMsgGCCStrike15V2_ClientRequestJoinServerData)(nil),                   // 57: CMsgGCCStrike15_v2_ClientRequestJoinServerData
	(*CMsgGCCstrike15V2_ClientRequestNewMission)(nil),                       // 58: CMsgGCCstrike15_v2_ClientRequestNewMission
	(*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded)(nil),                     // 59: CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
	(*CMsgGCCStrike15V2_WatchInfoUsers)(nil),                                // 60: CMsgGCCStrike15_v2_WatchInfoUsers
	(*CMsgGCCStrike15V2_ClientRequestPlayersProfile)(nil),                   // 61: CMsgGCCStrike15_v2_ClientRequestPlayersProfile
	(*CMsgGCCStrike15V2_PlayersProfile)(nil),                                // 62: CMsgGCCStrike15_v2_PlayersProfile
	(*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate)(nil),                     // 63: CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
	(*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment)(nil),                 // 64: CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
	(*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus)(nil),                     // 65: CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
	(*CClientHeaderOverwatchEvidence)(nil),                                  // 66: CClientHeaderOverwatchEvidence
	(*CMsgGCCStrike15V2_GC2ClientTextMsg)(nil),                              // 67: CMsgGCCStrike15_v2_GC2ClientTextMsg
	(*CMsgGCCStrike15V2_Client2GCTextMsg)(nil),                              // 68: CMsgGCCStrike15_v2_Client2GCTextMsg
	(*CMsgGCCStrike15V2_MatchEndRunRewardDrops)(nil),                        // 69: CMsgGCCStrike15_v2_MatchEndRunRewardDrops
	(*CEconItemPreviewDataBlock)(nil),                                       // 70: CEconItemPreviewDataBlock
	(*CMsgGCCStrike15V2_MatchEndRewardDropsNotification)(nil),               // 71: CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
	(*CMsgItemAcknowledged)(nil),                                            // 72: CMsgItemAcknowledged
	(*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest)(nil),          // 73: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
	(*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse)(nil),         // 74: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
	(*CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification)(nil),        // 75: CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
	(*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames)(nil),              // 76: CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
	(*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser)(nil),               // 77: CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
	(*CMsgGCCStrike15V2_MatchListRequestRecentUserGames)(nil),               // 78: CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
	(*CMsgGCCStrike15V2_MatchListRequestTournamentGames)(nil),               // 79: CMsgGCCStrike15_v2_MatchListRequestTournamentGames
	(*CMsgGCCStrike15V2_MatchListRequestFullGameInfo)(nil),                  // 80: CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
	(*CDataGCCStrike15V2_MatchInfo)(nil),                                    // 81: CDataGCCStrike15_v2_MatchInfo
	(*CDataGCCStrike15V2_TournamentGroupTeam)(nil),                          // 82: CDataGCCStrike15_v2_TournamentGroupTeam
	(*CDataGCCStrike15V2_TournamentGroup)(nil),                              // 83: CDataGCCStrike15_v2_TournamentGroup
	(*CDataGCCStrike15V2_TournamentSection)(nil),                            // 84: CDataGCCStrike15_v2_TournamentSection
	(*CDataGCCStrike15V2_TournamentInfo)(nil),                               // 85: CDataGCCStrike15_v2_TournamentInfo
	(*CMsgGCCStrike15V2_MatchList)(nil),                                     // 86: CMsgGCCStrike15_v2_MatchList
	(*CMsgGCCStrike15V2_Predictions)(nil),                                   // 87: CMsgGCCStrike15_v2_Predictions
	(*CMsgGCCStrike15V2_Fantasy)(nil),                                       // 88: CMsgGCCStrike15_v2_Fantasy
	(*CAttribute_String)(nil),                                               // 89: CAttribute_String
	(*CMsgGCToGCReloadVersions)(nil),                                        // 90: CMsgGCToGCReloadVersions
	(*CMsgCStrike15Welcome)(nil),                                            // 91: CMsgCStrike15Welcome
	(*CMsgGCCStrike15V2_ClientVarValueNotificationInfo)(nil),                // 92: CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
	(*CMsgGCCStrike15V2_ServerVarValueNotificationInfo)(nil),                // 93: CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
	(*CMsgGCCStrike15V2_GiftsLeaderboardRequest)(nil),                       // 94: CMsgGCCStrike15_v2_GiftsLeaderboardRequest
	(*CMsgGCCStrike15V2_GiftsLeaderboardResponse)(nil),                      // 95: CMsgGCCStrike15_v2_GiftsLeaderboardResponse
	(*CMsgGCCStrike15V2_ClientSubmitSurveyVote)(nil),                        // 96: CMsgGCCStrike15_v2_ClientSubmitSurveyVote
	(*CMsgGCCStrike15V2_Server2GCClientValidate)(nil),                       // 97: CMsgGCCStrike15_v2_Server2GCClientValidate
	(*CMsgGCCStrike15V2_Server2GCPureServerValidationFailure)(nil),          // 98: CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
	(*CMsgGCCStrike15V2_GC2ClientTournamentInfo)(nil),                       // 99: CMsgGCCStrike15_v2_GC2ClientTournamentInfo
	(*CSOEconCoupon)(nil),                                                   // 100: CSOEconCoupon
	(*CSOQuestProgress)(nil),                                                // 101: CSOQuestProgress
	(*CSOAccountSeasonalOperation)(nil),                                     // 102: CSOAccountSeasonalOperation
	(*CSOPersonaDataPublic)(nil),                                            // 103: CSOPersonaDataPublic
	(*CMsgGC_GlobalGame_Subscribe)(nil),                                     // 104: CMsgGC_GlobalGame_Subscribe
	(*CMsgGC_GlobalGame_Unsubscribe)(nil),                                   // 105: CMsgGC_GlobalGame_Unsubscribe
	(*CMsgGC_GlobalGame_Play)(nil),                                          // 106: CMsgGC_GlobalGame_Play
	(*CMsgGCCStrike15V2_AcknowledgePenalty)(nil),                            // 107: CMsgGCCStrike15_v2_AcknowledgePenalty
	(*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin)(nil),                  // 108: CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
	(*CMsgGCCStrike15V2_Client2GCStreamUnlock)(nil),                         // 109: CMsgGCCStrike15_v2_Client2GCStreamUnlock
	(*CMsgGCCStrike15V2_ClientToGCRequestElevate)(nil),                      // 110: CMsgGCCStrike15_v2_ClientToGCRequestElevate
	(*CMsgGCCStrike15V2_ClientToGCChat)(nil),                                // 111: CMsgGCCStrike15_v2_ClientToGCChat
	(*CMsgGCCStrike15V2_GCToClientChat)(nil),                                // 112: CMsgGCCStrike15_v2_GCToClientChat
	(*CMsgGCCStrike15V2_ClientAuthKeyCode)(nil),                             // 113: CMsgGCCStrike15_v2_ClientAuthKeyCode
	(*CMsgGCCStrike15_GotvSyncPacket)(nil),                                  // 114: CMsgGCCStrike15_GotvSyncPacket
	(*PlayerDecalDigitalSignature)(nil),                                     // 115: PlayerDecalDigitalSignature
	(*CMsgGCCStrike15V2_ClientPlayerDecalSign)(nil),                         // 116: CMsgGCCStrike15_v2_ClientPlayerDecalSign
	(*CMsgGCCStrike15V2_ClientLogonFatalError)(nil),                         // 117: CMsgGCCStrike15_v2_ClientLogonFatalError
	(*CMsgGCCStrike15V2_ClientPollState)(nil),                               // 118: CMsgGCCStrike15_v2_ClientPollState
	(*CMsgGCCStrike15V2_Party_Register)(nil),                                // 119: CMsgGCCStrike15_v2_Party_Register
	(*CMsgGCCStrike15V2_Party_Search)(nil),                                  // 120: CMsgGCCStrike15_v2_Party_Search
	(*CMsgGCCStrike15V2_Party_SearchResults)(nil),                           // 121: CMsgGCCStrike15_v2_Party_SearchResults
	(*CMsgGCCStrike15V2_Party_Invite)(nil),                                  // 122: CMsgGCCStrike15_v2_Party_Invite
	(*CMsgGCCStrike15V2_Account_RequestCoPlays)(nil),                        // 123: CMsgGCCStrike15_v2_Account_RequestCoPlays
	(*CMsgGCCStrike15V2_ClientToGCRequestTicket)(nil),                       // 124: CMsgGCCStrike15_v2_ClientToGCRequestTicket
	(*CMsgGCToClientSteamDatagramTicket)(nil),                               // 125: CMsgGCToClientSteamDatagramTicket
	(*CMsgGCCStrike15V2_ClientRequestOffers)(nil),                           // 126: CMsgGCCStrike15_v2_ClientRequestOffers
	(*CMsgGCCStrike15V2_ClientRequestSouvenir)(nil),                         // 127: CMsgGCCStrike15_v2_ClientRequestSouvenir
	(*CMsgGCCStrike15V2_ClientAccountBalance)(nil),                          // 128: CMsgGCCStrike15_v2_ClientAccountBalance
	(*CMsgGCCStrike15V2_ClientPartyJoinRelay)(nil),                          // 129: CMsgGCCStrike15_v2_ClientPartyJoinRelay
	(*CMsgGCCStrike15V2_ClientPartyWarning)(nil),                            // 130: CMsgGCCStrike15_v2_ClientPartyWarning
	(*CMsgGCCStrike15V2_SetEventFavorite)(nil),                              // 131: CMsgGCCStrike15_v2_SetEventFavorite
	(*CMsgGCCStrike15V2_GetEventFavorites_Request)(nil),                     // 132: CMsgGCCStrike15_v2_GetEventFavorites_Request
	(*CMsgGCCStrike15V2_GetEventFavorites_Response)(nil),                    // 133: CMsgGCCStrike15_v2_GetEventFavorites_Response
	(*CMsgGCCStrike15V2_ClientPerfReport)(nil),                              // 134: CMsgGCCStrike15_v2_ClientPerfReport
	(*CMsgGCCStrike15V2_ClientReportValidation)(nil),                        // 135: CMsgGCCStrike15_v2_ClientReportValidation
	(*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode)(nil),                     // 136: CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode
	(*CMsgGCCStrike15V2_GC2ClientRequestValidation)(nil),                    // 137: CMsgGCCStrike15_v2_GC2ClientRequestValidation
	(*ScoreLeaderboardData_Entry)(nil),                                      // 138: ScoreLeaderboardData.Entry
	(*ScoreLeaderboardData_AccountEntries)(nil),                             // 139: ScoreLeaderboardData.AccountEntries
	(*PlayerQuestData_QuestItemData)(nil),                                   // 140: PlayerQuestData.QuestItemData
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note)(nil),               // 141: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
	(*CDataGCCStrike15V2_TournamentMatchDraft_Entry)(nil),                   // 142: CDataGCCStrike15_v2_TournamentMatchDraft.Entry
	(*CPreMatchInfoData_TeamStats)(nil),                                     // 143: CPreMatchInfoData.TeamStats
	(*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo)(nil),          // 144: CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
	(*CMsgGCCStrike15V2_AccountPrivacySettings_Setting)(nil),                // 145: CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
	(*CEconItemPreviewDataBlock_Sticker)(nil),                               // 146: CEconItemPreviewDataBlock.Sticker
	(*CDataGCCStrike15V2_TournamentGroup_Picks)(nil),                        // 147: CDataGCCStrike15_v2_TournamentGroup.Picks
	(*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick)(nil),                // 148: CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
	(*CMsgGCCStrike15V2_Fantasy_FantasySlot)(nil),                           // 149: CMsgGCCStrike15_v2_Fantasy.FantasySlot
	(*CMsgGCCStrike15V2_Fantasy_FantasyTeam)(nil),                           // 150: CMsgGCCStrike15_v2_Fantasy.FantasyTeam
	(*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry)(nil), // 151: CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
	(*CMsgGCCStrike15V2_Party_SearchResults_Entry)(nil),                     // 152: CMsgGCCStrike15_v2_Party_SearchResults.Entry
	(*CMsgGCCStrike15V2_Account_RequestCoPlays_Player)(nil),                 // 153: CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
	(*CMsgGCCStrike15V2_ClientPartyWarning_Entry)(nil),                      // 154: CMsgGCCStrike15_v2_ClientPartyWarning.Entry
	(*CMsgGCCStrike15V2_ClientPerfReport_Entry)(nil),                        // 155: CMsgGCCStrike15_v2_ClientPerfReport.Entry
	(*CEngineGotvSyncPacket)(nil),                   // 156: CEngineGotvSyncPacket
}
var file_cstrike15_gcmessages_proto_depIdxs = []int32{
	6,   // 0: TournamentTeam.players:type_name -> TournamentPlayer
	5,   // 1: GlobalStatistics.search_statistics:type_name -> DetailedSearchStatistic
	11,  // 2: OperationalStatisticsPacket.values:type_name -> OperationalStatisticElement
	139, // 3: ScoreLeaderboardData.accountentries:type_name -> ScoreLeaderboardData.AccountEntries
	138, // 4: ScoreLeaderboardData.matchentries:type_name -> ScoreLeaderboardData.Entry
	140, // 5: PlayerQuestData.quest_item_data:type_name -> PlayerQuestData.QuestItemData
	21,  // 6: PlayerQuestData.xp_progress_data:type_name -> XpProgressData
	22,  // 7: PlayerQuestData.item_updates:type_name -> MatchEndItemUpdates
	20,  // 8: PlayerQuestData.userstatchanges:type_name -> CMsgCsgoSteamUserStatChange
	24,  // 9: CMsgGC_ServerQuestUpdateData.player_quest_data:type_name -> PlayerQuestData
	23,  // 10: CMsgGC_ServerQuestUpdateData.missionlbsdata:type_name -> ScoreLeaderboardData
	10,  // 11: CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.namekeys:type_name -> OperationalStatisticDescription
	12,  // 12: CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packets:type_name -> OperationalStatisticsPacket
	17,  // 13: CMsgGCCStrike15_v2_MatchmakingStart.tournament_match:type_name -> TournamentMatchSetup
	3,   // 14: CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.gameserverpings:type_name -> GameServerPing
	4,   // 15: CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.data_center_pings:type_name -> DataCenterPing
	9,   // 16: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.global_stats:type_name -> GlobalStatistics
	19,  // 17: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.server_ipaddress_mask:type_name -> IpAddressMask
	141, // 18: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.notes:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
	142, // 19: CDataGCCStrike15_v2_TournamentMatchDraft.drafts:type_name -> CDataGCCStrike15_v2_TournamentMatchDraft.Entry
	33,  // 20: CPreMatchInfoData.draft:type_name -> CDataGCCStrike15_v2_TournamentMatchDraft
	143, // 21: CPreMatchInfoData.stats:type_name -> CPreMatchInfoData.TeamStats
	13,  // 22: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.rankings:type_name -> PlayerRankingInfo
	19,  // 23: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.whitelist:type_name -> IpAddressMask
	8,   // 24: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_event:type_name -> TournamentEvent
	7,   // 25: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_teams:type_name -> TournamentTeam
	34,  // 26: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.pre_match_data:type_name -> CPreMatchInfoData
	35,  // 27: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservation:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	18,  // 28: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tv_info:type_name -> ServerHltvInfo
	35,  // 29: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservation:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	35,  // 30: CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	27,  // 31: CMsgGCCStrike15_v2_MatchmakingServerRoundStats.confirm:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
	144, // 32: CMsgGCCStrike15_v2_MatchmakingServerRoundStats.drop_info:type_name -> CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
	38,  // 33: CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.stats:type_name -> CMsgGCCStrike15_v2_MatchmakingServerRoundStats
	27,  // 34: CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.confirm:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
	25,  // 35: CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.match_end_quest_data:type_name -> CMsgGC_ServerQuestUpdateData
	35,  // 36: CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.reservation:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	27,  // 37: CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.confirm:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
	25,  // 38: CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.completed_player_quest_data:type_name -> CMsgGC_ServerQuestUpdateData
	37,  // 39: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ongoingmatch:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	9,   // 40: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.global_stats:type_name -> GlobalStatistics
	13,  // 41: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ranking:type_name -> PlayerRankingInfo
	14,  // 42: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.commendation:type_name -> PlayerCommendationInfo
	15,  // 43: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.medals:type_name -> PlayerMedalsInfo
	8,   // 44: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event:type_name -> TournamentEvent
	7,   // 45: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_teams:type_name -> TournamentTeam
	7,   // 46: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_team:type_name -> TournamentTeam
	8,   // 47: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_stages:type_name -> TournamentEvent
	16,  // 48: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.activity:type_name -> AccountActivity
	13,  // 49: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.rankings:type_name -> PlayerRankingInfo
	145, // 50: CMsgGCCStrike15_v2_AccountPrivacySettings.settings:type_name -> CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
	37,  // 51: CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.abandoned_match:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	35,  // 52: CMsgGCCStrike15_v2_MatchmakingServer2GCKick.reservation:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	13,  // 53: CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.rankings:type_name -> PlayerRankingInfo
	13,  // 54: CMsgGCCStrike15_v2_ClientGCRankUpdate.rankings:type_name -> PlayerRankingInfo
	14,  // 55: CMsgGCCStrike15_v2_ClientCommendPlayer.commendation:type_name -> PlayerCommendationInfo
	4,   // 56: CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.data_center_pings:type_name -> DataCenterPing
	37,  // 57: CMsgGCCStrike15_v2_ClientRequestJoinFriendData.res:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	37,  // 58: CMsgGCCStrike15_v2_ClientRequestJoinServerData.res:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	21,  // 59: CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.xp_progress_data:type_name -> XpProgressData
	55,  // 60: CMsgGCCStrike15_v2_WatchInfoUsers.watchable_match_infos:type_name -> WatchableMatchInfo
	42,  // 61: CMsgGCCStrike15_v2_PlayersProfile.account_profiles:type_name -> CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
	36,  // 62: CMsgGCCStrike15_v2_MatchEndRunRewardDrops.serverinfo:type_name -> CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
	25,  // 63: CMsgGCCStrike15_v2_MatchEndRunRewardDrops.match_end_quest_data:type_name -> CMsgGC_ServerQuestUpdateData
	146, // 64: CEconItemPreviewDataBlock.stickers:type_name -> CEconItemPreviewDataBlock.Sticker
	70,  // 65: CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.iteminfo:type_name -> CEconItemPreviewDataBlock
	70,  // 66: CMsgItemAcknowledged.iteminfo:type_name -> CEconItemPreviewDataBlock
	70,  // 67: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.iteminfo:type_name -> CEconItemPreviewDataBlock
	55,  // 68: CDataGCCStrike15_v2_MatchInfo.watchablematchinfo:type_name -> WatchableMatchInfo
	38,  // 69: CDataGCCStrike15_v2_MatchInfo.roundstats_legacy:type_name -> CMsgGCCStrike15_v2_MatchmakingServerRoundStats
	38,  // 70: CDataGCCStrike15_v2_MatchInfo.roundstatsall:type_name -> CMsgGCCStrike15_v2_MatchmakingServerRoundStats
	82,  // 71: CDataGCCStrike15_v2_TournamentGroup.teams:type_name -> CDataGCCStrike15_v2_TournamentGroupTeam
	147, // 72: CDataGCCStrike15_v2_TournamentGroup.picks:type_name -> CDataGCCStrike15_v2_TournamentGroup.Picks
	83,  // 73: CDataGCCStrike15_v2_TournamentSection.groups:type_name -> CDataGCCStrike15_v2_TournamentGroup
	84,  // 74: CDataGCCStrike15_v2_TournamentInfo.sections:type_name -> CDataGCCStrike15_v2_TournamentSection
	8,   // 75: CDataGCCStrike15_v2_TournamentInfo.tournament_event:type_name -> TournamentEvent
	7,   // 76: CDataGCCStrike15_v2_TournamentInfo.tournament_teams:type_name -> TournamentTeam
	81,  // 77: CMsgGCCStrike15_v2_MatchList.matches:type_name -> CDataGCCStrike15_v2_MatchInfo
	7,   // 78: CMsgGCCStrike15_v2_MatchList.streams:type_name -> TournamentTeam
	85,  // 79: CMsgGCCStrike15_v2_MatchList.tournamentinfo:type_name -> CDataGCCStrike15_v2_TournamentInfo
	148, // 80: CMsgGCCStrike15_v2_Predictions.group_match_team_picks:type_name -> CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
	150, // 81: CMsgGCCStrike15_v2_Fantasy.teams:type_name -> CMsgGCCStrike15_v2_Fantasy.FantasyTeam
	151, // 82: CMsgGCCStrike15_v2_GiftsLeaderboardResponse.entries:type_name -> CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
	14,  // 83: CSOPersonaDataPublic.commendation:type_name -> PlayerCommendationInfo
	156, // 84: CMsgGCCStrike15_GotvSyncPacket.data:type_name -> CEngineGotvSyncPacket
	115, // 85: CMsgGCCStrike15_v2_ClientPlayerDecalSign.data:type_name -> PlayerDecalDigitalSignature
	152, // 86: CMsgGCCStrike15_v2_Party_SearchResults.entries:type_name -> CMsgGCCStrike15_v2_Party_SearchResults.Entry
	153, // 87: CMsgGCCStrike15_v2_Account_RequestCoPlays.players:type_name -> CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
	154, // 88: CMsgGCCStrike15_v2_ClientPartyWarning.entries:type_name -> CMsgGCCStrike15_v2_ClientPartyWarning.Entry
	155, // 89: CMsgGCCStrike15_v2_ClientPerfReport.entries:type_name -> CMsgGCCStrike15_v2_ClientPerfReport.Entry
	138, // 90: ScoreLeaderboardData.AccountEntries.entries:type_name -> ScoreLeaderboardData.Entry
	149, // 91: CMsgGCCStrike15_v2_Fantasy.FantasyTeam.slots:type_name -> CMsgGCCStrike15_v2_Fantasy.FantasySlot
	92,  // [92:92] is the sub-list for method output_type
	92,  // [92:92] is the sub-list for method input_type
	92,  // [92:92] is the sub-list for extension type_name
	92,  // [92:92] is the sub-list for extension extendee
	0,   // [0:92] is the sub-list for field type_name
}

func init() { file_cstrike15_gcmessages_proto_init() }
func file_cstrike15_gcmessages_proto_init() {
	if File_cstrike15_gcmessages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cstrike15_gcmessages_proto_rawDesc), len(file_cstrike15_gcmessages_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   153,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cstrike15_gcmessages_proto_goTypes,
		DependencyIndexes: file_cstrike15_gcmessages_proto_depIdxs,
		EnumInfos:         file_cstrike15_gcmessages_proto_enumTypes,
		MessageInfos:      file_cstrike15_gcmessages_proto_msgTypes,
	}.Build()
	File_cstrike15_gcmessages_proto = out.File
	file_cstrike15_gcmessages_proto_goTypes = nil
	file_cstrike15_gcmessages_proto_depIdxs = nil
}
