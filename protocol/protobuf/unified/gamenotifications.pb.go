// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: steammessages_gamenotifications.steamclient.proto

package unified

import (
	
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CGameNotifications_Variable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_Variable) Reset() {
	*x = CGameNotifications_Variable{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_Variable) ProtoMessage() {}

func (x *CGameNotifications_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_Variable.ProtoReflect.Descriptor instead.
func (*CGameNotifications_Variable) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CGameNotifications_Variable) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CGameNotifications_Variable) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CGameNotifications_LocalizedText struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Token         *string                        `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Variables     []*CGameNotifications_Variable `protobuf:"bytes,2,rep,name=variables" json:"variables,omitempty"`
	RenderedText  *string                        `protobuf:"bytes,3,opt,name=rendered_text,json=renderedText" json:"rendered_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_LocalizedText) Reset() {
	*x = CGameNotifications_LocalizedText{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_LocalizedText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_LocalizedText) ProtoMessage() {}

func (x *CGameNotifications_LocalizedText) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_LocalizedText.ProtoReflect.Descriptor instead.
func (*CGameNotifications_LocalizedText) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CGameNotifications_LocalizedText) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *CGameNotifications_LocalizedText) GetVariables() []*CGameNotifications_Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CGameNotifications_LocalizedText) GetRenderedText() string {
	if x != nil && x.RenderedText != nil {
		return *x.RenderedText
	}
	return ""
}

type CGameNotifications_UserStatus struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Steamid       *uint64                           `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	State         *string                           `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Title         *CGameNotifications_LocalizedText `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Message       *CGameNotifications_LocalizedText `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_UserStatus) Reset() {
	*x = CGameNotifications_UserStatus{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_UserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_UserStatus) ProtoMessage() {}

func (x *CGameNotifications_UserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_UserStatus.ProtoReflect.Descriptor instead.
func (*CGameNotifications_UserStatus) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CGameNotifications_UserStatus) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CGameNotifications_UserStatus) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CGameNotifications_UserStatus) GetTitle() *CGameNotifications_LocalizedText {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *CGameNotifications_UserStatus) GetMessage() *CGameNotifications_LocalizedText {
	if x != nil {
		return x.Message
	}
	return nil
}

type CGameNotifications_CreateSession_Request struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Appid         *uint32                           `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Context       *uint64                           `protobuf:"varint,2,opt,name=context" json:"context,omitempty"`
	Title         *CGameNotifications_LocalizedText `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Users         []*CGameNotifications_UserStatus  `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	Steamid       *uint64                           `protobuf:"fixed64,5,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_CreateSession_Request) Reset() {
	*x = CGameNotifications_CreateSession_Request{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_CreateSession_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_CreateSession_Request) ProtoMessage() {}

func (x *CGameNotifications_CreateSession_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_CreateSession_Request.ProtoReflect.Descriptor instead.
func (*CGameNotifications_CreateSession_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CGameNotifications_CreateSession_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameNotifications_CreateSession_Request) GetContext() uint64 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *CGameNotifications_CreateSession_Request) GetTitle() *CGameNotifications_LocalizedText {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *CGameNotifications_CreateSession_Request) GetUsers() []*CGameNotifications_UserStatus {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *CGameNotifications_CreateSession_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CGameNotifications_CreateSession_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessionid     *uint64                `protobuf:"varint,1,opt,name=sessionid" json:"sessionid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_CreateSession_Response) Reset() {
	*x = CGameNotifications_CreateSession_Response{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_CreateSession_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_CreateSession_Response) ProtoMessage() {}

func (x *CGameNotifications_CreateSession_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_CreateSession_Response.ProtoReflect.Descriptor instead.
func (*CGameNotifications_CreateSession_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CGameNotifications_CreateSession_Response) GetSessionid() uint64 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

type CGameNotifications_DeleteSession_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessionid     *uint64                `protobuf:"varint,1,opt,name=sessionid" json:"sessionid,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Steamid       *uint64                `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_DeleteSession_Request) Reset() {
	*x = CGameNotifications_DeleteSession_Request{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_DeleteSession_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_DeleteSession_Request) ProtoMessage() {}

func (x *CGameNotifications_DeleteSession_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_DeleteSession_Request.ProtoReflect.Descriptor instead.
func (*CGameNotifications_DeleteSession_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CGameNotifications_DeleteSession_Request) GetSessionid() uint64 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *CGameNotifications_DeleteSession_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameNotifications_DeleteSession_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CGameNotifications_DeleteSession_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_DeleteSession_Response) Reset() {
	*x = CGameNotifications_DeleteSession_Response{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_DeleteSession_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_DeleteSession_Response) ProtoMessage() {}

func (x *CGameNotifications_DeleteSession_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_DeleteSession_Response.ProtoReflect.Descriptor instead.
func (*CGameNotifications_DeleteSession_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{6}
}

type CGameNotifications_UpdateSession_Request struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Sessionid     *uint64                           `protobuf:"varint,1,opt,name=sessionid" json:"sessionid,omitempty"`
	Appid         *uint32                           `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Title         *CGameNotifications_LocalizedText `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Users         []*CGameNotifications_UserStatus  `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	Steamid       *uint64                           `protobuf:"fixed64,6,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_UpdateSession_Request) Reset() {
	*x = CGameNotifications_UpdateSession_Request{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_UpdateSession_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_UpdateSession_Request) ProtoMessage() {}

func (x *CGameNotifications_UpdateSession_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_UpdateSession_Request.ProtoReflect.Descriptor instead.
func (*CGameNotifications_UpdateSession_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CGameNotifications_UpdateSession_Request) GetSessionid() uint64 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *CGameNotifications_UpdateSession_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameNotifications_UpdateSession_Request) GetTitle() *CGameNotifications_LocalizedText {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *CGameNotifications_UpdateSession_Request) GetUsers() []*CGameNotifications_UserStatus {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *CGameNotifications_UpdateSession_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CGameNotifications_UpdateSession_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_UpdateSession_Response) Reset() {
	*x = CGameNotifications_UpdateSession_Response{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_UpdateSession_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_UpdateSession_Response) ProtoMessage() {}

func (x *CGameNotifications_UpdateSession_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_UpdateSession_Response.ProtoReflect.Descriptor instead.
func (*CGameNotifications_UpdateSession_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{8}
}

type CGameNotifications_EnumerateSessions_Request struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Appid                  *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	IncludeAllUserMessages *bool                  `protobuf:"varint,3,opt,name=include_all_user_messages,json=includeAllUserMessages" json:"include_all_user_messages,omitempty"`
	IncludeAuthUserMessage *bool                  `protobuf:"varint,4,opt,name=include_auth_user_message,json=includeAuthUserMessage" json:"include_auth_user_message,omitempty"`
	Language               *string                `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CGameNotifications_EnumerateSessions_Request) Reset() {
	*x = CGameNotifications_EnumerateSessions_Request{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_EnumerateSessions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_EnumerateSessions_Request) ProtoMessage() {}

func (x *CGameNotifications_EnumerateSessions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_EnumerateSessions_Request.ProtoReflect.Descriptor instead.
func (*CGameNotifications_EnumerateSessions_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CGameNotifications_EnumerateSessions_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameNotifications_EnumerateSessions_Request) GetIncludeAllUserMessages() bool {
	if x != nil && x.IncludeAllUserMessages != nil {
		return *x.IncludeAllUserMessages
	}
	return false
}

func (x *CGameNotifications_EnumerateSessions_Request) GetIncludeAuthUserMessage() bool {
	if x != nil && x.IncludeAuthUserMessage != nil {
		return *x.IncludeAuthUserMessage
	}
	return false
}

func (x *CGameNotifications_EnumerateSessions_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CGameNotifications_Session struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Sessionid     *uint64                           `protobuf:"varint,1,opt,name=sessionid" json:"sessionid,omitempty"`
	Appid         *uint64                           `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Context       *uint64                           `protobuf:"varint,3,opt,name=context" json:"context,omitempty"`
	Title         *CGameNotifications_LocalizedText `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	TimeCreated   *uint32                           `protobuf:"varint,5,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeUpdated   *uint32                           `protobuf:"varint,6,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	UserStatus    []*CGameNotifications_UserStatus  `protobuf:"bytes,7,rep,name=user_status,json=userStatus" json:"user_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_Session) Reset() {
	*x = CGameNotifications_Session{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_Session) ProtoMessage() {}

func (x *CGameNotifications_Session) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_Session.ProtoReflect.Descriptor instead.
func (*CGameNotifications_Session) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CGameNotifications_Session) GetSessionid() uint64 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *CGameNotifications_Session) GetAppid() uint64 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameNotifications_Session) GetContext() uint64 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *CGameNotifications_Session) GetTitle() *CGameNotifications_LocalizedText {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *CGameNotifications_Session) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CGameNotifications_Session) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CGameNotifications_Session) GetUserStatus() []*CGameNotifications_UserStatus {
	if x != nil {
		return x.UserStatus
	}
	return nil
}

type CGameNotifications_EnumerateSessions_Response struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Sessions      []*CGameNotifications_Session `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_EnumerateSessions_Response) Reset() {
	*x = CGameNotifications_EnumerateSessions_Response{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_EnumerateSessions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_EnumerateSessions_Response) ProtoMessage() {}

func (x *CGameNotifications_EnumerateSessions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_EnumerateSessions_Response.ProtoReflect.Descriptor instead.
func (*CGameNotifications_EnumerateSessions_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CGameNotifications_EnumerateSessions_Response) GetSessions() []*CGameNotifications_Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type CGameNotifications_GetSessionDetails_Request struct {
	state         protoimpl.MessageState                                           `protogen:"open.v1"`
	Sessions      []*CGameNotifications_GetSessionDetails_Request_RequestedSession `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
	Appid         *uint32                                                          `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Language      *string                                                          `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_GetSessionDetails_Request) Reset() {
	*x = CGameNotifications_GetSessionDetails_Request{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_GetSessionDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_GetSessionDetails_Request) ProtoMessage() {}

func (x *CGameNotifications_GetSessionDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_GetSessionDetails_Request.ProtoReflect.Descriptor instead.
func (*CGameNotifications_GetSessionDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CGameNotifications_GetSessionDetails_Request) GetSessions() []*CGameNotifications_GetSessionDetails_Request_RequestedSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *CGameNotifications_GetSessionDetails_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameNotifications_GetSessionDetails_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CGameNotifications_GetSessionDetails_Response struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Sessions      []*CGameNotifications_Session `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_GetSessionDetails_Response) Reset() {
	*x = CGameNotifications_GetSessionDetails_Response{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_GetSessionDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_GetSessionDetails_Response) ProtoMessage() {}

func (x *CGameNotifications_GetSessionDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_GetSessionDetails_Response.ProtoReflect.Descriptor instead.
func (*CGameNotifications_GetSessionDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CGameNotifications_GetSessionDetails_Response) GetSessions() []*CGameNotifications_Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type GameNotificationSettings struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Appid              *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	AllowNotifications *bool                  `protobuf:"varint,2,opt,name=allow_notifications,json=allowNotifications" json:"allow_notifications,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GameNotificationSettings) Reset() {
	*x = GameNotificationSettings{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameNotificationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameNotificationSettings) ProtoMessage() {}

func (x *GameNotificationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameNotificationSettings.ProtoReflect.Descriptor instead.
func (*GameNotificationSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *GameNotificationSettings) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *GameNotificationSettings) GetAllowNotifications() bool {
	if x != nil && x.AllowNotifications != nil {
		return *x.AllowNotifications
	}
	return false
}

type CGameNotifications_UpdateNotificationSettings_Request struct {
	state                    protoimpl.MessageState      `protogen:"open.v1"`
	GameNotificationSettings []*GameNotificationSettings `protobuf:"bytes,1,rep,name=game_notification_settings,json=gameNotificationSettings" json:"game_notification_settings,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CGameNotifications_UpdateNotificationSettings_Request) Reset() {
	*x = CGameNotifications_UpdateNotificationSettings_Request{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_UpdateNotificationSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_UpdateNotificationSettings_Request) ProtoMessage() {}

func (x *CGameNotifications_UpdateNotificationSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_UpdateNotificationSettings_Request.ProtoReflect.Descriptor instead.
func (*CGameNotifications_UpdateNotificationSettings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CGameNotifications_UpdateNotificationSettings_Request) GetGameNotificationSettings() []*GameNotificationSettings {
	if x != nil {
		return x.GameNotificationSettings
	}
	return nil
}

type CGameNotifications_UpdateNotificationSettings_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_UpdateNotificationSettings_Response) Reset() {
	*x = CGameNotifications_UpdateNotificationSettings_Response{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_UpdateNotificationSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_UpdateNotificationSettings_Response) ProtoMessage() {}

func (x *CGameNotifications_UpdateNotificationSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_UpdateNotificationSettings_Response.ProtoReflect.Descriptor instead.
func (*CGameNotifications_UpdateNotificationSettings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{16}
}

type CGameNotifications_OnNotificationsRequested_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_OnNotificationsRequested_Notification) Reset() {
	*x = CGameNotifications_OnNotificationsRequested_Notification{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_OnNotificationsRequested_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_OnNotificationsRequested_Notification) ProtoMessage() {}

func (x *CGameNotifications_OnNotificationsRequested_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_OnNotificationsRequested_Notification.ProtoReflect.Descriptor instead.
func (*CGameNotifications_OnNotificationsRequested_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CGameNotifications_OnNotificationsRequested_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CGameNotifications_OnNotificationsRequested_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CGameNotifications_OnUserStatusChanged_Notification struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Steamid       *uint64                        `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Sessionid     *uint64                        `protobuf:"varint,2,opt,name=sessionid" json:"sessionid,omitempty"`
	Appid         *uint32                        `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	Status        *CGameNotifications_UserStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Removed       *bool                          `protobuf:"varint,5,opt,name=removed" json:"removed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameNotifications_OnUserStatusChanged_Notification) Reset() {
	*x = CGameNotifications_OnUserStatusChanged_Notification{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_OnUserStatusChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_OnUserStatusChanged_Notification) ProtoMessage() {}

func (x *CGameNotifications_OnUserStatusChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_OnUserStatusChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameNotifications_OnUserStatusChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CGameNotifications_OnUserStatusChanged_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CGameNotifications_OnUserStatusChanged_Notification) GetSessionid() uint64 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *CGameNotifications_OnUserStatusChanged_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameNotifications_OnUserStatusChanged_Notification) GetStatus() *CGameNotifications_UserStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CGameNotifications_OnUserStatusChanged_Notification) GetRemoved() bool {
	if x != nil && x.Removed != nil {
		return *x.Removed
	}
	return false
}

type CGameNotifications_GetSessionDetails_Request_RequestedSession struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Sessionid              *uint64                `protobuf:"varint,1,opt,name=sessionid" json:"sessionid,omitempty"`
	IncludeAuthUserMessage *bool                  `protobuf:"varint,3,opt,name=include_auth_user_message,json=includeAuthUserMessage" json:"include_auth_user_message,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CGameNotifications_GetSessionDetails_Request_RequestedSession) Reset() {
	*x = CGameNotifications_GetSessionDetails_Request_RequestedSession{}
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameNotifications_GetSessionDetails_Request_RequestedSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameNotifications_GetSessionDetails_Request_RequestedSession) ProtoMessage() {}

func (x *CGameNotifications_GetSessionDetails_Request_RequestedSession) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamenotifications_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameNotifications_GetSessionDetails_Request_RequestedSession.ProtoReflect.Descriptor instead.
func (*CGameNotifications_GetSessionDetails_Request_RequestedSession) Descriptor() ([]byte, []int) {
	return file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CGameNotifications_GetSessionDetails_Request_RequestedSession) GetSessionid() uint64 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *CGameNotifications_GetSessionDetails_Request_RequestedSession) GetIncludeAuthUserMessage() bool {
	if x != nil && x.IncludeAuthUserMessage != nil {
		return *x.IncludeAuthUserMessage
	}
	return false
}

var File_steammessages_gamenotifications_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_gamenotifications_steamclient_proto_rawDesc = "" +
	"\n" +
	"1steammessages_gamenotifications.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"E\n" +
	"\x1bCGameNotifications_Variable\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x99\x01\n" +
	" CGameNotifications_LocalizedText\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12:\n" +
	"\tvariables\x18\x02 \x03(\v2\x1c.CGameNotifications_VariableR\tvariables\x12#\n" +
	"\rrendered_text\x18\x03 \x01(\tR\frenderedText\"\xc5\x01\n" +
	"\x1dCGameNotifications_UserStatus\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x14\n" +
	"\x05state\x18\x02 \x01(\tR\x05state\x127\n" +
	"\x05title\x18\x03 \x01(\v2!.CGameNotifications_LocalizedTextR\x05title\x12;\n" +
	"\amessage\x18\x04 \x01(\v2!.CGameNotifications_LocalizedTextR\amessage\"\xe3\x01\n" +
	"(CGameNotifications_CreateSession_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x18\n" +
	"\acontext\x18\x02 \x01(\x04R\acontext\x127\n" +
	"\x05title\x18\x03 \x01(\v2!.CGameNotifications_LocalizedTextR\x05title\x124\n" +
	"\x05users\x18\x04 \x03(\v2\x1e.CGameNotifications_UserStatusR\x05users\x12\x18\n" +
	"\asteamid\x18\x05 \x01(\x06R\asteamid\"I\n" +
	")CGameNotifications_CreateSession_Response\x12\x1c\n" +
	"\tsessionid\x18\x01 \x01(\x04R\tsessionid\"x\n" +
	"(CGameNotifications_DeleteSession_Request\x12\x1c\n" +
	"\tsessionid\x18\x01 \x01(\x04R\tsessionid\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x18\n" +
	"\asteamid\x18\x03 \x01(\x06R\asteamid\"+\n" +
	")CGameNotifications_DeleteSession_Response\"\xe7\x01\n" +
	"(CGameNotifications_UpdateSession_Request\x12\x1c\n" +
	"\tsessionid\x18\x01 \x01(\x04R\tsessionid\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x127\n" +
	"\x05title\x18\x03 \x01(\v2!.CGameNotifications_LocalizedTextR\x05title\x124\n" +
	"\x05users\x18\x04 \x03(\v2\x1e.CGameNotifications_UserStatusR\x05users\x12\x18\n" +
	"\asteamid\x18\x06 \x01(\x06R\asteamid\"+\n" +
	")CGameNotifications_UpdateSession_Response\"\xd6\x01\n" +
	",CGameNotifications_EnumerateSessions_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x129\n" +
	"\x19include_all_user_messages\x18\x03 \x01(\bR\x16includeAllUserMessages\x129\n" +
	"\x19include_auth_user_message\x18\x04 \x01(\bR\x16includeAuthUserMessage\x12\x1a\n" +
	"\blanguage\x18\x05 \x01(\tR\blanguage\"\xaa\x02\n" +
	"\x1aCGameNotifications_Session\x12\x1c\n" +
	"\tsessionid\x18\x01 \x01(\x04R\tsessionid\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\x04R\x05appid\x12\x18\n" +
	"\acontext\x18\x03 \x01(\x04R\acontext\x127\n" +
	"\x05title\x18\x04 \x01(\v2!.CGameNotifications_LocalizedTextR\x05title\x12!\n" +
	"\ftime_created\x18\x05 \x01(\rR\vtimeCreated\x12!\n" +
	"\ftime_updated\x18\x06 \x01(\rR\vtimeUpdated\x12?\n" +
	"\vuser_status\x18\a \x03(\v2\x1e.CGameNotifications_UserStatusR\n" +
	"userStatus\"h\n" +
	"-CGameNotifications_EnumerateSessions_Response\x127\n" +
	"\bsessions\x18\x01 \x03(\v2\x1b.CGameNotifications_SessionR\bsessions\"\xa9\x02\n" +
	",CGameNotifications_GetSessionDetails_Request\x12Z\n" +
	"\bsessions\x18\x01 \x03(\v2>.CGameNotifications_GetSessionDetails_Request.RequestedSessionR\bsessions\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\tR\blanguage\x1ak\n" +
	"\x10RequestedSession\x12\x1c\n" +
	"\tsessionid\x18\x01 \x01(\x04R\tsessionid\x129\n" +
	"\x19include_auth_user_message\x18\x03 \x01(\bR\x16includeAuthUserMessage\"h\n" +
	"-CGameNotifications_GetSessionDetails_Response\x127\n" +
	"\bsessions\x18\x01 \x03(\v2\x1b.CGameNotifications_SessionR\bsessions\"a\n" +
	"\x18GameNotificationSettings\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12/\n" +
	"\x13allow_notifications\x18\x02 \x01(\bR\x12allowNotifications\"\x90\x01\n" +
	"5CGameNotifications_UpdateNotificationSettings_Request\x12W\n" +
	"\x1agame_notification_settings\x18\x01 \x03(\v2\x19.GameNotificationSettingsR\x18gameNotificationSettings\"8\n" +
	"6CGameNotifications_UpdateNotificationSettings_Response\"j\n" +
	"8CGameNotifications_OnNotificationsRequested_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\"\xd5\x01\n" +
	"3CGameNotifications_OnUserStatusChanged_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x1c\n" +
	"\tsessionid\x18\x02 \x01(\x04R\tsessionid\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\rR\x05appid\x126\n" +
	"\x06status\x18\x04 \x01(\v2\x1e.CGameNotifications_UserStatusR\x06status\x12\x18\n" +
	"\aremoved\x18\x05 \x01(\bR\aremoved2\xcf\x05\n" +
	"\x11GameNotifications\x12j\n" +
	"\x11UserCreateSession\x12).CGameNotifications_CreateSession_Request\x1a*.CGameNotifications_CreateSession_Response\x12j\n" +
	"\x11UserDeleteSession\x12).CGameNotifications_DeleteSession_Request\x1a*.CGameNotifications_DeleteSession_Response\x12j\n" +
	"\x11UserUpdateSession\x12).CGameNotifications_UpdateSession_Request\x1a*.CGameNotifications_UpdateSession_Response\x12r\n" +
	"\x11EnumerateSessions\x12-.CGameNotifications_EnumerateSessions_Request\x1a..CGameNotifications_EnumerateSessions_Response\x12r\n" +
	"\x11GetSessionDetails\x12-.CGameNotifications_GetSessionDetails_Request\x1a..CGameNotifications_GetSessionDetails_Response\x12\x8d\x01\n" +
	"\x1aUpdateNotificationSettings\x126.CGameNotifications_UpdateNotificationSettings_Request\x1a7.CGameNotifications_UpdateNotificationSettings_Response2\xdd\x01\n" +
	"\x17GameNotificationsClient\x12b\n" +
	"\x18OnNotificationsRequested\x129.CGameNotifications_OnNotificationsRequested_Notification\x1a\v.NoResponse\x12X\n" +
	"\x13OnUserStatusChanged\x124.CGameNotifications_OnUserStatusChanged_Notification\x1a\v.NoResponse\x1a\x04\xc0\xb5\x18\x02B8Z3github.com/Philipp15b/go-steam/v3/protocol/protobuf\x80\x01\x01"

var (
	file_steammessages_gamenotifications_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_gamenotifications_steamclient_proto_rawDescData []byte
)

func file_steammessages_gamenotifications_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_gamenotifications_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_gamenotifications_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_gamenotifications_steamclient_proto_rawDesc), len(file_steammessages_gamenotifications_steamclient_proto_rawDesc)))
	})
	return file_steammessages_gamenotifications_steamclient_proto_rawDescData
}

var file_steammessages_gamenotifications_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_steammessages_gamenotifications_steamclient_proto_goTypes = []any{
	(*CGameNotifications_Variable)(nil),                                   // 0: CGameNotifications_Variable
	(*CGameNotifications_LocalizedText)(nil),                              // 1: CGameNotifications_LocalizedText
	(*CGameNotifications_UserStatus)(nil),                                 // 2: CGameNotifications_UserStatus
	(*CGameNotifications_CreateSession_Request)(nil),                      // 3: CGameNotifications_CreateSession_Request
	(*CGameNotifications_CreateSession_Response)(nil),                     // 4: CGameNotifications_CreateSession_Response
	(*CGameNotifications_DeleteSession_Request)(nil),                      // 5: CGameNotifications_DeleteSession_Request
	(*CGameNotifications_DeleteSession_Response)(nil),                     // 6: CGameNotifications_DeleteSession_Response
	(*CGameNotifications_UpdateSession_Request)(nil),                      // 7: CGameNotifications_UpdateSession_Request
	(*CGameNotifications_UpdateSession_Response)(nil),                     // 8: CGameNotifications_UpdateSession_Response
	(*CGameNotifications_EnumerateSessions_Request)(nil),                  // 9: CGameNotifications_EnumerateSessions_Request
	(*CGameNotifications_Session)(nil),                                    // 10: CGameNotifications_Session
	(*CGameNotifications_EnumerateSessions_Response)(nil),                 // 11: CGameNotifications_EnumerateSessions_Response
	(*CGameNotifications_GetSessionDetails_Request)(nil),                  // 12: CGameNotifications_GetSessionDetails_Request
	(*CGameNotifications_GetSessionDetails_Response)(nil),                 // 13: CGameNotifications_GetSessionDetails_Response
	(*GameNotificationSettings)(nil),                                      // 14: GameNotificationSettings
	(*CGameNotifications_UpdateNotificationSettings_Request)(nil),         // 15: CGameNotifications_UpdateNotificationSettings_Request
	(*CGameNotifications_UpdateNotificationSettings_Response)(nil),        // 16: CGameNotifications_UpdateNotificationSettings_Response
	(*CGameNotifications_OnNotificationsRequested_Notification)(nil),      // 17: CGameNotifications_OnNotificationsRequested_Notification
	(*CGameNotifications_OnUserStatusChanged_Notification)(nil),           // 18: CGameNotifications_OnUserStatusChanged_Notification
	(*CGameNotifications_GetSessionDetails_Request_RequestedSession)(nil), // 19: CGameNotifications_GetSessionDetails_Request.RequestedSession
	(*NoResponse)(nil),       // 20: NoResponse
}
var file_steammessages_gamenotifications_steamclient_proto_depIdxs = []int32{
	0,  // 0: CGameNotifications_LocalizedText.variables:type_name -> CGameNotifications_Variable
	1,  // 1: CGameNotifications_UserStatus.title:type_name -> CGameNotifications_LocalizedText
	1,  // 2: CGameNotifications_UserStatus.message:type_name -> CGameNotifications_LocalizedText
	1,  // 3: CGameNotifications_CreateSession_Request.title:type_name -> CGameNotifications_LocalizedText
	2,  // 4: CGameNotifications_CreateSession_Request.users:type_name -> CGameNotifications_UserStatus
	1,  // 5: CGameNotifications_UpdateSession_Request.title:type_name -> CGameNotifications_LocalizedText
	2,  // 6: CGameNotifications_UpdateSession_Request.users:type_name -> CGameNotifications_UserStatus
	1,  // 7: CGameNotifications_Session.title:type_name -> CGameNotifications_LocalizedText
	2,  // 8: CGameNotifications_Session.user_status:type_name -> CGameNotifications_UserStatus
	10, // 9: CGameNotifications_EnumerateSessions_Response.sessions:type_name -> CGameNotifications_Session
	19, // 10: CGameNotifications_GetSessionDetails_Request.sessions:type_name -> CGameNotifications_GetSessionDetails_Request.RequestedSession
	10, // 11: CGameNotifications_GetSessionDetails_Response.sessions:type_name -> CGameNotifications_Session
	14, // 12: CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings:type_name -> GameNotificationSettings
	2,  // 13: CGameNotifications_OnUserStatusChanged_Notification.status:type_name -> CGameNotifications_UserStatus
	3,  // 14: GameNotifications.UserCreateSession:input_type -> CGameNotifications_CreateSession_Request
	5,  // 15: GameNotifications.UserDeleteSession:input_type -> CGameNotifications_DeleteSession_Request
	7,  // 16: GameNotifications.UserUpdateSession:input_type -> CGameNotifications_UpdateSession_Request
	9,  // 17: GameNotifications.EnumerateSessions:input_type -> CGameNotifications_EnumerateSessions_Request
	12, // 18: GameNotifications.GetSessionDetails:input_type -> CGameNotifications_GetSessionDetails_Request
	15, // 19: GameNotifications.UpdateNotificationSettings:input_type -> CGameNotifications_UpdateNotificationSettings_Request
	17, // 20: GameNotificationsClient.OnNotificationsRequested:input_type -> CGameNotifications_OnNotificationsRequested_Notification
	18, // 21: GameNotificationsClient.OnUserStatusChanged:input_type -> CGameNotifications_OnUserStatusChanged_Notification
	4,  // 22: GameNotifications.UserCreateSession:output_type -> CGameNotifications_CreateSession_Response
	6,  // 23: GameNotifications.UserDeleteSession:output_type -> CGameNotifications_DeleteSession_Response
	8,  // 24: GameNotifications.UserUpdateSession:output_type -> CGameNotifications_UpdateSession_Response
	11, // 25: GameNotifications.EnumerateSessions:output_type -> CGameNotifications_EnumerateSessions_Response
	13, // 26: GameNotifications.GetSessionDetails:output_type -> CGameNotifications_GetSessionDetails_Response
	16, // 27: GameNotifications.UpdateNotificationSettings:output_type -> CGameNotifications_UpdateNotificationSettings_Response
	20, // 28: GameNotificationsClient.OnNotificationsRequested:output_type -> NoResponse
	20, // 29: GameNotificationsClient.OnUserStatusChanged:output_type -> NoResponse
	22, // [22:30] is the sub-list for method output_type
	14, // [14:22] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_steammessages_gamenotifications_steamclient_proto_init() }
func file_steammessages_gamenotifications_steamclient_proto_init() {
	if File_steammessages_gamenotifications_steamclient_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_gamenotifications_steamclient_proto_rawDesc), len(file_steammessages_gamenotifications_steamclient_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_gamenotifications_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_gamenotifications_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_gamenotifications_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_gamenotifications_steamclient_proto = out.File
	file_steammessages_gamenotifications_steamclient_proto_goTypes = nil
	file_steammessages_gamenotifications_steamclient_proto_depIdxs = nil
}
