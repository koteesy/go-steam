// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: steammessages_publishedfile.steamclient.proto

package unified

import (
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EPublishedFileRevision int32

const (
	EPublishedFileRevision_k_EPublishedFileRevision_Default                EPublishedFileRevision = 0
	EPublishedFileRevision_k_EPublishedFileRevision_Latest                 EPublishedFileRevision = 1
	EPublishedFileRevision_k_EPublishedFileRevision_ApprovedSnapshot       EPublishedFileRevision = 2
	EPublishedFileRevision_k_EPublishedFileRevision_ApprovedSnapshot_China EPublishedFileRevision = 3
	EPublishedFileRevision_k_EPublishedFileRevision_RejectedSnapshot       EPublishedFileRevision = 4
	EPublishedFileRevision_k_EPublishedFileRevision_RejectedSnapshot_China EPublishedFileRevision = 5
)

// Enum value maps for EPublishedFileRevision.
var (
	EPublishedFileRevision_name = map[int32]string{
		0: "k_EPublishedFileRevision_Default",
		1: "k_EPublishedFileRevision_Latest",
		2: "k_EPublishedFileRevision_ApprovedSnapshot",
		3: "k_EPublishedFileRevision_ApprovedSnapshot_China",
		4: "k_EPublishedFileRevision_RejectedSnapshot",
		5: "k_EPublishedFileRevision_RejectedSnapshot_China",
	}
	EPublishedFileRevision_value = map[string]int32{
		"k_EPublishedFileRevision_Default":                0,
		"k_EPublishedFileRevision_Latest":                 1,
		"k_EPublishedFileRevision_ApprovedSnapshot":       2,
		"k_EPublishedFileRevision_ApprovedSnapshot_China": 3,
		"k_EPublishedFileRevision_RejectedSnapshot":       4,
		"k_EPublishedFileRevision_RejectedSnapshot_China": 5,
	}
)

func (x EPublishedFileRevision) Enum() *EPublishedFileRevision {
	p := new(EPublishedFileRevision)
	*p = x
	return p
}

func (x EPublishedFileRevision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileRevision) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_publishedfile_steamclient_proto_enumTypes[0].Descriptor()
}

func (EPublishedFileRevision) Type() protoreflect.EnumType {
	return &file_steammessages_publishedfile_steamclient_proto_enumTypes[0]
}

func (x EPublishedFileRevision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileRevision) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileRevision(num)
	return nil
}

// Deprecated: Use EPublishedFileRevision.Descriptor instead.
func (EPublishedFileRevision) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{0}
}

type EPublishedFileForSaleStatus int32

const (
	EPublishedFileForSaleStatus_k_PFFSS_NotForSale        EPublishedFileForSaleStatus = 0
	EPublishedFileForSaleStatus_k_PFFSS_PendingApproval   EPublishedFileForSaleStatus = 1
	EPublishedFileForSaleStatus_k_PFFSS_ApprovedForSale   EPublishedFileForSaleStatus = 2
	EPublishedFileForSaleStatus_k_PFFSS_RejectedForSale   EPublishedFileForSaleStatus = 3
	EPublishedFileForSaleStatus_k_PFFSS_NoLongerForSale   EPublishedFileForSaleStatus = 4
	EPublishedFileForSaleStatus_k_PFFSS_TentativeApproval EPublishedFileForSaleStatus = 5
)

// Enum value maps for EPublishedFileForSaleStatus.
var (
	EPublishedFileForSaleStatus_name = map[int32]string{
		0: "k_PFFSS_NotForSale",
		1: "k_PFFSS_PendingApproval",
		2: "k_PFFSS_ApprovedForSale",
		3: "k_PFFSS_RejectedForSale",
		4: "k_PFFSS_NoLongerForSale",
		5: "k_PFFSS_TentativeApproval",
	}
	EPublishedFileForSaleStatus_value = map[string]int32{
		"k_PFFSS_NotForSale":        0,
		"k_PFFSS_PendingApproval":   1,
		"k_PFFSS_ApprovedForSale":   2,
		"k_PFFSS_RejectedForSale":   3,
		"k_PFFSS_NoLongerForSale":   4,
		"k_PFFSS_TentativeApproval": 5,
	}
)

func (x EPublishedFileForSaleStatus) Enum() *EPublishedFileForSaleStatus {
	p := new(EPublishedFileForSaleStatus)
	*p = x
	return p
}

func (x EPublishedFileForSaleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileForSaleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_publishedfile_steamclient_proto_enumTypes[1].Descriptor()
}

func (EPublishedFileForSaleStatus) Type() protoreflect.EnumType {
	return &file_steammessages_publishedfile_steamclient_proto_enumTypes[1]
}

func (x EPublishedFileForSaleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileForSaleStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileForSaleStatus(num)
	return nil
}

// Deprecated: Use EPublishedFileForSaleStatus.Descriptor instead.
func (EPublishedFileForSaleStatus) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{1}
}

type CPublishedFile_Subscribe_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ListType        *uint32                `protobuf:"varint,2,opt,name=list_type,json=listType" json:"list_type,omitempty"`
	Appid           *int32                 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	NotifyClient    *bool                  `protobuf:"varint,4,opt,name=notify_client,json=notifyClient" json:"notify_client,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_Subscribe_Request) Reset() {
	*x = CPublishedFile_Subscribe_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Subscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Subscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_Subscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Subscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Subscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CPublishedFile_Subscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetNotifyClient() bool {
	if x != nil && x.NotifyClient != nil {
		return *x.NotifyClient
	}
	return false
}

type CPublishedFile_Subscribe_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_Subscribe_Response) Reset() {
	*x = CPublishedFile_Subscribe_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Subscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Subscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_Subscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Subscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Subscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{1}
}

type CPublishedFile_Unsubscribe_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ListType        *uint32                `protobuf:"varint,2,opt,name=list_type,json=listType" json:"list_type,omitempty"`
	Appid           *int32                 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	NotifyClient    *bool                  `protobuf:"varint,4,opt,name=notify_client,json=notifyClient" json:"notify_client,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_Unsubscribe_Request) Reset() {
	*x = CPublishedFile_Unsubscribe_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Unsubscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Unsubscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_Unsubscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Unsubscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Unsubscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CPublishedFile_Unsubscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetNotifyClient() bool {
	if x != nil && x.NotifyClient != nil {
		return *x.NotifyClient
	}
	return false
}

type CPublishedFile_Unsubscribe_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_Unsubscribe_Response) Reset() {
	*x = CPublishedFile_Unsubscribe_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Unsubscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Unsubscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_Unsubscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Unsubscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Unsubscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{3}
}

type CPublishedFile_CanSubscribe_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_CanSubscribe_Request) Reset() {
	*x = CPublishedFile_CanSubscribe_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_CanSubscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_CanSubscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_CanSubscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_CanSubscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_CanSubscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CPublishedFile_CanSubscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

type CPublishedFile_CanSubscribe_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanSubscribe  *bool                  `protobuf:"varint,1,opt,name=can_subscribe,json=canSubscribe" json:"can_subscribe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_CanSubscribe_Response) Reset() {
	*x = CPublishedFile_CanSubscribe_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_CanSubscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_CanSubscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_CanSubscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_CanSubscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_CanSubscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CPublishedFile_CanSubscribe_Response) GetCanSubscribe() bool {
	if x != nil && x.CanSubscribe != nil {
		return *x.CanSubscribe
	}
	return false
}

type CPublishedFile_Publish_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Appid                *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ConsumerAppid        *uint32                `protobuf:"varint,2,opt,name=consumer_appid,json=consumerAppid" json:"consumer_appid,omitempty"`
	Cloudfilename        *string                `protobuf:"bytes,3,opt,name=cloudfilename" json:"cloudfilename,omitempty"`
	PreviewCloudfilename *string                `protobuf:"bytes,4,opt,name=preview_cloudfilename,json=previewCloudfilename" json:"preview_cloudfilename,omitempty"`
	Title                *string                `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	FileDescription      *string                `protobuf:"bytes,6,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	FileType             *uint32                `protobuf:"varint,7,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	ConsumerShortcutName *string                `protobuf:"bytes,8,opt,name=consumer_shortcut_name,json=consumerShortcutName" json:"consumer_shortcut_name,omitempty"`
	YoutubeUsername      *string                `protobuf:"bytes,9,opt,name=youtube_username,json=youtubeUsername" json:"youtube_username,omitempty"`
	YoutubeVideoid       *string                `protobuf:"bytes,10,opt,name=youtube_videoid,json=youtubeVideoid" json:"youtube_videoid,omitempty"`
	Visibility           *uint32                `protobuf:"varint,11,opt,name=visibility" json:"visibility,omitempty"`
	RedirectUri          *string                `protobuf:"bytes,12,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
	Tags                 []string               `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	CollectionType       *string                `protobuf:"bytes,14,opt,name=collection_type,json=collectionType" json:"collection_type,omitempty"`
	GameType             *string                `protobuf:"bytes,15,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Url                  *string                `protobuf:"bytes,16,opt,name=url" json:"url,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPublishedFile_Publish_Request) Reset() {
	*x = CPublishedFile_Publish_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Publish_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Publish_Request) ProtoMessage() {}

func (x *CPublishedFile_Publish_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Publish_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Publish_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CPublishedFile_Publish_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetConsumerAppid() uint32 {
	if x != nil && x.ConsumerAppid != nil {
		return *x.ConsumerAppid
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetCloudfilename() string {
	if x != nil && x.Cloudfilename != nil {
		return *x.Cloudfilename
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetPreviewCloudfilename() string {
	if x != nil && x.PreviewCloudfilename != nil {
		return *x.PreviewCloudfilename
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetConsumerShortcutName() string {
	if x != nil && x.ConsumerShortcutName != nil {
		return *x.ConsumerShortcutName
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetYoutubeUsername() string {
	if x != nil && x.YoutubeUsername != nil {
		return *x.YoutubeUsername
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetYoutubeVideoid() string {
	if x != nil && x.YoutubeVideoid != nil {
		return *x.YoutubeVideoid
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetRedirectUri() string {
	if x != nil && x.RedirectUri != nil {
		return *x.RedirectUri
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_Publish_Request) GetCollectionType() string {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type CPublishedFile_Publish_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	RedirectUri     *string                `protobuf:"bytes,2,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_Publish_Response) Reset() {
	*x = CPublishedFile_Publish_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Publish_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Publish_Response) ProtoMessage() {}

func (x *CPublishedFile_Publish_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Publish_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Publish_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CPublishedFile_Publish_Response) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Publish_Response) GetRedirectUri() string {
	if x != nil && x.RedirectUri != nil {
		return *x.RedirectUri
	}
	return ""
}

type CPublishedFile_GetDetails_Request struct {
	state                     protoimpl.MessageState  `protogen:"open.v1"`
	Publishedfileids          []uint64                `protobuf:"fixed64,1,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	Includetags               *bool                   `protobuf:"varint,2,opt,name=includetags" json:"includetags,omitempty"`
	Includeadditionalpreviews *bool                   `protobuf:"varint,3,opt,name=includeadditionalpreviews" json:"includeadditionalpreviews,omitempty"`
	Includechildren           *bool                   `protobuf:"varint,4,opt,name=includechildren" json:"includechildren,omitempty"`
	Includekvtags             *bool                   `protobuf:"varint,5,opt,name=includekvtags" json:"includekvtags,omitempty"`
	Includevotes              *bool                   `protobuf:"varint,6,opt,name=includevotes" json:"includevotes,omitempty"`
	ShortDescription          *bool                   `protobuf:"varint,8,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
	Includeforsaledata        *bool                   `protobuf:"varint,10,opt,name=includeforsaledata" json:"includeforsaledata,omitempty"`
	Includemetadata           *bool                   `protobuf:"varint,11,opt,name=includemetadata" json:"includemetadata,omitempty"`
	Language                  *int32                  `protobuf:"varint,12,opt,name=language,def=0" json:"language,omitempty"`
	ReturnPlaytimeStats       *uint32                 `protobuf:"varint,13,opt,name=return_playtime_stats,json=returnPlaytimeStats" json:"return_playtime_stats,omitempty"`
	Appid                     *uint32                 `protobuf:"varint,14,opt,name=appid" json:"appid,omitempty"`
	StripDescriptionBbcode    *bool                   `protobuf:"varint,15,opt,name=strip_description_bbcode,json=stripDescriptionBbcode" json:"strip_description_bbcode,omitempty"`
	DesiredRevision           *EPublishedFileRevision `protobuf:"varint,16,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
	Includereactions          *bool                   `protobuf:"varint,17,opt,name=includereactions,def=0" json:"includereactions,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

// Default values for CPublishedFile_GetDetails_Request fields.
const (
	Default_CPublishedFile_GetDetails_Request_Language         = int32(0)
	Default_CPublishedFile_GetDetails_Request_DesiredRevision  = EPublishedFileRevision_k_EPublishedFileRevision_Default
	Default_CPublishedFile_GetDetails_Request_Includereactions = bool(false)
)

func (x *CPublishedFile_GetDetails_Request) Reset() {
	*x = CPublishedFile_GetDetails_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetDetails_Request) ProtoMessage() {}

func (x *CPublishedFile_GetDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetDetails_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CPublishedFile_GetDetails_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

func (x *CPublishedFile_GetDetails_Request) GetIncludetags() bool {
	if x != nil && x.Includetags != nil {
		return *x.Includetags
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludeadditionalpreviews() bool {
	if x != nil && x.Includeadditionalpreviews != nil {
		return *x.Includeadditionalpreviews
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludechildren() bool {
	if x != nil && x.Includechildren != nil {
		return *x.Includechildren
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludekvtags() bool {
	if x != nil && x.Includekvtags != nil {
		return *x.Includekvtags
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludevotes() bool {
	if x != nil && x.Includevotes != nil {
		return *x.Includevotes
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetShortDescription() bool {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludeforsaledata() bool {
	if x != nil && x.Includeforsaledata != nil {
		return *x.Includeforsaledata
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludemetadata() bool {
	if x != nil && x.Includemetadata != nil {
		return *x.Includemetadata
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CPublishedFile_GetDetails_Request_Language
}

func (x *CPublishedFile_GetDetails_Request) GetReturnPlaytimeStats() uint32 {
	if x != nil && x.ReturnPlaytimeStats != nil {
		return *x.ReturnPlaytimeStats
	}
	return 0
}

func (x *CPublishedFile_GetDetails_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetDetails_Request) GetStripDescriptionBbcode() bool {
	if x != nil && x.StripDescriptionBbcode != nil {
		return *x.StripDescriptionBbcode
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_GetDetails_Request_DesiredRevision
}

func (x *CPublishedFile_GetDetails_Request) GetIncludereactions() bool {
	if x != nil && x.Includereactions != nil {
		return *x.Includereactions
	}
	return Default_CPublishedFile_GetDetails_Request_Includereactions
}

type PublishedFileDetails struct {
	state                      protoimpl.MessageState              `protogen:"open.v1"`
	Result                     *uint32                             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Publishedfileid            *uint64                             `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Creator                    *uint64                             `protobuf:"fixed64,3,opt,name=creator" json:"creator,omitempty"`
	CreatorAppid               *uint32                             `protobuf:"varint,4,opt,name=creator_appid,json=creatorAppid" json:"creator_appid,omitempty"`
	ConsumerAppid              *uint32                             `protobuf:"varint,5,opt,name=consumer_appid,json=consumerAppid" json:"consumer_appid,omitempty"`
	ConsumerShortcutid         *uint32                             `protobuf:"varint,6,opt,name=consumer_shortcutid,json=consumerShortcutid" json:"consumer_shortcutid,omitempty"`
	Filename                   *string                             `protobuf:"bytes,7,opt,name=filename" json:"filename,omitempty"`
	FileSize                   *uint64                             `protobuf:"varint,8,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	PreviewFileSize            *uint64                             `protobuf:"varint,9,opt,name=preview_file_size,json=previewFileSize" json:"preview_file_size,omitempty"`
	FileUrl                    *string                             `protobuf:"bytes,10,opt,name=file_url,json=fileUrl" json:"file_url,omitempty"`
	PreviewUrl                 *string                             `protobuf:"bytes,11,opt,name=preview_url,json=previewUrl" json:"preview_url,omitempty"`
	Youtubevideoid             *string                             `protobuf:"bytes,12,opt,name=youtubevideoid" json:"youtubevideoid,omitempty"`
	Url                        *string                             `protobuf:"bytes,13,opt,name=url" json:"url,omitempty"`
	HcontentFile               *uint64                             `protobuf:"fixed64,14,opt,name=hcontent_file,json=hcontentFile" json:"hcontent_file,omitempty"`
	HcontentPreview            *uint64                             `protobuf:"fixed64,15,opt,name=hcontent_preview,json=hcontentPreview" json:"hcontent_preview,omitempty"`
	Title                      *string                             `protobuf:"bytes,16,opt,name=title" json:"title,omitempty"`
	FileDescription            *string                             `protobuf:"bytes,17,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	ShortDescription           *string                             `protobuf:"bytes,18,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
	TimeCreated                *uint32                             `protobuf:"varint,19,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeUpdated                *uint32                             `protobuf:"varint,20,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	Visibility                 *uint32                             `protobuf:"varint,21,opt,name=visibility" json:"visibility,omitempty"`
	Flags                      *uint32                             `protobuf:"varint,22,opt,name=flags" json:"flags,omitempty"`
	WorkshopFile               *bool                               `protobuf:"varint,23,opt,name=workshop_file,json=workshopFile" json:"workshop_file,omitempty"`
	WorkshopAccepted           *bool                               `protobuf:"varint,24,opt,name=workshop_accepted,json=workshopAccepted" json:"workshop_accepted,omitempty"`
	ShowSubscribeAll           *bool                               `protobuf:"varint,25,opt,name=show_subscribe_all,json=showSubscribeAll" json:"show_subscribe_all,omitempty"`
	NumCommentsDeveloper       *int32                              `protobuf:"varint,26,opt,name=num_comments_developer,json=numCommentsDeveloper" json:"num_comments_developer,omitempty"`
	NumCommentsPublic          *int32                              `protobuf:"varint,27,opt,name=num_comments_public,json=numCommentsPublic" json:"num_comments_public,omitempty"`
	Banned                     *bool                               `protobuf:"varint,28,opt,name=banned" json:"banned,omitempty"`
	BanReason                  *string                             `protobuf:"bytes,29,opt,name=ban_reason,json=banReason" json:"ban_reason,omitempty"`
	Banner                     *uint64                             `protobuf:"fixed64,30,opt,name=banner" json:"banner,omitempty"`
	CanBeDeleted               *bool                               `protobuf:"varint,31,opt,name=can_be_deleted,json=canBeDeleted" json:"can_be_deleted,omitempty"`
	Incompatible               *bool                               `protobuf:"varint,32,opt,name=incompatible" json:"incompatible,omitempty"`
	AppName                    *string                             `protobuf:"bytes,33,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	FileType                   *uint32                             `protobuf:"varint,34,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	CanSubscribe               *bool                               `protobuf:"varint,35,opt,name=can_subscribe,json=canSubscribe" json:"can_subscribe,omitempty"`
	Subscriptions              *uint32                             `protobuf:"varint,36,opt,name=subscriptions" json:"subscriptions,omitempty"`
	Favorited                  *uint32                             `protobuf:"varint,37,opt,name=favorited" json:"favorited,omitempty"`
	Followers                  *uint32                             `protobuf:"varint,38,opt,name=followers" json:"followers,omitempty"`
	LifetimeSubscriptions      *uint32                             `protobuf:"varint,39,opt,name=lifetime_subscriptions,json=lifetimeSubscriptions" json:"lifetime_subscriptions,omitempty"`
	LifetimeFavorited          *uint32                             `protobuf:"varint,40,opt,name=lifetime_favorited,json=lifetimeFavorited" json:"lifetime_favorited,omitempty"`
	LifetimeFollowers          *uint32                             `protobuf:"varint,41,opt,name=lifetime_followers,json=lifetimeFollowers" json:"lifetime_followers,omitempty"`
	LifetimePlaytime           *uint64                             `protobuf:"varint,62,opt,name=lifetime_playtime,json=lifetimePlaytime" json:"lifetime_playtime,omitempty"`
	LifetimePlaytimeSessions   *uint64                             `protobuf:"varint,63,opt,name=lifetime_playtime_sessions,json=lifetimePlaytimeSessions" json:"lifetime_playtime_sessions,omitempty"`
	Views                      *uint32                             `protobuf:"varint,42,opt,name=views" json:"views,omitempty"`
	ImageWidth                 *uint32                             `protobuf:"varint,43,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight                *uint32                             `protobuf:"varint,44,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	ImageUrl                   *string                             `protobuf:"bytes,45,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	SpoilerTag                 *bool                               `protobuf:"varint,46,opt,name=spoiler_tag,json=spoilerTag" json:"spoiler_tag,omitempty"`
	Shortcutid                 *uint32                             `protobuf:"varint,47,opt,name=shortcutid" json:"shortcutid,omitempty"`
	Shortcutname               *string                             `protobuf:"bytes,48,opt,name=shortcutname" json:"shortcutname,omitempty"`
	NumChildren                *uint32                             `protobuf:"varint,49,opt,name=num_children,json=numChildren" json:"num_children,omitempty"`
	NumReports                 *uint32                             `protobuf:"varint,50,opt,name=num_reports,json=numReports" json:"num_reports,omitempty"`
	Previews                   []*PublishedFileDetails_Preview     `protobuf:"bytes,51,rep,name=previews" json:"previews,omitempty"`
	Tags                       []*PublishedFileDetails_Tag         `protobuf:"bytes,52,rep,name=tags" json:"tags,omitempty"`
	Children                   []*PublishedFileDetails_Child       `protobuf:"bytes,53,rep,name=children" json:"children,omitempty"`
	Kvtags                     []*PublishedFileDetails_KVTag       `protobuf:"bytes,54,rep,name=kvtags" json:"kvtags,omitempty"`
	VoteData                   *PublishedFileDetails_VoteData      `protobuf:"bytes,55,opt,name=vote_data,json=voteData" json:"vote_data,omitempty"`
	PlaytimeStats              *PublishedFileDetails_PlaytimeStats `protobuf:"bytes,64,opt,name=playtime_stats,json=playtimeStats" json:"playtime_stats,omitempty"`
	TimeSubscribed             *uint32                             `protobuf:"varint,56,opt,name=time_subscribed,json=timeSubscribed" json:"time_subscribed,omitempty"`
	ForSaleData                *PublishedFileDetails_ForSaleData   `protobuf:"bytes,57,opt,name=for_sale_data,json=forSaleData" json:"for_sale_data,omitempty"`
	Metadata                   *string                             `protobuf:"bytes,58,opt,name=metadata" json:"metadata,omitempty"`
	Language                   *int32                              `protobuf:"varint,61,opt,name=language,def=0" json:"language,omitempty"`
	MaybeInappropriateSex      *bool                               `protobuf:"varint,65,opt,name=maybe_inappropriate_sex,json=maybeInappropriateSex" json:"maybe_inappropriate_sex,omitempty"`
	MaybeInappropriateViolence *bool                               `protobuf:"varint,66,opt,name=maybe_inappropriate_violence,json=maybeInappropriateViolence" json:"maybe_inappropriate_violence,omitempty"`
	RevisionChangeNumber       *uint64                             `protobuf:"varint,67,opt,name=revision_change_number,json=revisionChangeNumber" json:"revision_change_number,omitempty"`
	Revision                   *EPublishedFileRevision             `protobuf:"varint,68,opt,name=revision,enum=EPublishedFileRevision,def=0" json:"revision,omitempty"`
	AvailableRevisions         []EPublishedFileRevision            `protobuf:"varint,69,rep,name=available_revisions,json=availableRevisions,enum=EPublishedFileRevision" json:"available_revisions,omitempty"`
	Reactions                  []*PublishedFileDetails_Reaction    `protobuf:"bytes,70,rep,name=reactions" json:"reactions,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for PublishedFileDetails fields.
const (
	Default_PublishedFileDetails_Language = int32(0)
	Default_PublishedFileDetails_Revision = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *PublishedFileDetails) Reset() {
	*x = PublishedFileDetails{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails) ProtoMessage() {}

func (x *PublishedFileDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *PublishedFileDetails) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *PublishedFileDetails) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *PublishedFileDetails) GetCreator() uint64 {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return 0
}

func (x *PublishedFileDetails) GetCreatorAppid() uint32 {
	if x != nil && x.CreatorAppid != nil {
		return *x.CreatorAppid
	}
	return 0
}

func (x *PublishedFileDetails) GetConsumerAppid() uint32 {
	if x != nil && x.ConsumerAppid != nil {
		return *x.ConsumerAppid
	}
	return 0
}

func (x *PublishedFileDetails) GetConsumerShortcutid() uint32 {
	if x != nil && x.ConsumerShortcutid != nil {
		return *x.ConsumerShortcutid
	}
	return 0
}

func (x *PublishedFileDetails) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *PublishedFileDetails) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *PublishedFileDetails) GetPreviewFileSize() uint64 {
	if x != nil && x.PreviewFileSize != nil {
		return *x.PreviewFileSize
	}
	return 0
}

func (x *PublishedFileDetails) GetFileUrl() string {
	if x != nil && x.FileUrl != nil {
		return *x.FileUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetPreviewUrl() string {
	if x != nil && x.PreviewUrl != nil {
		return *x.PreviewUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetYoutubevideoid() string {
	if x != nil && x.Youtubevideoid != nil {
		return *x.Youtubevideoid
	}
	return ""
}

func (x *PublishedFileDetails) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PublishedFileDetails) GetHcontentFile() uint64 {
	if x != nil && x.HcontentFile != nil {
		return *x.HcontentFile
	}
	return 0
}

func (x *PublishedFileDetails) GetHcontentPreview() uint64 {
	if x != nil && x.HcontentPreview != nil {
		return *x.HcontentPreview
	}
	return 0
}

func (x *PublishedFileDetails) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PublishedFileDetails) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *PublishedFileDetails) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *PublishedFileDetails) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *PublishedFileDetails) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *PublishedFileDetails) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *PublishedFileDetails) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *PublishedFileDetails) GetWorkshopFile() bool {
	if x != nil && x.WorkshopFile != nil {
		return *x.WorkshopFile
	}
	return false
}

func (x *PublishedFileDetails) GetWorkshopAccepted() bool {
	if x != nil && x.WorkshopAccepted != nil {
		return *x.WorkshopAccepted
	}
	return false
}

func (x *PublishedFileDetails) GetShowSubscribeAll() bool {
	if x != nil && x.ShowSubscribeAll != nil {
		return *x.ShowSubscribeAll
	}
	return false
}

func (x *PublishedFileDetails) GetNumCommentsDeveloper() int32 {
	if x != nil && x.NumCommentsDeveloper != nil {
		return *x.NumCommentsDeveloper
	}
	return 0
}

func (x *PublishedFileDetails) GetNumCommentsPublic() int32 {
	if x != nil && x.NumCommentsPublic != nil {
		return *x.NumCommentsPublic
	}
	return 0
}

func (x *PublishedFileDetails) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

func (x *PublishedFileDetails) GetBanReason() string {
	if x != nil && x.BanReason != nil {
		return *x.BanReason
	}
	return ""
}

func (x *PublishedFileDetails) GetBanner() uint64 {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return 0
}

func (x *PublishedFileDetails) GetCanBeDeleted() bool {
	if x != nil && x.CanBeDeleted != nil {
		return *x.CanBeDeleted
	}
	return false
}

func (x *PublishedFileDetails) GetIncompatible() bool {
	if x != nil && x.Incompatible != nil {
		return *x.Incompatible
	}
	return false
}

func (x *PublishedFileDetails) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *PublishedFileDetails) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *PublishedFileDetails) GetCanSubscribe() bool {
	if x != nil && x.CanSubscribe != nil {
		return *x.CanSubscribe
	}
	return false
}

func (x *PublishedFileDetails) GetSubscriptions() uint32 {
	if x != nil && x.Subscriptions != nil {
		return *x.Subscriptions
	}
	return 0
}

func (x *PublishedFileDetails) GetFavorited() uint32 {
	if x != nil && x.Favorited != nil {
		return *x.Favorited
	}
	return 0
}

func (x *PublishedFileDetails) GetFollowers() uint32 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeSubscriptions() uint32 {
	if x != nil && x.LifetimeSubscriptions != nil {
		return *x.LifetimeSubscriptions
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeFavorited() uint32 {
	if x != nil && x.LifetimeFavorited != nil {
		return *x.LifetimeFavorited
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeFollowers() uint32 {
	if x != nil && x.LifetimeFollowers != nil {
		return *x.LifetimeFollowers
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimePlaytime() uint64 {
	if x != nil && x.LifetimePlaytime != nil {
		return *x.LifetimePlaytime
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimePlaytimeSessions() uint64 {
	if x != nil && x.LifetimePlaytimeSessions != nil {
		return *x.LifetimePlaytimeSessions
	}
	return 0
}

func (x *PublishedFileDetails) GetViews() uint32 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *PublishedFileDetails) GetImageWidth() uint32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *PublishedFileDetails) GetImageHeight() uint32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *PublishedFileDetails) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetSpoilerTag() bool {
	if x != nil && x.SpoilerTag != nil {
		return *x.SpoilerTag
	}
	return false
}

func (x *PublishedFileDetails) GetShortcutid() uint32 {
	if x != nil && x.Shortcutid != nil {
		return *x.Shortcutid
	}
	return 0
}

func (x *PublishedFileDetails) GetShortcutname() string {
	if x != nil && x.Shortcutname != nil {
		return *x.Shortcutname
	}
	return ""
}

func (x *PublishedFileDetails) GetNumChildren() uint32 {
	if x != nil && x.NumChildren != nil {
		return *x.NumChildren
	}
	return 0
}

func (x *PublishedFileDetails) GetNumReports() uint32 {
	if x != nil && x.NumReports != nil {
		return *x.NumReports
	}
	return 0
}

func (x *PublishedFileDetails) GetPreviews() []*PublishedFileDetails_Preview {
	if x != nil {
		return x.Previews
	}
	return nil
}

func (x *PublishedFileDetails) GetTags() []*PublishedFileDetails_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PublishedFileDetails) GetChildren() []*PublishedFileDetails_Child {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PublishedFileDetails) GetKvtags() []*PublishedFileDetails_KVTag {
	if x != nil {
		return x.Kvtags
	}
	return nil
}

func (x *PublishedFileDetails) GetVoteData() *PublishedFileDetails_VoteData {
	if x != nil {
		return x.VoteData
	}
	return nil
}

func (x *PublishedFileDetails) GetPlaytimeStats() *PublishedFileDetails_PlaytimeStats {
	if x != nil {
		return x.PlaytimeStats
	}
	return nil
}

func (x *PublishedFileDetails) GetTimeSubscribed() uint32 {
	if x != nil && x.TimeSubscribed != nil {
		return *x.TimeSubscribed
	}
	return 0
}

func (x *PublishedFileDetails) GetForSaleData() *PublishedFileDetails_ForSaleData {
	if x != nil {
		return x.ForSaleData
	}
	return nil
}

func (x *PublishedFileDetails) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

func (x *PublishedFileDetails) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_PublishedFileDetails_Language
}

func (x *PublishedFileDetails) GetMaybeInappropriateSex() bool {
	if x != nil && x.MaybeInappropriateSex != nil {
		return *x.MaybeInappropriateSex
	}
	return false
}

func (x *PublishedFileDetails) GetMaybeInappropriateViolence() bool {
	if x != nil && x.MaybeInappropriateViolence != nil {
		return *x.MaybeInappropriateViolence
	}
	return false
}

func (x *PublishedFileDetails) GetRevisionChangeNumber() uint64 {
	if x != nil && x.RevisionChangeNumber != nil {
		return *x.RevisionChangeNumber
	}
	return 0
}

func (x *PublishedFileDetails) GetRevision() EPublishedFileRevision {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return Default_PublishedFileDetails_Revision
}

func (x *PublishedFileDetails) GetAvailableRevisions() []EPublishedFileRevision {
	if x != nil {
		return x.AvailableRevisions
	}
	return nil
}

func (x *PublishedFileDetails) GetReactions() []*PublishedFileDetails_Reaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

type CPublishedFile_GetDetails_Response struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Publishedfiledetails []*PublishedFileDetails `protobuf:"bytes,1,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPublishedFile_GetDetails_Response) Reset() {
	*x = CPublishedFile_GetDetails_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetDetails_Response) ProtoMessage() {}

func (x *CPublishedFile_GetDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetDetails_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CPublishedFile_GetDetails_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

type CPublishedFile_GetItemInfo_Request struct {
	state           protoimpl.MessageState                             `protogen:"open.v1"`
	AppId           *uint32                                            `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	LastTimeUpdated *uint32                                            `protobuf:"varint,2,opt,name=last_time_updated,json=lastTimeUpdated" json:"last_time_updated,omitempty"`
	WorkshopItems   []*CPublishedFile_GetItemInfo_Request_WorkshopItem `protobuf:"bytes,3,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_GetItemInfo_Request) Reset() {
	*x = CPublishedFile_GetItemInfo_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetItemInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemInfo_Request) ProtoMessage() {}

func (x *CPublishedFile_GetItemInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemInfo_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CPublishedFile_GetItemInfo_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Request) GetLastTimeUpdated() uint32 {
	if x != nil && x.LastTimeUpdated != nil {
		return *x.LastTimeUpdated
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Request) GetWorkshopItems() []*CPublishedFile_GetItemInfo_Request_WorkshopItem {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

type CPublishedFile_GetItemInfo_Response struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	UpdateTime    *uint32                                                 `protobuf:"varint,1,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	WorkshopItems []*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo `protobuf:"bytes,2,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
	PrivateItems  []uint64                                                `protobuf:"fixed64,3,rep,name=private_items,json=privateItems" json:"private_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_GetItemInfo_Response) Reset() {
	*x = CPublishedFile_GetItemInfo_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetItemInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemInfo_Response) ProtoMessage() {}

func (x *CPublishedFile_GetItemInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemInfo_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CPublishedFile_GetItemInfo_Response) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Response) GetWorkshopItems() []*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

func (x *CPublishedFile_GetItemInfo_Response) GetPrivateItems() []uint64 {
	if x != nil {
		return x.PrivateItems
	}
	return nil
}

type CPublishedFile_GetUserFiles_Request struct {
	state                  protoimpl.MessageState                          `protogen:"open.v1"`
	Steamid                *uint64                                         `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid                  *uint32                                         `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Page                   *uint32                                         `protobuf:"varint,4,opt,name=page,def=1" json:"page,omitempty"`
	Numperpage             *uint32                                         `protobuf:"varint,5,opt,name=numperpage,def=1" json:"numperpage,omitempty"`
	Type                   *string                                         `protobuf:"bytes,6,opt,name=type,def=myfiles" json:"type,omitempty"`
	Sortmethod             *string                                         `protobuf:"bytes,7,opt,name=sortmethod,def=lastupdated" json:"sortmethod,omitempty"`
	Privacy                *uint32                                         `protobuf:"varint,9,opt,name=privacy" json:"privacy,omitempty"`
	Requiredtags           []string                                        `protobuf:"bytes,10,rep,name=requiredtags" json:"requiredtags,omitempty"`
	Excludedtags           []string                                        `protobuf:"bytes,11,rep,name=excludedtags" json:"excludedtags,omitempty"`
	RequiredKvTags         []*CPublishedFile_GetUserFiles_Request_KVTag    `protobuf:"bytes,30,rep,name=required_kv_tags,json=requiredKvTags" json:"required_kv_tags,omitempty"`
	Filetype               *uint32                                         `protobuf:"varint,14,opt,name=filetype" json:"filetype,omitempty"`
	CreatorAppid           *uint32                                         `protobuf:"varint,15,opt,name=creator_appid,json=creatorAppid" json:"creator_appid,omitempty"`
	MatchCloudFilename     *string                                         `protobuf:"bytes,16,opt,name=match_cloud_filename,json=matchCloudFilename" json:"match_cloud_filename,omitempty"`
	CacheMaxAgeSeconds     *uint32                                         `protobuf:"varint,27,opt,name=cache_max_age_seconds,json=cacheMaxAgeSeconds,def=0" json:"cache_max_age_seconds,omitempty"`
	Language               *int32                                          `protobuf:"varint,29,opt,name=language,def=0" json:"language,omitempty"`
	Taggroups              []*CPublishedFile_GetUserFiles_Request_TagGroup `protobuf:"bytes,34,rep,name=taggroups" json:"taggroups,omitempty"`
	Totalonly              *bool                                           `protobuf:"varint,17,opt,name=totalonly" json:"totalonly,omitempty"`
	IdsOnly                *bool                                           `protobuf:"varint,18,opt,name=ids_only,json=idsOnly" json:"ids_only,omitempty"`
	ReturnVoteData         *bool                                           `protobuf:"varint,19,opt,name=return_vote_data,json=returnVoteData,def=1" json:"return_vote_data,omitempty"`
	ReturnTags             *bool                                           `protobuf:"varint,20,opt,name=return_tags,json=returnTags" json:"return_tags,omitempty"`
	ReturnKvTags           *bool                                           `protobuf:"varint,21,opt,name=return_kv_tags,json=returnKvTags,def=1" json:"return_kv_tags,omitempty"`
	ReturnPreviews         *bool                                           `protobuf:"varint,22,opt,name=return_previews,json=returnPreviews" json:"return_previews,omitempty"`
	ReturnChildren         *bool                                           `protobuf:"varint,23,opt,name=return_children,json=returnChildren" json:"return_children,omitempty"`
	ReturnShortDescription *bool                                           `protobuf:"varint,24,opt,name=return_short_description,json=returnShortDescription,def=1" json:"return_short_description,omitempty"`
	ReturnForSaleData      *bool                                           `protobuf:"varint,26,opt,name=return_for_sale_data,json=returnForSaleData" json:"return_for_sale_data,omitempty"`
	ReturnMetadata         *bool                                           `protobuf:"varint,28,opt,name=return_metadata,json=returnMetadata,def=0" json:"return_metadata,omitempty"`
	ReturnPlaytimeStats    *uint32                                         `protobuf:"varint,31,opt,name=return_playtime_stats,json=returnPlaytimeStats" json:"return_playtime_stats,omitempty"`
	StripDescriptionBbcode *bool                                           `protobuf:"varint,32,opt,name=strip_description_bbcode,json=stripDescriptionBbcode" json:"strip_description_bbcode,omitempty"`
	ReturnReactions        *bool                                           `protobuf:"varint,35,opt,name=return_reactions,json=returnReactions,def=0" json:"return_reactions,omitempty"`
	DesiredRevision        *EPublishedFileRevision                         `protobuf:"varint,33,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for CPublishedFile_GetUserFiles_Request fields.
const (
	Default_CPublishedFile_GetUserFiles_Request_Page                   = uint32(1)
	Default_CPublishedFile_GetUserFiles_Request_Numperpage             = uint32(1)
	Default_CPublishedFile_GetUserFiles_Request_Type                   = string("myfiles")
	Default_CPublishedFile_GetUserFiles_Request_Sortmethod             = string("lastupdated")
	Default_CPublishedFile_GetUserFiles_Request_CacheMaxAgeSeconds     = uint32(0)
	Default_CPublishedFile_GetUserFiles_Request_Language               = int32(0)
	Default_CPublishedFile_GetUserFiles_Request_ReturnVoteData         = bool(true)
	Default_CPublishedFile_GetUserFiles_Request_ReturnKvTags           = bool(true)
	Default_CPublishedFile_GetUserFiles_Request_ReturnShortDescription = bool(true)
	Default_CPublishedFile_GetUserFiles_Request_ReturnMetadata         = bool(false)
	Default_CPublishedFile_GetUserFiles_Request_ReturnReactions        = bool(false)
	Default_CPublishedFile_GetUserFiles_Request_DesiredRevision        = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *CPublishedFile_GetUserFiles_Request) Reset() {
	*x = CPublishedFile_GetUserFiles_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserFiles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Request) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CPublishedFile_GetUserFiles_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Default_CPublishedFile_GetUserFiles_Request_Page
}

func (x *CPublishedFile_GetUserFiles_Request) GetNumperpage() uint32 {
	if x != nil && x.Numperpage != nil {
		return *x.Numperpage
	}
	return Default_CPublishedFile_GetUserFiles_Request_Numperpage
}

func (x *CPublishedFile_GetUserFiles_Request) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CPublishedFile_GetUserFiles_Request_Type
}

func (x *CPublishedFile_GetUserFiles_Request) GetSortmethod() string {
	if x != nil && x.Sortmethod != nil {
		return *x.Sortmethod
	}
	return Default_CPublishedFile_GetUserFiles_Request_Sortmethod
}

func (x *CPublishedFile_GetUserFiles_Request) GetPrivacy() uint32 {
	if x != nil && x.Privacy != nil {
		return *x.Privacy
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetRequiredtags() []string {
	if x != nil {
		return x.Requiredtags
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetExcludedtags() []string {
	if x != nil {
		return x.Excludedtags
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetRequiredKvTags() []*CPublishedFile_GetUserFiles_Request_KVTag {
	if x != nil {
		return x.RequiredKvTags
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetFiletype() uint32 {
	if x != nil && x.Filetype != nil {
		return *x.Filetype
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetCreatorAppid() uint32 {
	if x != nil && x.CreatorAppid != nil {
		return *x.CreatorAppid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetMatchCloudFilename() string {
	if x != nil && x.MatchCloudFilename != nil {
		return *x.MatchCloudFilename
	}
	return ""
}

func (x *CPublishedFile_GetUserFiles_Request) GetCacheMaxAgeSeconds() uint32 {
	if x != nil && x.CacheMaxAgeSeconds != nil {
		return *x.CacheMaxAgeSeconds
	}
	return Default_CPublishedFile_GetUserFiles_Request_CacheMaxAgeSeconds
}

func (x *CPublishedFile_GetUserFiles_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CPublishedFile_GetUserFiles_Request_Language
}

func (x *CPublishedFile_GetUserFiles_Request) GetTaggroups() []*CPublishedFile_GetUserFiles_Request_TagGroup {
	if x != nil {
		return x.Taggroups
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetTotalonly() bool {
	if x != nil && x.Totalonly != nil {
		return *x.Totalonly
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetIdsOnly() bool {
	if x != nil && x.IdsOnly != nil {
		return *x.IdsOnly
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnVoteData() bool {
	if x != nil && x.ReturnVoteData != nil {
		return *x.ReturnVoteData
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnVoteData
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnTags() bool {
	if x != nil && x.ReturnTags != nil {
		return *x.ReturnTags
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnKvTags() bool {
	if x != nil && x.ReturnKvTags != nil {
		return *x.ReturnKvTags
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnKvTags
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnPreviews() bool {
	if x != nil && x.ReturnPreviews != nil {
		return *x.ReturnPreviews
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnChildren() bool {
	if x != nil && x.ReturnChildren != nil {
		return *x.ReturnChildren
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnShortDescription() bool {
	if x != nil && x.ReturnShortDescription != nil {
		return *x.ReturnShortDescription
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnShortDescription
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnForSaleData() bool {
	if x != nil && x.ReturnForSaleData != nil {
		return *x.ReturnForSaleData
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnMetadata() bool {
	if x != nil && x.ReturnMetadata != nil {
		return *x.ReturnMetadata
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnMetadata
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnPlaytimeStats() uint32 {
	if x != nil && x.ReturnPlaytimeStats != nil {
		return *x.ReturnPlaytimeStats
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetStripDescriptionBbcode() bool {
	if x != nil && x.StripDescriptionBbcode != nil {
		return *x.StripDescriptionBbcode
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnReactions() bool {
	if x != nil && x.ReturnReactions != nil {
		return *x.ReturnReactions
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnReactions
}

func (x *CPublishedFile_GetUserFiles_Request) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_GetUserFiles_Request_DesiredRevision
}

type CPublishedFile_GetUserFiles_Response struct {
	state                protoimpl.MessageState                      `protogen:"open.v1"`
	Total                *uint32                                     `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Startindex           *uint32                                     `protobuf:"varint,2,opt,name=startindex" json:"startindex,omitempty"`
	Publishedfiledetails []*PublishedFileDetails                     `protobuf:"bytes,3,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
	Apps                 []*CPublishedFile_GetUserFiles_Response_App `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPublishedFile_GetUserFiles_Response) Reset() {
	*x = CPublishedFile_GetUserFiles_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Response) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CPublishedFile_GetUserFiles_Response) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response) GetStartindex() uint32 {
	if x != nil && x.Startindex != nil {
		return *x.Startindex
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Response) GetApps() []*CPublishedFile_GetUserFiles_Response_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CPublishedFile_AreFilesInSubscriptionList_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Appid            *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileids []uint64               `protobuf:"fixed64,2,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	Listtype         *uint32                `protobuf:"varint,3,opt,name=listtype" json:"listtype,omitempty"`
	Filetype         *uint32                `protobuf:"varint,4,opt,name=filetype" json:"filetype,omitempty"`
	Workshopfiletype *uint32                `protobuf:"varint,5,opt,name=workshopfiletype" json:"workshopfiletype,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) Reset() {
	*x = CPublishedFile_AreFilesInSubscriptionList_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AreFilesInSubscriptionList_Request) ProtoMessage() {}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AreFilesInSubscriptionList_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AreFilesInSubscriptionList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetListtype() uint32 {
	if x != nil && x.Listtype != nil {
		return *x.Listtype
	}
	return 0
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetFiletype() uint32 {
	if x != nil && x.Filetype != nil {
		return *x.Filetype
	}
	return 0
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetWorkshopfiletype() uint32 {
	if x != nil && x.Workshopfiletype != nil {
		return *x.Workshopfiletype
	}
	return 0
}

type CPublishedFile_AreFilesInSubscriptionList_Response struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	Files         []*CPublishedFile_AreFilesInSubscriptionList_Response_InList `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response) Reset() {
	*x = CPublishedFile_AreFilesInSubscriptionList_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AreFilesInSubscriptionList_Response) ProtoMessage() {}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AreFilesInSubscriptionList_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AreFilesInSubscriptionList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response) GetFiles() []*CPublishedFile_AreFilesInSubscriptionList_Response_InList {
	if x != nil {
		return x.Files
	}
	return nil
}

type CPublishedFile_Update_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileid *uint64                `protobuf:"fixed64,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Title           *string                `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	FileDescription *string                `protobuf:"bytes,4,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	Visibility      *uint32                `protobuf:"varint,5,opt,name=visibility" json:"visibility,omitempty"`
	Tags            []string               `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Filename        *string                `protobuf:"bytes,7,opt,name=filename" json:"filename,omitempty"`
	PreviewFilename *string                `protobuf:"bytes,8,opt,name=preview_filename,json=previewFilename" json:"preview_filename,omitempty"`
	ImageWidth      *uint32                `protobuf:"varint,15,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight     *uint32                `protobuf:"varint,16,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_Update_Request) Reset() {
	*x = CPublishedFile_Update_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Update_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Update_Request) ProtoMessage() {}

func (x *CPublishedFile_Update_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Update_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Update_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CPublishedFile_Update_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_Update_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetPreviewFilename() string {
	if x != nil && x.PreviewFilename != nil {
		return *x.PreviewFilename
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetImageWidth() uint32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetImageHeight() uint32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

type CPublishedFile_Update_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_Update_Response) Reset() {
	*x = CPublishedFile_Update_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Update_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Update_Response) ProtoMessage() {}

func (x *CPublishedFile_Update_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Update_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Update_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{18}
}

type CPublishedFile_GetChangeHistoryEntry_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Timestamp       *uint32                `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Language        *int32                 `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) Reset() {
	*x = CPublishedFile_GetChangeHistoryEntry_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistoryEntry_Request) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistoryEntry_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistoryEntry_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPublishedFile_GetChangeHistoryEntry_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ChangeDescription *string                `protobuf:"bytes,1,opt,name=change_description,json=changeDescription" json:"change_description,omitempty"`
	Language          *int32                 `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) Reset() {
	*x = CPublishedFile_GetChangeHistoryEntry_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistoryEntry_Response) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistoryEntry_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistoryEntry_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) GetChangeDescription() string {
	if x != nil && x.ChangeDescription != nil {
		return *x.ChangeDescription
	}
	return ""
}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPublishedFile_GetChangeHistory_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	TotalOnly       *bool                  `protobuf:"varint,2,opt,name=total_only,json=totalOnly" json:"total_only,omitempty"`
	Startindex      *uint32                `protobuf:"varint,3,opt,name=startindex" json:"startindex,omitempty"`
	Count           *uint32                `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Language        *int32                 `protobuf:"varint,5,opt,name=language,def=0" json:"language,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CPublishedFile_GetChangeHistory_Request fields.
const (
	Default_CPublishedFile_GetChangeHistory_Request_Language = int32(0)
)

func (x *CPublishedFile_GetChangeHistory_Request) Reset() {
	*x = CPublishedFile_GetChangeHistory_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetChangeHistory_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistory_Request) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistory_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistory_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistory_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CPublishedFile_GetChangeHistory_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistory_Request) GetTotalOnly() bool {
	if x != nil && x.TotalOnly != nil {
		return *x.TotalOnly
	}
	return false
}

func (x *CPublishedFile_GetChangeHistory_Request) GetStartindex() uint32 {
	if x != nil && x.Startindex != nil {
		return *x.Startindex
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistory_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistory_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CPublishedFile_GetChangeHistory_Request_Language
}

type CPublishedFile_GetChangeHistory_Response struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Changes       []*CPublishedFile_GetChangeHistory_Response_ChangeLog `protobuf:"bytes,1,rep,name=changes" json:"changes,omitempty"`
	Total         *uint32                                               `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_GetChangeHistory_Response) Reset() {
	*x = CPublishedFile_GetChangeHistory_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetChangeHistory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistory_Response) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistory_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistory_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CPublishedFile_GetChangeHistory_Response) GetChanges() []*CPublishedFile_GetChangeHistory_Response_ChangeLog {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *CPublishedFile_GetChangeHistory_Response) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type CPublishedFile_RefreshVotingQueue_Request struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Appid            *uint32                 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	MatchingFileType *uint32                 `protobuf:"varint,2,opt,name=matching_file_type,json=matchingFileType" json:"matching_file_type,omitempty"`
	Tags             []string                `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	MatchAllTags     *bool                   `protobuf:"varint,4,opt,name=match_all_tags,json=matchAllTags,def=1" json:"match_all_tags,omitempty"`
	ExcludedTags     []string                `protobuf:"bytes,5,rep,name=excluded_tags,json=excludedTags" json:"excluded_tags,omitempty"`
	DesiredQueueSize *uint32                 `protobuf:"varint,6,opt,name=desired_queue_size,json=desiredQueueSize" json:"desired_queue_size,omitempty"`
	DesiredRevision  *EPublishedFileRevision `protobuf:"varint,8,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CPublishedFile_RefreshVotingQueue_Request fields.
const (
	Default_CPublishedFile_RefreshVotingQueue_Request_MatchAllTags    = bool(true)
	Default_CPublishedFile_RefreshVotingQueue_Request_DesiredRevision = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *CPublishedFile_RefreshVotingQueue_Request) Reset() {
	*x = CPublishedFile_RefreshVotingQueue_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_RefreshVotingQueue_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RefreshVotingQueue_Request) ProtoMessage() {}

func (x *CPublishedFile_RefreshVotingQueue_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RefreshVotingQueue_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RefreshVotingQueue_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetMatchingFileType() uint32 {
	if x != nil && x.MatchingFileType != nil {
		return *x.MatchingFileType
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetMatchAllTags() bool {
	if x != nil && x.MatchAllTags != nil {
		return *x.MatchAllTags
	}
	return Default_CPublishedFile_RefreshVotingQueue_Request_MatchAllTags
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetExcludedTags() []string {
	if x != nil {
		return x.ExcludedTags
	}
	return nil
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetDesiredQueueSize() uint32 {
	if x != nil && x.DesiredQueueSize != nil {
		return *x.DesiredQueueSize
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_RefreshVotingQueue_Request_DesiredRevision
}

type CPublishedFile_RefreshVotingQueue_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_RefreshVotingQueue_Response) Reset() {
	*x = CPublishedFile_RefreshVotingQueue_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_RefreshVotingQueue_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RefreshVotingQueue_Response) ProtoMessage() {}

func (x *CPublishedFile_RefreshVotingQueue_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RefreshVotingQueue_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RefreshVotingQueue_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{24}
}

type CPublishedFile_QueryFiles_Request struct {
	state                  protoimpl.MessageState                        `protogen:"open.v1"`
	QueryType              *uint32                                       `protobuf:"varint,1,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	Page                   *uint32                                       `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	Cursor                 *string                                       `protobuf:"bytes,39,opt,name=cursor" json:"cursor,omitempty"`
	Numperpage             *uint32                                       `protobuf:"varint,3,opt,name=numperpage,def=1" json:"numperpage,omitempty"`
	CreatorAppid           *uint32                                       `protobuf:"varint,4,opt,name=creator_appid,json=creatorAppid" json:"creator_appid,omitempty"`
	Appid                  *uint32                                       `protobuf:"varint,5,opt,name=appid" json:"appid,omitempty"`
	Requiredtags           []string                                      `protobuf:"bytes,6,rep,name=requiredtags" json:"requiredtags,omitempty"`
	Excludedtags           []string                                      `protobuf:"bytes,7,rep,name=excludedtags" json:"excludedtags,omitempty"`
	MatchAllTags           *bool                                         `protobuf:"varint,8,opt,name=match_all_tags,json=matchAllTags,def=1" json:"match_all_tags,omitempty"`
	RequiredFlags          []string                                      `protobuf:"bytes,9,rep,name=required_flags,json=requiredFlags" json:"required_flags,omitempty"`
	OmittedFlags           []string                                      `protobuf:"bytes,10,rep,name=omitted_flags,json=omittedFlags" json:"omitted_flags,omitempty"`
	SearchText             *string                                       `protobuf:"bytes,11,opt,name=search_text,json=searchText" json:"search_text,omitempty"`
	Filetype               *uint32                                       `protobuf:"varint,12,opt,name=filetype" json:"filetype,omitempty"`
	ChildPublishedfileid   *uint64                                       `protobuf:"fixed64,13,opt,name=child_publishedfileid,json=childPublishedfileid" json:"child_publishedfileid,omitempty"`
	Days                   *uint32                                       `protobuf:"varint,14,opt,name=days" json:"days,omitempty"`
	IncludeRecentVotesOnly *bool                                         `protobuf:"varint,15,opt,name=include_recent_votes_only,json=includeRecentVotesOnly" json:"include_recent_votes_only,omitempty"`
	CacheMaxAgeSeconds     *uint32                                       `protobuf:"varint,31,opt,name=cache_max_age_seconds,json=cacheMaxAgeSeconds,def=0" json:"cache_max_age_seconds,omitempty"`
	Language               *int32                                        `protobuf:"varint,33,opt,name=language,def=0" json:"language,omitempty"`
	RequiredKvTags         []*CPublishedFile_QueryFiles_Request_KVTag    `protobuf:"bytes,34,rep,name=required_kv_tags,json=requiredKvTags" json:"required_kv_tags,omitempty"`
	Taggroups              []*CPublishedFile_QueryFiles_Request_TagGroup `protobuf:"bytes,42,rep,name=taggroups" json:"taggroups,omitempty"`
	Totalonly              *bool                                         `protobuf:"varint,16,opt,name=totalonly" json:"totalonly,omitempty"`
	IdsOnly                *bool                                         `protobuf:"varint,35,opt,name=ids_only,json=idsOnly" json:"ids_only,omitempty"`
	ReturnVoteData         *bool                                         `protobuf:"varint,17,opt,name=return_vote_data,json=returnVoteData" json:"return_vote_data,omitempty"`
	ReturnTags             *bool                                         `protobuf:"varint,18,opt,name=return_tags,json=returnTags" json:"return_tags,omitempty"`
	ReturnKvTags           *bool                                         `protobuf:"varint,19,opt,name=return_kv_tags,json=returnKvTags" json:"return_kv_tags,omitempty"`
	ReturnPreviews         *bool                                         `protobuf:"varint,20,opt,name=return_previews,json=returnPreviews" json:"return_previews,omitempty"`
	ReturnChildren         *bool                                         `protobuf:"varint,21,opt,name=return_children,json=returnChildren" json:"return_children,omitempty"`
	ReturnShortDescription *bool                                         `protobuf:"varint,22,opt,name=return_short_description,json=returnShortDescription" json:"return_short_description,omitempty"`
	ReturnForSaleData      *bool                                         `protobuf:"varint,30,opt,name=return_for_sale_data,json=returnForSaleData" json:"return_for_sale_data,omitempty"`
	ReturnMetadata         *bool                                         `protobuf:"varint,32,opt,name=return_metadata,json=returnMetadata,def=0" json:"return_metadata,omitempty"`
	ReturnPlaytimeStats    *uint32                                       `protobuf:"varint,36,opt,name=return_playtime_stats,json=returnPlaytimeStats" json:"return_playtime_stats,omitempty"`
	ReturnDetails          *bool                                         `protobuf:"varint,37,opt,name=return_details,json=returnDetails" json:"return_details,omitempty"`
	StripDescriptionBbcode *bool                                         `protobuf:"varint,38,opt,name=strip_description_bbcode,json=stripDescriptionBbcode" json:"strip_description_bbcode,omitempty"`
	DesiredRevision        *EPublishedFileRevision                       `protobuf:"varint,40,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
	ReturnReactions        *bool                                         `protobuf:"varint,43,opt,name=return_reactions,json=returnReactions,def=0" json:"return_reactions,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for CPublishedFile_QueryFiles_Request fields.
const (
	Default_CPublishedFile_QueryFiles_Request_Numperpage         = uint32(1)
	Default_CPublishedFile_QueryFiles_Request_MatchAllTags       = bool(true)
	Default_CPublishedFile_QueryFiles_Request_CacheMaxAgeSeconds = uint32(0)
	Default_CPublishedFile_QueryFiles_Request_Language           = int32(0)
	Default_CPublishedFile_QueryFiles_Request_ReturnMetadata     = bool(false)
	Default_CPublishedFile_QueryFiles_Request_DesiredRevision    = EPublishedFileRevision_k_EPublishedFileRevision_Default
	Default_CPublishedFile_QueryFiles_Request_ReturnReactions    = bool(false)
)

func (x *CPublishedFile_QueryFiles_Request) Reset() {
	*x = CPublishedFile_QueryFiles_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_QueryFiles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_QueryFiles_Request) ProtoMessage() {}

func (x *CPublishedFile_QueryFiles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_QueryFiles_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_QueryFiles_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CPublishedFile_QueryFiles_Request) GetQueryType() uint32 {
	if x != nil && x.QueryType != nil {
		return *x.QueryType
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *CPublishedFile_QueryFiles_Request) GetNumperpage() uint32 {
	if x != nil && x.Numperpage != nil {
		return *x.Numperpage
	}
	return Default_CPublishedFile_QueryFiles_Request_Numperpage
}

func (x *CPublishedFile_QueryFiles_Request) GetCreatorAppid() uint32 {
	if x != nil && x.CreatorAppid != nil {
		return *x.CreatorAppid
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetRequiredtags() []string {
	if x != nil {
		return x.Requiredtags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetExcludedtags() []string {
	if x != nil {
		return x.Excludedtags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetMatchAllTags() bool {
	if x != nil && x.MatchAllTags != nil {
		return *x.MatchAllTags
	}
	return Default_CPublishedFile_QueryFiles_Request_MatchAllTags
}

func (x *CPublishedFile_QueryFiles_Request) GetRequiredFlags() []string {
	if x != nil {
		return x.RequiredFlags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetOmittedFlags() []string {
	if x != nil {
		return x.OmittedFlags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetSearchText() string {
	if x != nil && x.SearchText != nil {
		return *x.SearchText
	}
	return ""
}

func (x *CPublishedFile_QueryFiles_Request) GetFiletype() uint32 {
	if x != nil && x.Filetype != nil {
		return *x.Filetype
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetChildPublishedfileid() uint64 {
	if x != nil && x.ChildPublishedfileid != nil {
		return *x.ChildPublishedfileid
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetDays() uint32 {
	if x != nil && x.Days != nil {
		return *x.Days
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetIncludeRecentVotesOnly() bool {
	if x != nil && x.IncludeRecentVotesOnly != nil {
		return *x.IncludeRecentVotesOnly
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetCacheMaxAgeSeconds() uint32 {
	if x != nil && x.CacheMaxAgeSeconds != nil {
		return *x.CacheMaxAgeSeconds
	}
	return Default_CPublishedFile_QueryFiles_Request_CacheMaxAgeSeconds
}

func (x *CPublishedFile_QueryFiles_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CPublishedFile_QueryFiles_Request_Language
}

func (x *CPublishedFile_QueryFiles_Request) GetRequiredKvTags() []*CPublishedFile_QueryFiles_Request_KVTag {
	if x != nil {
		return x.RequiredKvTags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetTaggroups() []*CPublishedFile_QueryFiles_Request_TagGroup {
	if x != nil {
		return x.Taggroups
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetTotalonly() bool {
	if x != nil && x.Totalonly != nil {
		return *x.Totalonly
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetIdsOnly() bool {
	if x != nil && x.IdsOnly != nil {
		return *x.IdsOnly
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnVoteData() bool {
	if x != nil && x.ReturnVoteData != nil {
		return *x.ReturnVoteData
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnTags() bool {
	if x != nil && x.ReturnTags != nil {
		return *x.ReturnTags
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnKvTags() bool {
	if x != nil && x.ReturnKvTags != nil {
		return *x.ReturnKvTags
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnPreviews() bool {
	if x != nil && x.ReturnPreviews != nil {
		return *x.ReturnPreviews
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnChildren() bool {
	if x != nil && x.ReturnChildren != nil {
		return *x.ReturnChildren
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnShortDescription() bool {
	if x != nil && x.ReturnShortDescription != nil {
		return *x.ReturnShortDescription
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnForSaleData() bool {
	if x != nil && x.ReturnForSaleData != nil {
		return *x.ReturnForSaleData
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnMetadata() bool {
	if x != nil && x.ReturnMetadata != nil {
		return *x.ReturnMetadata
	}
	return Default_CPublishedFile_QueryFiles_Request_ReturnMetadata
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnPlaytimeStats() uint32 {
	if x != nil && x.ReturnPlaytimeStats != nil {
		return *x.ReturnPlaytimeStats
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnDetails() bool {
	if x != nil && x.ReturnDetails != nil {
		return *x.ReturnDetails
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetStripDescriptionBbcode() bool {
	if x != nil && x.StripDescriptionBbcode != nil {
		return *x.StripDescriptionBbcode
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_QueryFiles_Request_DesiredRevision
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnReactions() bool {
	if x != nil && x.ReturnReactions != nil {
		return *x.ReturnReactions
	}
	return Default_CPublishedFile_QueryFiles_Request_ReturnReactions
}

type CPublishedFile_QueryFiles_Response struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Total                *uint32                 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Publishedfiledetails []*PublishedFileDetails `protobuf:"bytes,2,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
	NextCursor           *string                 `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPublishedFile_QueryFiles_Response) Reset() {
	*x = CPublishedFile_QueryFiles_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_QueryFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_QueryFiles_Response) ProtoMessage() {}

func (x *CPublishedFile_QueryFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_QueryFiles_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_QueryFiles_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CPublishedFile_QueryFiles_Response) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Response) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

type CPublishedFile_AddAppRelationship_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Appid           *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Relationship    *uint32                `protobuf:"varint,3,opt,name=relationship" json:"relationship,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_AddAppRelationship_Request) Reset() {
	*x = CPublishedFile_AddAppRelationship_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_AddAppRelationship_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AddAppRelationship_Request) ProtoMessage() {}

func (x *CPublishedFile_AddAppRelationship_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AddAppRelationship_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AddAppRelationship_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CPublishedFile_AddAppRelationship_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_AddAppRelationship_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_AddAppRelationship_Request) GetRelationship() uint32 {
	if x != nil && x.Relationship != nil {
		return *x.Relationship
	}
	return 0
}

type CPublishedFile_AddAppRelationship_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_AddAppRelationship_Response) Reset() {
	*x = CPublishedFile_AddAppRelationship_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_AddAppRelationship_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AddAppRelationship_Response) ProtoMessage() {}

func (x *CPublishedFile_AddAppRelationship_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AddAppRelationship_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AddAppRelationship_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{28}
}

type CPublishedFile_RemoveAppRelationship_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Appid           *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Relationship    *uint32                `protobuf:"varint,3,opt,name=relationship" json:"relationship,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_RemoveAppRelationship_Request) Reset() {
	*x = CPublishedFile_RemoveAppRelationship_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_RemoveAppRelationship_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RemoveAppRelationship_Request) ProtoMessage() {}

func (x *CPublishedFile_RemoveAppRelationship_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RemoveAppRelationship_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RemoveAppRelationship_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{29}
}

func (x *CPublishedFile_RemoveAppRelationship_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_RemoveAppRelationship_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_RemoveAppRelationship_Request) GetRelationship() uint32 {
	if x != nil && x.Relationship != nil {
		return *x.Relationship
	}
	return 0
}

type CPublishedFile_RemoveAppRelationship_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_RemoveAppRelationship_Response) Reset() {
	*x = CPublishedFile_RemoveAppRelationship_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_RemoveAppRelationship_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RemoveAppRelationship_Response) ProtoMessage() {}

func (x *CPublishedFile_RemoveAppRelationship_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RemoveAppRelationship_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RemoveAppRelationship_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{30}
}

type CPublishedFile_GetAppRelationships_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_GetAppRelationships_Request) Reset() {
	*x = CPublishedFile_GetAppRelationships_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetAppRelationships_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationships_Request) ProtoMessage() {}

func (x *CPublishedFile_GetAppRelationships_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationships_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationships_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{31}
}

func (x *CPublishedFile_GetAppRelationships_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

type CPublishedFile_GetAppRelationships_Response struct {
	state            protoimpl.MessageState                                         `protogen:"open.v1"`
	AppRelationships []*CPublishedFile_GetAppRelationships_Response_AppRelationship `protobuf:"bytes,3,rep,name=app_relationships,json=appRelationships" json:"app_relationships,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CPublishedFile_GetAppRelationships_Response) Reset() {
	*x = CPublishedFile_GetAppRelationships_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetAppRelationships_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationships_Response) ProtoMessage() {}

func (x *CPublishedFile_GetAppRelationships_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationships_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationships_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CPublishedFile_GetAppRelationships_Response) GetAppRelationships() []*CPublishedFile_GetAppRelationships_Response_AppRelationship {
	if x != nil {
		return x.AppRelationships
	}
	return nil
}

type CPublishedFile_StartPlaytimeTracking_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Appid            *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileids []uint64               `protobuf:"varint,2,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CPublishedFile_StartPlaytimeTracking_Request) Reset() {
	*x = CPublishedFile_StartPlaytimeTracking_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_StartPlaytimeTracking_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StartPlaytimeTracking_Request) ProtoMessage() {}

func (x *CPublishedFile_StartPlaytimeTracking_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StartPlaytimeTracking_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StartPlaytimeTracking_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CPublishedFile_StartPlaytimeTracking_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_StartPlaytimeTracking_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

type CPublishedFile_StartPlaytimeTracking_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_StartPlaytimeTracking_Response) Reset() {
	*x = CPublishedFile_StartPlaytimeTracking_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_StartPlaytimeTracking_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StartPlaytimeTracking_Response) ProtoMessage() {}

func (x *CPublishedFile_StartPlaytimeTracking_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StartPlaytimeTracking_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StartPlaytimeTracking_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{34}
}

type CPublishedFile_StopPlaytimeTracking_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Appid            *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileids []uint64               `protobuf:"varint,2,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CPublishedFile_StopPlaytimeTracking_Request) Reset() {
	*x = CPublishedFile_StopPlaytimeTracking_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_StopPlaytimeTracking_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StopPlaytimeTracking_Request) ProtoMessage() {}

func (x *CPublishedFile_StopPlaytimeTracking_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StopPlaytimeTracking_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StopPlaytimeTracking_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{35}
}

func (x *CPublishedFile_StopPlaytimeTracking_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_StopPlaytimeTracking_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

type CPublishedFile_StopPlaytimeTracking_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_StopPlaytimeTracking_Response) Reset() {
	*x = CPublishedFile_StopPlaytimeTracking_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_StopPlaytimeTracking_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StopPlaytimeTracking_Response) ProtoMessage() {}

func (x *CPublishedFile_StopPlaytimeTracking_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StopPlaytimeTracking_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StopPlaytimeTracking_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{36}
}

type CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) Reset() {
	*x = CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) ProtoMessage() {}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{37}
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) Reset() {
	*x = CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) ProtoMessage() {}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{38}
}

type CPublishedFile_SetPlaytimeForControllerConfigs_Request struct {
	state                 protoimpl.MessageState                                                          `protogen:"open.v1"`
	Appid                 *uint32                                                                         `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ControllerConfigUsage []*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage `protobuf:"bytes,2,rep,name=controller_config_usage,json=controllerConfigUsage" json:"controller_config_usage,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) Reset() {
	*x = CPublishedFile_SetPlaytimeForControllerConfigs_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_SetPlaytimeForControllerConfigs_Request) ProtoMessage() {}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_SetPlaytimeForControllerConfigs_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_SetPlaytimeForControllerConfigs_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) GetControllerConfigUsage() []*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage {
	if x != nil {
		return x.ControllerConfigUsage
	}
	return nil
}

type CPublishedFile_SetPlaytimeForControllerConfigs_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Response) Reset() {
	*x = CPublishedFile_SetPlaytimeForControllerConfigs_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_SetPlaytimeForControllerConfigs_Response) ProtoMessage() {}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_SetPlaytimeForControllerConfigs_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_SetPlaytimeForControllerConfigs_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{40}
}

type CPublishedFile_AddChild_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid      *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ChildPublishedfileid *uint64                `protobuf:"varint,2,opt,name=child_publishedfileid,json=childPublishedfileid" json:"child_publishedfileid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPublishedFile_AddChild_Request) Reset() {
	*x = CPublishedFile_AddChild_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_AddChild_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AddChild_Request) ProtoMessage() {}

func (x *CPublishedFile_AddChild_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AddChild_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AddChild_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{41}
}

func (x *CPublishedFile_AddChild_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_AddChild_Request) GetChildPublishedfileid() uint64 {
	if x != nil && x.ChildPublishedfileid != nil {
		return *x.ChildPublishedfileid
	}
	return 0
}

type CPublishedFile_AddChild_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_AddChild_Response) Reset() {
	*x = CPublishedFile_AddChild_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_AddChild_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AddChild_Response) ProtoMessage() {}

func (x *CPublishedFile_AddChild_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AddChild_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AddChild_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{42}
}

type CPublishedFile_RemoveChild_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid      *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ChildPublishedfileid *uint64                `protobuf:"varint,2,opt,name=child_publishedfileid,json=childPublishedfileid" json:"child_publishedfileid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPublishedFile_RemoveChild_Request) Reset() {
	*x = CPublishedFile_RemoveChild_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_RemoveChild_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RemoveChild_Request) ProtoMessage() {}

func (x *CPublishedFile_RemoveChild_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RemoveChild_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RemoveChild_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{43}
}

func (x *CPublishedFile_RemoveChild_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_RemoveChild_Request) GetChildPublishedfileid() uint64 {
	if x != nil && x.ChildPublishedfileid != nil {
		return *x.ChildPublishedfileid
	}
	return 0
}

type CPublishedFile_RemoveChild_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_RemoveChild_Response) Reset() {
	*x = CPublishedFile_RemoveChild_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_RemoveChild_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RemoveChild_Response) ProtoMessage() {}

func (x *CPublishedFile_RemoveChild_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RemoveChild_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RemoveChild_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{44}
}

type CPublishedFile_GetUserVoteSummary_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileids []uint64               `protobuf:"fixed64,1,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CPublishedFile_GetUserVoteSummary_Request) Reset() {
	*x = CPublishedFile_GetUserVoteSummary_Request{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserVoteSummary_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserVoteSummary_Request) ProtoMessage() {}

func (x *CPublishedFile_GetUserVoteSummary_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserVoteSummary_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserVoteSummary_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{45}
}

func (x *CPublishedFile_GetUserVoteSummary_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

type CPublishedFile_GetUserVoteSummary_Response struct {
	state         protoimpl.MessageState                                    `protogen:"open.v1"`
	Summaries     []*CPublishedFile_GetUserVoteSummary_Response_VoteSummary `protobuf:"bytes,1,rep,name=summaries" json:"summaries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_GetUserVoteSummary_Response) Reset() {
	*x = CPublishedFile_GetUserVoteSummary_Response{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserVoteSummary_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserVoteSummary_Response) ProtoMessage() {}

func (x *CPublishedFile_GetUserVoteSummary_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserVoteSummary_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserVoteSummary_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{46}
}

func (x *CPublishedFile_GetUserVoteSummary_Response) GetSummaries() []*CPublishedFile_GetUserVoteSummary_Response_VoteSummary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type CPublishedFile_FileSubscribed_Notification struct {
	state           protoimpl.MessageState                                     `protogen:"open.v1"`
	PublishedFileId *uint64                                                    `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32                                                    `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileHcontent    *uint64                                                    `protobuf:"fixed64,3,opt,name=file_hcontent,json=fileHcontent" json:"file_hcontent,omitempty"`
	FileSize        *uint32                                                    `protobuf:"varint,4,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RtimeSubscribed *uint32                                                    `protobuf:"varint,5,opt,name=rtime_subscribed,json=rtimeSubscribed" json:"rtime_subscribed,omitempty"`
	IsDepotContent  *bool                                                      `protobuf:"varint,6,opt,name=is_depot_content,json=isDepotContent" json:"is_depot_content,omitempty"`
	RtimeUpdated    *uint32                                                    `protobuf:"varint,7,opt,name=rtime_updated,json=rtimeUpdated" json:"rtime_updated,omitempty"`
	Revisions       []*CPublishedFile_FileSubscribed_Notification_RevisionData `protobuf:"bytes,8,rep,name=revisions" json:"revisions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_FileSubscribed_Notification) Reset() {
	*x = CPublishedFile_FileSubscribed_Notification{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_FileSubscribed_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_FileSubscribed_Notification) ProtoMessage() {}

func (x *CPublishedFile_FileSubscribed_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_FileSubscribed_Notification.ProtoReflect.Descriptor instead.
func (*CPublishedFile_FileSubscribed_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{47}
}

func (x *CPublishedFile_FileSubscribed_Notification) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetFileHcontent() uint64 {
	if x != nil && x.FileHcontent != nil {
		return *x.FileHcontent
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetRtimeSubscribed() uint32 {
	if x != nil && x.RtimeSubscribed != nil {
		return *x.RtimeSubscribed
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetIsDepotContent() bool {
	if x != nil && x.IsDepotContent != nil {
		return *x.IsDepotContent
	}
	return false
}

func (x *CPublishedFile_FileSubscribed_Notification) GetRtimeUpdated() uint32 {
	if x != nil && x.RtimeUpdated != nil {
		return *x.RtimeUpdated
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetRevisions() []*CPublishedFile_FileSubscribed_Notification_RevisionData {
	if x != nil {
		return x.Revisions
	}
	return nil
}

type CPublishedFile_FileUnsubscribed_Notification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PublishedFileId *uint64                `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32                `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_FileUnsubscribed_Notification) Reset() {
	*x = CPublishedFile_FileUnsubscribed_Notification{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_FileUnsubscribed_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_FileUnsubscribed_Notification) ProtoMessage() {}

func (x *CPublishedFile_FileUnsubscribed_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_FileUnsubscribed_Notification.ProtoReflect.Descriptor instead.
func (*CPublishedFile_FileUnsubscribed_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{48}
}

func (x *CPublishedFile_FileUnsubscribed_Notification) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_FileUnsubscribed_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CPublishedFile_FileDeleted_Client_Notification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PublishedFileId *uint64                `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32                `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_FileDeleted_Client_Notification) Reset() {
	*x = CPublishedFile_FileDeleted_Client_Notification{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_FileDeleted_Client_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_FileDeleted_Client_Notification) ProtoMessage() {}

func (x *CPublishedFile_FileDeleted_Client_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_FileDeleted_Client_Notification.ProtoReflect.Descriptor instead.
func (*CPublishedFile_FileDeleted_Client_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{49}
}

func (x *CPublishedFile_FileDeleted_Client_Notification) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_FileDeleted_Client_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type PublishedFileDetails_Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           *string                `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Adminonly     *bool                  `protobuf:"varint,2,opt,name=adminonly" json:"adminonly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishedFileDetails_Tag) Reset() {
	*x = PublishedFileDetails_Tag{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Tag) ProtoMessage() {}

func (x *PublishedFileDetails_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Tag.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Tag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PublishedFileDetails_Tag) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *PublishedFileDetails_Tag) GetAdminonly() bool {
	if x != nil && x.Adminonly != nil {
		return *x.Adminonly
	}
	return false
}

type PublishedFileDetails_Preview struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Previewid         *uint64                `protobuf:"varint,1,opt,name=previewid" json:"previewid,omitempty"`
	Sortorder         *uint32                `protobuf:"varint,2,opt,name=sortorder" json:"sortorder,omitempty"`
	Url               *string                `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Size              *uint32                `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Filename          *string                `protobuf:"bytes,5,opt,name=filename" json:"filename,omitempty"`
	Youtubevideoid    *string                `protobuf:"bytes,6,opt,name=youtubevideoid" json:"youtubevideoid,omitempty"`
	PreviewType       *uint32                `protobuf:"varint,7,opt,name=preview_type,json=previewType" json:"preview_type,omitempty"`
	ExternalReference *string                `protobuf:"bytes,8,opt,name=external_reference,json=externalReference" json:"external_reference,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PublishedFileDetails_Preview) Reset() {
	*x = PublishedFileDetails_Preview{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_Preview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Preview) ProtoMessage() {}

func (x *PublishedFileDetails_Preview) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Preview.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Preview) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9, 1}
}

func (x *PublishedFileDetails_Preview) GetPreviewid() uint64 {
	if x != nil && x.Previewid != nil {
		return *x.Previewid
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetSortorder() uint32 {
	if x != nil && x.Sortorder != nil {
		return *x.Sortorder
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetYoutubevideoid() string {
	if x != nil && x.Youtubevideoid != nil {
		return *x.Youtubevideoid
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetPreviewType() uint32 {
	if x != nil && x.PreviewType != nil {
		return *x.PreviewType
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetExternalReference() string {
	if x != nil && x.ExternalReference != nil {
		return *x.ExternalReference
	}
	return ""
}

type PublishedFileDetails_Child struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Sortorder       *uint32                `protobuf:"varint,2,opt,name=sortorder" json:"sortorder,omitempty"`
	FileType        *uint32                `protobuf:"varint,3,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PublishedFileDetails_Child) Reset() {
	*x = PublishedFileDetails_Child{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Child) ProtoMessage() {}

func (x *PublishedFileDetails_Child) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Child.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Child) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9, 2}
}

func (x *PublishedFileDetails_Child) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *PublishedFileDetails_Child) GetSortorder() uint32 {
	if x != nil && x.Sortorder != nil {
		return *x.Sortorder
	}
	return 0
}

func (x *PublishedFileDetails_Child) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

type PublishedFileDetails_KVTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishedFileDetails_KVTag) Reset() {
	*x = PublishedFileDetails_KVTag{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_KVTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_KVTag) ProtoMessage() {}

func (x *PublishedFileDetails_KVTag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_KVTag.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_KVTag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9, 3}
}

func (x *PublishedFileDetails_KVTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *PublishedFileDetails_KVTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PublishedFileDetails_VoteData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Score         *float32               `protobuf:"fixed32,1,opt,name=score" json:"score,omitempty"`
	VotesUp       *uint32                `protobuf:"varint,2,opt,name=votes_up,json=votesUp" json:"votes_up,omitempty"`
	VotesDown     *uint32                `protobuf:"varint,3,opt,name=votes_down,json=votesDown" json:"votes_down,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishedFileDetails_VoteData) Reset() {
	*x = PublishedFileDetails_VoteData{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_VoteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_VoteData) ProtoMessage() {}

func (x *PublishedFileDetails_VoteData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_VoteData.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_VoteData) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9, 4}
}

func (x *PublishedFileDetails_VoteData) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *PublishedFileDetails_VoteData) GetVotesUp() uint32 {
	if x != nil && x.VotesUp != nil {
		return *x.VotesUp
	}
	return 0
}

func (x *PublishedFileDetails_VoteData) GetVotesDown() uint32 {
	if x != nil && x.VotesDown != nil {
		return *x.VotesDown
	}
	return 0
}

type PublishedFileDetails_ForSaleData struct {
	state                 protoimpl.MessageState       `protogen:"open.v1"`
	IsForSale             *bool                        `protobuf:"varint,1,opt,name=is_for_sale,json=isForSale" json:"is_for_sale,omitempty"`
	PriceCategory         *uint32                      `protobuf:"varint,2,opt,name=price_category,json=priceCategory" json:"price_category,omitempty"`
	Estatus               *EPublishedFileForSaleStatus `protobuf:"varint,3,opt,name=estatus,enum=EPublishedFileForSaleStatus,def=0" json:"estatus,omitempty"`
	PriceCategoryFloor    *uint32                      `protobuf:"varint,4,opt,name=price_category_floor,json=priceCategoryFloor" json:"price_category_floor,omitempty"`
	PriceIsPayWhatYouWant *bool                        `protobuf:"varint,5,opt,name=price_is_pay_what_you_want,json=priceIsPayWhatYouWant" json:"price_is_pay_what_you_want,omitempty"`
	DiscountPercentage    *uint32                      `protobuf:"varint,6,opt,name=discount_percentage,json=discountPercentage" json:"discount_percentage,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for PublishedFileDetails_ForSaleData fields.
const (
	Default_PublishedFileDetails_ForSaleData_Estatus = EPublishedFileForSaleStatus_k_PFFSS_NotForSale
)

func (x *PublishedFileDetails_ForSaleData) Reset() {
	*x = PublishedFileDetails_ForSaleData{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_ForSaleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_ForSaleData) ProtoMessage() {}

func (x *PublishedFileDetails_ForSaleData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_ForSaleData.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_ForSaleData) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9, 5}
}

func (x *PublishedFileDetails_ForSaleData) GetIsForSale() bool {
	if x != nil && x.IsForSale != nil {
		return *x.IsForSale
	}
	return false
}

func (x *PublishedFileDetails_ForSaleData) GetPriceCategory() uint32 {
	if x != nil && x.PriceCategory != nil {
		return *x.PriceCategory
	}
	return 0
}

func (x *PublishedFileDetails_ForSaleData) GetEstatus() EPublishedFileForSaleStatus {
	if x != nil && x.Estatus != nil {
		return *x.Estatus
	}
	return Default_PublishedFileDetails_ForSaleData_Estatus
}

func (x *PublishedFileDetails_ForSaleData) GetPriceCategoryFloor() uint32 {
	if x != nil && x.PriceCategoryFloor != nil {
		return *x.PriceCategoryFloor
	}
	return 0
}

func (x *PublishedFileDetails_ForSaleData) GetPriceIsPayWhatYouWant() bool {
	if x != nil && x.PriceIsPayWhatYouWant != nil {
		return *x.PriceIsPayWhatYouWant
	}
	return false
}

func (x *PublishedFileDetails_ForSaleData) GetDiscountPercentage() uint32 {
	if x != nil && x.DiscountPercentage != nil {
		return *x.DiscountPercentage
	}
	return 0
}

type PublishedFileDetails_PlaytimeStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PlaytimeSeconds *uint64                `protobuf:"varint,1,opt,name=playtime_seconds,json=playtimeSeconds" json:"playtime_seconds,omitempty"`
	NumSessions     *uint64                `protobuf:"varint,2,opt,name=num_sessions,json=numSessions" json:"num_sessions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PublishedFileDetails_PlaytimeStats) Reset() {
	*x = PublishedFileDetails_PlaytimeStats{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_PlaytimeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_PlaytimeStats) ProtoMessage() {}

func (x *PublishedFileDetails_PlaytimeStats) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_PlaytimeStats.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_PlaytimeStats) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9, 6}
}

func (x *PublishedFileDetails_PlaytimeStats) GetPlaytimeSeconds() uint64 {
	if x != nil && x.PlaytimeSeconds != nil {
		return *x.PlaytimeSeconds
	}
	return 0
}

func (x *PublishedFileDetails_PlaytimeStats) GetNumSessions() uint64 {
	if x != nil && x.NumSessions != nil {
		return *x.NumSessions
	}
	return 0
}

type PublishedFileDetails_Reaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reactionid    *uint32                `protobuf:"varint,1,opt,name=reactionid" json:"reactionid,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishedFileDetails_Reaction) Reset() {
	*x = PublishedFileDetails_Reaction{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Reaction) ProtoMessage() {}

func (x *PublishedFileDetails_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Reaction.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Reaction) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9, 7}
}

func (x *PublishedFileDetails_Reaction) GetReactionid() uint32 {
	if x != nil && x.Reactionid != nil {
		return *x.Reactionid
	}
	return 0
}

func (x *PublishedFileDetails_Reaction) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CPublishedFile_GetItemInfo_Request_WorkshopItem struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	PublishedFileId *uint64                 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32                 `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	DesiredRevision *EPublishedFileRevision `protobuf:"varint,3,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CPublishedFile_GetItemInfo_Request_WorkshopItem fields.
const (
	Default_CPublishedFile_GetItemInfo_Request_WorkshopItem_DesiredRevision = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) Reset() {
	*x = CPublishedFile_GetItemInfo_Request_WorkshopItem{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemInfo_Request_WorkshopItem) ProtoMessage() {}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemInfo_Request_WorkshopItem.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemInfo_Request_WorkshopItem) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_GetItemInfo_Request_WorkshopItem_DesiredRevision
}

type CPublishedFile_GetItemInfo_Response_WorkshopItemInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PublishedFileId *uint64                `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32                `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	ManifestId      *uint64                `protobuf:"fixed64,3,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
	Flags           *uint32                `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) Reset() {
	*x = CPublishedFile_GetItemInfo_Response_WorkshopItemInfo{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) ProtoMessage() {}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemInfo_Response_WorkshopItemInfo.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type CPublishedFile_GetUserFiles_Request_KVTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) Reset() {
	*x = CPublishedFile_GetUserFiles_Request_KVTag{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Request_KVTag) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Request_KVTag.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Request_KVTag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CPublishedFile_GetUserFiles_Request_TagGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          []string               `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_GetUserFiles_Request_TagGroup) Reset() {
	*x = CPublishedFile_GetUserFiles_Request_TagGroup{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserFiles_Request_TagGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Request_TagGroup) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Request_TagGroup) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Request_TagGroup.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Request_TagGroup) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{13, 1}
}

func (x *CPublishedFile_GetUserFiles_Request_TagGroup) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CPublishedFile_GetUserFiles_Response_App struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Shortcutid    *uint32                `protobuf:"varint,3,opt,name=shortcutid" json:"shortcutid,omitempty"`
	Private       *bool                  `protobuf:"varint,4,opt,name=private" json:"private,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_GetUserFiles_Response_App) Reset() {
	*x = CPublishedFile_GetUserFiles_Response_App{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserFiles_Response_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Response_App) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Response_App) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Response_App.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Response_App) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetShortcutid() uint32 {
	if x != nil && x.Shortcutid != nil {
		return *x.Shortcutid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetPrivate() bool {
	if x != nil && x.Private != nil {
		return *x.Private
	}
	return false
}

type CPublishedFile_AreFilesInSubscriptionList_Response_InList struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Inlist          *bool                  `protobuf:"varint,2,opt,name=inlist" json:"inlist,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) Reset() {
	*x = CPublishedFile_AreFilesInSubscriptionList_Response_InList{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AreFilesInSubscriptionList_Response_InList) ProtoMessage() {}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AreFilesInSubscriptionList_Response_InList.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AreFilesInSubscriptionList_Response_InList) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) GetInlist() bool {
	if x != nil && x.Inlist != nil {
		return *x.Inlist
	}
	return false
}

type CPublishedFile_GetChangeHistory_Response_ChangeLog struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Timestamp         *uint32                `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	ChangeDescription *string                `protobuf:"bytes,2,opt,name=change_description,json=changeDescription" json:"change_description,omitempty"`
	Language          *int32                 `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) Reset() {
	*x = CPublishedFile_GetChangeHistory_Response_ChangeLog{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistory_Response_ChangeLog) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistory_Response_ChangeLog.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistory_Response_ChangeLog) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) GetChangeDescription() string {
	if x != nil && x.ChangeDescription != nil {
		return *x.ChangeDescription
	}
	return ""
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPublishedFile_QueryFiles_Request_KVTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_QueryFiles_Request_KVTag) Reset() {
	*x = CPublishedFile_QueryFiles_Request_KVTag{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_QueryFiles_Request_KVTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_QueryFiles_Request_KVTag) ProtoMessage() {}

func (x *CPublishedFile_QueryFiles_Request_KVTag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_QueryFiles_Request_KVTag.ProtoReflect.Descriptor instead.
func (*CPublishedFile_QueryFiles_Request_KVTag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CPublishedFile_QueryFiles_Request_KVTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CPublishedFile_QueryFiles_Request_KVTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CPublishedFile_QueryFiles_Request_TagGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          []string               `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_QueryFiles_Request_TagGroup) Reset() {
	*x = CPublishedFile_QueryFiles_Request_TagGroup{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_QueryFiles_Request_TagGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_QueryFiles_Request_TagGroup) ProtoMessage() {}

func (x *CPublishedFile_QueryFiles_Request_TagGroup) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_QueryFiles_Request_TagGroup.ProtoReflect.Descriptor instead.
func (*CPublishedFile_QueryFiles_Request_TagGroup) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{25, 1}
}

func (x *CPublishedFile_QueryFiles_Request_TagGroup) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CPublishedFile_GetAppRelationships_Response_AppRelationship struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Relationship  *uint32                `protobuf:"varint,2,opt,name=relationship" json:"relationship,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) Reset() {
	*x = CPublishedFile_GetAppRelationships_Response_AppRelationship{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationships_Response_AppRelationship) ProtoMessage() {}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationships_Response_AppRelationship.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationships_Response_AppRelationship) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{32, 0}
}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) GetRelationship() uint32 {
	if x != nil && x.Relationship != nil {
		return *x.Relationship
	}
	return 0
}

type CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	SecondsActive   *float32               `protobuf:"fixed32,2,opt,name=seconds_active,json=secondsActive" json:"seconds_active,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) Reset() {
	*x = CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) ProtoMessage() {}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage.ProtoReflect.Descriptor instead.
func (*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{39, 0}
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) GetSecondsActive() float32 {
	if x != nil && x.SecondsActive != nil {
		return *x.SecondsActive
	}
	return 0
}

type CPublishedFile_GetUserVoteSummary_Response_VoteSummary struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	VoteFor         *bool                  `protobuf:"varint,2,opt,name=vote_for,json=voteFor" json:"vote_for,omitempty"`
	VoteAgainst     *bool                  `protobuf:"varint,3,opt,name=vote_against,json=voteAgainst" json:"vote_against,omitempty"`
	Reported        *bool                  `protobuf:"varint,4,opt,name=reported" json:"reported,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) Reset() {
	*x = CPublishedFile_GetUserVoteSummary_Response_VoteSummary{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserVoteSummary_Response_VoteSummary) ProtoMessage() {}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserVoteSummary_Response_VoteSummary.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserVoteSummary_Response_VoteSummary) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{46, 0}
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) GetVoteFor() bool {
	if x != nil && x.VoteFor != nil {
		return *x.VoteFor
	}
	return false
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) GetVoteAgainst() bool {
	if x != nil && x.VoteAgainst != nil {
		return *x.VoteAgainst
	}
	return false
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) GetReported() bool {
	if x != nil && x.Reported != nil {
		return *x.Reported
	}
	return false
}

type CPublishedFile_FileSubscribed_Notification_RevisionData struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Revision      *EPublishedFileRevision `protobuf:"varint,1,opt,name=revision,enum=EPublishedFileRevision,def=0" json:"revision,omitempty"`
	FileHcontent  *uint64                 `protobuf:"fixed64,2,opt,name=file_hcontent,json=fileHcontent" json:"file_hcontent,omitempty"`
	RtimeUpdated  *uint32                 `protobuf:"varint,3,opt,name=rtime_updated,json=rtimeUpdated" json:"rtime_updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CPublishedFile_FileSubscribed_Notification_RevisionData fields.
const (
	Default_CPublishedFile_FileSubscribed_Notification_RevisionData_Revision = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) Reset() {
	*x = CPublishedFile_FileSubscribed_Notification_RevisionData{}
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_FileSubscribed_Notification_RevisionData) ProtoMessage() {}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_FileSubscribed_Notification_RevisionData.ProtoReflect.Descriptor instead.
func (*CPublishedFile_FileSubscribed_Notification_RevisionData) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{47, 0}
}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) GetRevision() EPublishedFileRevision {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return Default_CPublishedFile_FileSubscribed_Notification_RevisionData_Revision
}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) GetFileHcontent() uint64 {
	if x != nil && x.FileHcontent != nil {
		return *x.FileHcontent
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) GetRtimeUpdated() uint32 {
	if x != nil && x.RtimeUpdated != nil {
		return *x.RtimeUpdated
	}
	return 0
}

var File_steammessages_publishedfile_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_publishedfile_steamclient_proto_rawDesc = "" +
	"\n" +
	"-steammessages_publishedfile.steamclient.proto\x1a,steammessages_unified_base.steamclient.proto\"\xa4\x01\n" +
	" CPublishedFile_Subscribe_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12\x1b\n" +
	"\tlist_type\x18\x02 \x01(\rR\blistType\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\x05R\x05appid\x12#\n" +
	"\rnotify_client\x18\x04 \x01(\bR\fnotifyClient\"#\n" +
	"!CPublishedFile_Subscribe_Response\"\xa6\x01\n" +
	"\"CPublishedFile_Unsubscribe_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12\x1b\n" +
	"\tlist_type\x18\x02 \x01(\rR\blistType\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\x05R\x05appid\x12#\n" +
	"\rnotify_client\x18\x04 \x01(\bR\fnotifyClient\"%\n" +
	"#CPublishedFile_Unsubscribe_Response\"O\n" +
	"#CPublishedFile_CanSubscribe_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\"K\n" +
	"$CPublishedFile_CanSubscribe_Response\x12#\n" +
	"\rcan_subscribe\x18\x01 \x01(\bR\fcanSubscribe\"\x9e\f\n" +
	"\x1eCPublishedFile_Publish_Request\x12C\n" +
	"\x05appid\x18\x01 \x01(\rB-\x82\xb5\x18)App Id this file is being published FROM.R\x05appid\x12R\n" +
	"\x0econsumer_appid\x18\x02 \x01(\rB+\x82\xb5\x18'App Id this file is being published TO.R\rconsumerAppid\x12Z\n" +
	"\rcloudfilename\x18\x03 \x01(\tB4\x82\xb5\x180Name of the file to publish in the user's cloud.R\rcloudfilename\x12q\n" +
	"\x15preview_cloudfilename\x18\x04 \x01(\tB<\x82\xb5\x188Name of the file to use as the published file's preview.R\x14previewCloudfilename\x12<\n" +
	"\x05title\x18\x05 \x01(\tB&\x82\xb5\x18\"Text title for the published file.R\x05title\x12W\n" +
	"\x10file_description\x18\x06 \x01(\tB,\x82\xb5\x18(Text description for the published file.R\x0ffileDescription\x12V\n" +
	"\tfile_type\x18\a \x01(\rB9\x82\xb5\x185(EWorkshopFileType) Type of Workshop file to publish.R\bfileType\x12_\n" +
	"\x16consumer_shortcut_name\x18\b \x01(\tB)\x82\xb5\x18%Shortcut name for the published file.R\x14consumerShortcutName\x12Z\n" +
	"\x10youtube_username\x18\t \x01(\tB/\x82\xb5\x18+(Optional) User's YouTube account username.R\x0fyoutubeUsername\x12l\n" +
	"\x0fyoutube_videoid\x18\n" +
	" \x01(\tBC\x82\xb5\x18?(Optional) Video Id of a YouTube video for this published file.R\x0eyoutubeVideoid\x12\x8d\x01\n" +
	"\n" +
	"visibility\x18\v \x01(\rBm\x82\xb5\x18i(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)R\n" +
	"visibility\x12x\n" +
	"\fredirect_uri\x18\f \x01(\tBU\x82\xb5\x18Q(Optional) If supplied, the resulting published file's Id is appended to the URI.R\vredirectUri\x12J\n" +
	"\x04tags\x18\r \x03(\tB6\x82\xb5\x182Array of text tags to apply to the published file.R\x04tags\x12i\n" +
	"\x0fcollection_type\x18\x0e \x01(\tB@\x82\xb5\x18<(Optional) Type of collection the published file represents.R\x0ecollectionType\x12W\n" +
	"\tgame_type\x18\x0f \x01(\tB:\x82\xb5\x186(Optional) Type of game the published file represents.R\bgameType\x12`\n" +
	"\x03url\x18\x10 \x01(\tBN\x82\xb5\x18J(Optional) If this represents a game, this is the URL to that game's page.R\x03url\"n\n" +
	"\x1fCPublishedFile_Publish_Response\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12!\n" +
	"\fredirect_uri\x18\x02 \x01(\tR\vredirectUri\"\x8d\f\n" +
	"!CPublishedFile_GetDetails_Request\x12b\n" +
	"\x10publishedfileids\x18\x01 \x03(\x06B6\x82\xb5\x182Set of published file Ids to retrieve details for.R\x10publishedfileids\x12^\n" +
	"\vincludetags\x18\x02 \x01(\bB<\x82\xb5\x188If true, return tag information in the returned details.R\vincludetags\x12~\n" +
	"\x19includeadditionalpreviews\x18\x03 \x01(\bB@\x82\xb5\x18<If true, return preview information in the returned details.R\x19includeadditionalpreviews\x12_\n" +
	"\x0fincludechildren\x18\x04 \x01(\bB5\x82\xb5\x181If true, return children in the returned details.R\x0fincludechildren\x12a\n" +
	"\rincludekvtags\x18\x05 \x01(\bB;\x82\xb5\x187If true, return key value tags in the returned details.R\rincludekvtags\x12Z\n" +
	"\fincludevotes\x18\x06 \x01(\bB6\x82\xb5\x182If true, return vote data in the returned details.R\fincludevotes\x12u\n" +
	"\x11short_description\x18\b \x01(\bBH\x82\xb5\x18DIf true, return a short description instead of the full description.R\x10shortDescription\x12`\n" +
	"\x12includeforsaledata\x18\n" +
	" \x01(\bB0\x82\xb5\x18,If true, return pricing data, if applicable.R\x12includeforsaledata\x12S\n" +
	"\x0fincludemetadata\x18\v \x01(\bB)\x82\xb5\x18%If true, populate the metadata field.R\x0fincludemetadata\x12_\n" +
	"\blanguage\x18\f \x01(\x05:\x010B@\x82\xb5\x18<Specifies the localized text to return. Defaults to English.R\blanguage\x12|\n" +
	"\x15return_playtime_stats\x18\r \x01(\rBH\x82\xb5\x18DReturn playtime stats for the specified number of days before today.R\x13returnPlaytimeStats\x12\x14\n" +
	"\x05appid\x18\x0e \x01(\rR\x05appid\x12^\n" +
	"\x18strip_description_bbcode\x18\x0f \x01(\bB$\x82\xb5\x18 Strips BBCode from descriptions.R\x16stripDescriptionBbcode\x12\x95\x01\n" +
	"\x10desired_revision\x18\x10 \x01(\x0e2\x17.EPublishedFileRevision: k_EPublishedFileRevision_DefaultB/\x82\xb5\x18+Return the data for the specified revision.R\x0fdesiredRevision\x12i\n" +
	"\x10includereactions\x18\x11 \x01(\b:\x05falseB6\x82\xb5\x182If true, then reactions to items will be returned.R\x10includereactions\"\xeb!\n" +
	"\x14PublishedFileDetails\x12\x16\n" +
	"\x06result\x18\x01 \x01(\rR\x06result\x12(\n" +
	"\x0fpublishedfileid\x18\x02 \x01(\x04R\x0fpublishedfileid\x12\x18\n" +
	"\acreator\x18\x03 \x01(\x06R\acreator\x12#\n" +
	"\rcreator_appid\x18\x04 \x01(\rR\fcreatorAppid\x12%\n" +
	"\x0econsumer_appid\x18\x05 \x01(\rR\rconsumerAppid\x12/\n" +
	"\x13consumer_shortcutid\x18\x06 \x01(\rR\x12consumerShortcutid\x12\x1a\n" +
	"\bfilename\x18\a \x01(\tR\bfilename\x12\x1b\n" +
	"\tfile_size\x18\b \x01(\x04R\bfileSize\x12*\n" +
	"\x11preview_file_size\x18\t \x01(\x04R\x0fpreviewFileSize\x12\x19\n" +
	"\bfile_url\x18\n" +
	" \x01(\tR\afileUrl\x12\x1f\n" +
	"\vpreview_url\x18\v \x01(\tR\n" +
	"previewUrl\x12&\n" +
	"\x0eyoutubevideoid\x18\f \x01(\tR\x0eyoutubevideoid\x12\x10\n" +
	"\x03url\x18\r \x01(\tR\x03url\x12#\n" +
	"\rhcontent_file\x18\x0e \x01(\x06R\fhcontentFile\x12)\n" +
	"\x10hcontent_preview\x18\x0f \x01(\x06R\x0fhcontentPreview\x12\x14\n" +
	"\x05title\x18\x10 \x01(\tR\x05title\x12)\n" +
	"\x10file_description\x18\x11 \x01(\tR\x0ffileDescription\x12+\n" +
	"\x11short_description\x18\x12 \x01(\tR\x10shortDescription\x12!\n" +
	"\ftime_created\x18\x13 \x01(\rR\vtimeCreated\x12!\n" +
	"\ftime_updated\x18\x14 \x01(\rR\vtimeUpdated\x12\x1e\n" +
	"\n" +
	"visibility\x18\x15 \x01(\rR\n" +
	"visibility\x12\x14\n" +
	"\x05flags\x18\x16 \x01(\rR\x05flags\x12#\n" +
	"\rworkshop_file\x18\x17 \x01(\bR\fworkshopFile\x12+\n" +
	"\x11workshop_accepted\x18\x18 \x01(\bR\x10workshopAccepted\x12,\n" +
	"\x12show_subscribe_all\x18\x19 \x01(\bR\x10showSubscribeAll\x124\n" +
	"\x16num_comments_developer\x18\x1a \x01(\x05R\x14numCommentsDeveloper\x12.\n" +
	"\x13num_comments_public\x18\x1b \x01(\x05R\x11numCommentsPublic\x12\x16\n" +
	"\x06banned\x18\x1c \x01(\bR\x06banned\x12\x1d\n" +
	"\n" +
	"ban_reason\x18\x1d \x01(\tR\tbanReason\x12\x16\n" +
	"\x06banner\x18\x1e \x01(\x06R\x06banner\x12$\n" +
	"\x0ecan_be_deleted\x18\x1f \x01(\bR\fcanBeDeleted\x12\"\n" +
	"\fincompatible\x18  \x01(\bR\fincompatible\x12\x19\n" +
	"\bapp_name\x18! \x01(\tR\aappName\x12\x1b\n" +
	"\tfile_type\x18\" \x01(\rR\bfileType\x12#\n" +
	"\rcan_subscribe\x18# \x01(\bR\fcanSubscribe\x12$\n" +
	"\rsubscriptions\x18$ \x01(\rR\rsubscriptions\x12\x1c\n" +
	"\tfavorited\x18% \x01(\rR\tfavorited\x12\x1c\n" +
	"\tfollowers\x18& \x01(\rR\tfollowers\x125\n" +
	"\x16lifetime_subscriptions\x18' \x01(\rR\x15lifetimeSubscriptions\x12-\n" +
	"\x12lifetime_favorited\x18( \x01(\rR\x11lifetimeFavorited\x12-\n" +
	"\x12lifetime_followers\x18) \x01(\rR\x11lifetimeFollowers\x12+\n" +
	"\x11lifetime_playtime\x18> \x01(\x04R\x10lifetimePlaytime\x12<\n" +
	"\x1alifetime_playtime_sessions\x18? \x01(\x04R\x18lifetimePlaytimeSessions\x12\x14\n" +
	"\x05views\x18* \x01(\rR\x05views\x12\x1f\n" +
	"\vimage_width\x18+ \x01(\rR\n" +
	"imageWidth\x12!\n" +
	"\fimage_height\x18, \x01(\rR\vimageHeight\x12\x1b\n" +
	"\timage_url\x18- \x01(\tR\bimageUrl\x12\x1f\n" +
	"\vspoiler_tag\x18. \x01(\bR\n" +
	"spoilerTag\x12\x1e\n" +
	"\n" +
	"shortcutid\x18/ \x01(\rR\n" +
	"shortcutid\x12\"\n" +
	"\fshortcutname\x180 \x01(\tR\fshortcutname\x12!\n" +
	"\fnum_children\x181 \x01(\rR\vnumChildren\x12\x1f\n" +
	"\vnum_reports\x182 \x01(\rR\n" +
	"numReports\x129\n" +
	"\bpreviews\x183 \x03(\v2\x1d.PublishedFileDetails.PreviewR\bpreviews\x12-\n" +
	"\x04tags\x184 \x03(\v2\x19.PublishedFileDetails.TagR\x04tags\x127\n" +
	"\bchildren\x185 \x03(\v2\x1b.PublishedFileDetails.ChildR\bchildren\x123\n" +
	"\x06kvtags\x186 \x03(\v2\x1b.PublishedFileDetails.KVTagR\x06kvtags\x12;\n" +
	"\tvote_data\x187 \x01(\v2\x1e.PublishedFileDetails.VoteDataR\bvoteData\x12J\n" +
	"\x0eplaytime_stats\x18@ \x01(\v2#.PublishedFileDetails.PlaytimeStatsR\rplaytimeStats\x12\x82\x01\n" +
	"\x0ftime_subscribed\x188 \x01(\rBY\x82\xb5\x18UOnly valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail callsR\x0etimeSubscribed\x12n\n" +
	"\rfor_sale_data\x189 \x01(\v2!.PublishedFileDetails.ForSaleDataB'\x82\xb5\x18#Pricing information, if applicable.R\vforSaleData\x12A\n" +
	"\bmetadata\x18: \x01(\tB%\x82\xb5\x18!Metadata associated with the itemR\bmetadata\x12M\n" +
	"\blanguage\x18= \x01(\x05:\x010B.\x82\xb5\x18*The language of the title and description.R\blanguage\x126\n" +
	"\x17maybe_inappropriate_sex\x18A \x01(\bR\x15maybeInappropriateSex\x12@\n" +
	"\x1cmaybe_inappropriate_violence\x18B \x01(\bR\x1amaybeInappropriateViolence\x12g\n" +
	"\x16revision_change_number\x18C \x01(\x04B1\x82\xb5\x18-The change number for the specified revision.R\x14revisionChangeNumber\x12\xe6\x01\n" +
	"\brevision\x18D \x01(\x0e2\x17.EPublishedFileRevision: k_EPublishedFileRevision_DefaultB\x8e\x01\x82\xb5\x18\x89\x01The revision of the data returned, usually k_EPublishedFileRevision_Latest, but can be another revision/snapshot depending on the caller.R\brevision\x12a\n" +
	"\x13available_revisions\x18E \x03(\x0e2\x17.EPublishedFileRevisionB\x17\x82\xb5\x18\x13Available revisionsR\x12availableRevisions\x12X\n" +
	"\treactions\x18F \x03(\v2\x1e.PublishedFileDetails.ReactionB\x1a\x82\xb5\x18\x16Reactions to this itemR\treactions\x1a5\n" +
	"\x03Tag\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\x12\x1c\n" +
	"\tadminonly\x18\x02 \x01(\bR\tadminonly\x1a\x81\x02\n" +
	"\aPreview\x12\x1c\n" +
	"\tpreviewid\x18\x01 \x01(\x04R\tpreviewid\x12\x1c\n" +
	"\tsortorder\x18\x02 \x01(\rR\tsortorder\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x12\n" +
	"\x04size\x18\x04 \x01(\rR\x04size\x12\x1a\n" +
	"\bfilename\x18\x05 \x01(\tR\bfilename\x12&\n" +
	"\x0eyoutubevideoid\x18\x06 \x01(\tR\x0eyoutubevideoid\x12!\n" +
	"\fpreview_type\x18\a \x01(\rR\vpreviewType\x12-\n" +
	"\x12external_reference\x18\b \x01(\tR\x11externalReference\x1al\n" +
	"\x05Child\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12\x1c\n" +
	"\tsortorder\x18\x02 \x01(\rR\tsortorder\x12\x1b\n" +
	"\tfile_type\x18\x03 \x01(\rR\bfileType\x1a/\n" +
	"\x05KVTag\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x1aZ\n" +
	"\bVoteData\x12\x14\n" +
	"\x05score\x18\x01 \x01(\x02R\x05score\x12\x19\n" +
	"\bvotes_up\x18\x02 \x01(\rR\avotesUp\x12\x1d\n" +
	"\n" +
	"votes_down\x18\x03 \x01(\rR\tvotesDown\x1a\xbe\x02\n" +
	"\vForSaleData\x12\x1e\n" +
	"\vis_for_sale\x18\x01 \x01(\bR\tisForSale\x12%\n" +
	"\x0eprice_category\x18\x02 \x01(\rR\rpriceCategory\x12J\n" +
	"\aestatus\x18\x03 \x01(\x0e2\x1c.EPublishedFileForSaleStatus:\x12k_PFFSS_NotForSaleR\aestatus\x120\n" +
	"\x14price_category_floor\x18\x04 \x01(\rR\x12priceCategoryFloor\x129\n" +
	"\x1aprice_is_pay_what_you_want\x18\x05 \x01(\bR\x15priceIsPayWhatYouWant\x12/\n" +
	"\x13discount_percentage\x18\x06 \x01(\rR\x12discountPercentage\x1a]\n" +
	"\rPlaytimeStats\x12)\n" +
	"\x10playtime_seconds\x18\x01 \x01(\x04R\x0fplaytimeSeconds\x12!\n" +
	"\fnum_sessions\x18\x02 \x01(\x04R\vnumSessions\x1a@\n" +
	"\bReaction\x12\x1e\n" +
	"\n" +
	"reactionid\x18\x01 \x01(\rR\n" +
	"reactionid\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\"o\n" +
	"\"CPublishedFile_GetDetails_Response\x12I\n" +
	"\x14publishedfiledetails\x18\x01 \x03(\v2\x15.PublishedFileDetailsR\x14publishedfiledetails\"\xb8\x03\n" +
	"\"CPublishedFile_GetItemInfo_Request\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12*\n" +
	"\x11last_time_updated\x18\x02 \x01(\rR\x0flastTimeUpdated\x12W\n" +
	"\x0eworkshop_items\x18\x03 \x03(\v20.CPublishedFile_GetItemInfo_Request.WorkshopItemR\rworkshopItems\x1a\xf5\x01\n" +
	"\fWorkshopItem\x12*\n" +
	"\x11published_file_id\x18\x01 \x01(\x06R\x0fpublishedFileId\x12!\n" +
	"\ftime_updated\x18\x02 \x01(\rR\vtimeUpdated\x12\x95\x01\n" +
	"\x10desired_revision\x18\x03 \x01(\x0e2\x17.EPublishedFileRevision: k_EPublishedFileRevision_DefaultB/\x82\xb5\x18+Return the data for the specified revision.R\x0fdesiredRevision\"\xe4\x02\n" +
	"#CPublishedFile_GetItemInfo_Response\x12\x1f\n" +
	"\vupdate_time\x18\x01 \x01(\rR\n" +
	"updateTime\x12\\\n" +
	"\x0eworkshop_items\x18\x02 \x03(\v25.CPublishedFile_GetItemInfo_Response.WorkshopItemInfoR\rworkshopItems\x12#\n" +
	"\rprivate_items\x18\x03 \x03(\x06R\fprivateItems\x1a\x98\x01\n" +
	"\x10WorkshopItemInfo\x12*\n" +
	"\x11published_file_id\x18\x01 \x01(\x06R\x0fpublishedFileId\x12!\n" +
	"\ftime_updated\x18\x02 \x01(\rR\vtimeUpdated\x12\x1f\n" +
	"\vmanifest_id\x18\x03 \x01(\x06R\n" +
	"manifestId\x12\x14\n" +
	"\x05flags\x18\x04 \x01(\rR\x05flags\"\x80\x19\n" +
	"#CPublishedFile_GetUserFiles_Request\x12S\n" +
	"\asteamid\x18\x01 \x01(\x06B9\x82\xb5\x185Steam ID of the user whose files are being requested.R\asteamid\x12M\n" +
	"\x05appid\x18\x02 \x01(\rB7\x82\xb5\x183App Id of the app that the files were published to.R\x05appid\x12@\n" +
	"\x04page\x18\x04 \x01(\r:\x011B)\x82\xb5\x18%(Optional) Starting page for results.R\x04page\x12\\\n" +
	"\n" +
	"numperpage\x18\x05 \x01(\r:\x011B9\x82\xb5\x185(Optional) The number of results, per page to return.R\n" +
	"numperpage\x12I\n" +
	"\x04type\x18\x06 \x01(\t:\amyfilesB,\x82\xb5\x18((Optional) Type of files to be returned.R\x04type\x12e\n" +
	"\n" +
	"sortmethod\x18\a \x01(\t:\vlastupdatedB8\x82\xb5\x184(Optional) Sorting method to use on returned values.R\n" +
	"sortmethod\x12D\n" +
	"\aprivacy\x18\t \x01(\rB*\x82\xb5\x18&(optional) Filter by privacy settings.R\aprivacy\x12v\n" +
	"\frequiredtags\x18\n" +
	" \x03(\tBR\x82\xb5\x18N(Optional) Tags that must be present on a published file to satisfy the query.R\frequiredtags\x12z\n" +
	"\fexcludedtags\x18\v \x03(\tBV\x82\xb5\x18R(Optional) Tags that must NOT be present on a published file to satisfy the query.R\fexcludedtags\x12~\n" +
	"\x10required_kv_tags\x18\x1e \x03(\v2*.CPublishedFile_GetUserFiles_Request.KVTagB(\x82\xb5\x18$Required key-value tags to match on.R\x0erequiredKvTags\x12G\n" +
	"\bfiletype\x18\x0e \x01(\rB+\x82\xb5\x18'(Optional) File type to match files to.R\bfiletype\x12o\n" +
	"\rcreator_appid\x18\x0f \x01(\rBJ\x82\xb5\x18FApp Id of the app that published the files, only matched if specified.R\fcreatorAppid\x12]\n" +
	"\x14match_cloud_filename\x18\x10 \x01(\tB+\x82\xb5\x18'Match this cloud filename if specified.R\x12matchCloudFilename\x12~\n" +
	"\x15cache_max_age_seconds\x18\x1b \x01(\r:\x010BH\x82\xb5\x18DAllow stale data to be returned for the specified number of seconds.R\x12cacheMaxAgeSeconds\x12_\n" +
	"\blanguage\x18\x1d \x01(\x05:\x010B@\x82\xb5\x18<Specifies the localized text to return. Defaults to English.R\blanguage\x12\xae\x01\n" +
	"\ttaggroups\x18\" \x03(\v2-.CPublishedFile_GetUserFiles_Request.TagGroupBa\x82\xb5\x18](Optional) At least one of the tags must be present on a published file to satisfy the query.R\ttaggroups\x12t\n" +
	"\ttotalonly\x18\x11 \x01(\bBV\x82\xb5\x18R(Optional) If true, only return the total number of files that satisfy this query.R\ttotalonly\x12w\n" +
	"\bids_only\x18\x12 \x01(\bB\\\x82\xb5\x18X(Optional) If true, only return the published file ids of files that satisfy this query.R\aidsOnly\x12D\n" +
	"\x10return_vote_data\x18\x13 \x01(\b:\x04trueB\x14\x82\xb5\x18\x10Return vote dataR\x0ereturnVoteData\x12D\n" +
	"\vreturn_tags\x18\x14 \x01(\bB#\x82\xb5\x18\x1fReturn tags in the file detailsR\n" +
	"returnTags\x12Y\n" +
	"\x0ereturn_kv_tags\x18\x15 \x01(\b:\x04trueB-\x82\xb5\x18)Return key-value tags in the file detailsR\freturnKvTags\x12g\n" +
	"\x0freturn_previews\x18\x16 \x01(\bB>\x82\xb5\x18:Return preview image and video details in the file detailsR\x0ereturnPreviews\x12V\n" +
	"\x0freturn_children\x18\x17 \x01(\bB-\x82\xb5\x18)Return child item ids in the file detailsR\x0ereturnChildren\x12\x84\x01\n" +
	"\x18return_short_description\x18\x18 \x01(\b:\x04trueBD\x82\xb5\x18@Populate the short_description field instead of file_descriptionR\x16returnShortDescription\x12^\n" +
	"\x14return_for_sale_data\x18\x1a \x01(\bB-\x82\xb5\x18)Return pricing information, if applicableR\x11returnForSaleData\x12O\n" +
	"\x0freturn_metadata\x18\x1c \x01(\b:\x05falseB\x1f\x82\xb5\x18\x1bPopulate the metadata fieldR\x0ereturnMetadata\x12|\n" +
	"\x15return_playtime_stats\x18\x1f \x01(\rBH\x82\xb5\x18DReturn playtime stats for the specified number of days before today.R\x13returnPlaytimeStats\x12^\n" +
	"\x18strip_description_bbcode\x18  \x01(\bB$\x82\xb5\x18 Strips BBCode from descriptions.R\x16stripDescriptionBbcode\x12h\n" +
	"\x10return_reactions\x18# \x01(\b:\x05falseB6\x82\xb5\x182If true, then reactions to items will be returned.R\x0freturnReactions\x12\x95\x01\n" +
	"\x10desired_revision\x18! \x01(\x0e2\x17.EPublishedFileRevision: k_EPublishedFileRevision_DefaultB/\x82\xb5\x18+Return the data for the specified revision.R\x0fdesiredRevision\x1a/\n" +
	"\x05KVTag\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x1a\x1e\n" +
	"\bTagGroup\x12\x12\n" +
	"\x04tags\x18\x01 \x03(\tR\x04tags\"\xd1\x02\n" +
	"$CPublishedFile_GetUserFiles_Response\x12\x14\n" +
	"\x05total\x18\x01 \x01(\rR\x05total\x12\x1e\n" +
	"\n" +
	"startindex\x18\x02 \x01(\rR\n" +
	"startindex\x12I\n" +
	"\x14publishedfiledetails\x18\x03 \x03(\v2\x15.PublishedFileDetailsR\x14publishedfiledetails\x12=\n" +
	"\x04apps\x18\x04 \x03(\v2).CPublishedFile_GetUserFiles_Response.AppR\x04apps\x1ai\n" +
	"\x03App\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"shortcutid\x18\x03 \x01(\rR\n" +
	"shortcutid\x12\x18\n" +
	"\aprivate\x18\x04 \x01(\bR\aprivate\"\xd9\x02\n" +
	"1CPublishedFile_AreFilesInSubscriptionList_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12*\n" +
	"\x10publishedfileids\x18\x02 \x03(\x06R\x10publishedfileids\x120\n" +
	"\blisttype\x18\x03 \x01(\rB\x14\x82\xb5\x18\x10See EUCMListTypeR\blisttype\x12F\n" +
	"\bfiletype\x18\x04 \x01(\rB*\x82\xb5\x18&See EPublishedFileInfoMatchingFileTypeR\bfiletype\x12h\n" +
	"\x10workshopfiletype\x18\x05 \x01(\rB<\x82\xb5\x188See EWorkshopFileType.  If specified, overrides filetypeR\x10workshopfiletype\"\xd2\x01\n" +
	"2CPublishedFile_AreFilesInSubscriptionList_Response\x12P\n" +
	"\x05files\x18\x01 \x03(\v2:.CPublishedFile_AreFilesInSubscriptionList_Response.InListR\x05files\x1aJ\n" +
	"\x06InList\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x06R\x0fpublishedfileid\x12\x16\n" +
	"\x06inlist\x18\x02 \x01(\bR\x06inlist\"\x87\a\n" +
	"\x1dCPublishedFile_Update_Request\x12@\n" +
	"\x05appid\x18\x01 \x01(\rB*\x82\xb5\x18&App Id this published file belongs to.R\x05appid\x12]\n" +
	"\x0fpublishedfileid\x18\x02 \x01(\x06B3\x82\xb5\x18/Published file id of the file we'd like update.R\x0fpublishedfileid\x12A\n" +
	"\x05title\x18\x03 \x01(\tB+\x82\xb5\x18'(Optional) Title of the published file.R\x05title\x12\\\n" +
	"\x10file_description\x18\x04 \x01(\tB1\x82\xb5\x18-(Optional) Description of the published file.R\x0ffileDescription\x12P\n" +
	"\n" +
	"visibility\x18\x05 \x01(\rB0\x82\xb5\x18,(Optional) Visibility of the published file.R\n" +
	"visibility\x12F\n" +
	"\x04tags\x18\x06 \x03(\tB2\x82\xb5\x18.(Optional) Set of tags for the published file.R\x04tags\x12K\n" +
	"\bfilename\x18\a \x01(\tB/\x82\xb5\x18+(Optional) Filename for the published file.R\bfilename\x12b\n" +
	"\x10preview_filename\x18\b \x01(\tB7\x82\xb5\x183(Optional) Preview filename for the published file.R\x0fpreviewFilename\x12j\n" +
	"\vimage_width\x18\x0f \x01(\rBI\x82\xb5\x18E(Optional) If this is an image file, you can specify the image width.R\n" +
	"imageWidth\x12m\n" +
	"\fimage_height\x18\x10 \x01(\rBJ\x82\xb5\x18F(Optional) If this is an image file, you can specify the image height.R\vimageHeight\" \n" +
	"\x1eCPublishedFile_Update_Response\"\xde\x01\n" +
	",CPublishedFile_GetChangeHistoryEntry_Request\x12t\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x06BJ\x82\xb5\x18FPublished file id of the file we'd like to get the change history for.R\x0fpublishedfileid\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\rR\ttimestamp\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\x05R\blanguage\"z\n" +
	"-CPublishedFile_GetChangeHistoryEntry_Response\x12-\n" +
	"\x12change_description\x18\x01 \x01(\tR\x11changeDescription\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\x05R\blanguage\"\xd7\x02\n" +
	"'CPublishedFile_GetChangeHistory_Request\x12t\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x06BJ\x82\xb5\x18FPublished file id of the file we'd like to get the change history for.R\x0fpublishedfileid\x12K\n" +
	"\n" +
	"total_only\x18\x02 \x01(\bB,\x82\xb5\x18(Return the total number of changes only.R\ttotalOnly\x12\x1e\n" +
	"\n" +
	"startindex\x18\x03 \x01(\rR\n" +
	"startindex\x12\x14\n" +
	"\x05count\x18\x04 \x01(\rR\x05count\x123\n" +
	"\blanguage\x18\x05 \x01(\x05:\x010B\x14\x82\xb5\x18\x10Desired languageR\blanguage\"\x85\x02\n" +
	"(CPublishedFile_GetChangeHistory_Response\x12M\n" +
	"\achanges\x18\x01 \x03(\v23.CPublishedFile_GetChangeHistory_Response.ChangeLogR\achanges\x12\x14\n" +
	"\x05total\x18\x02 \x01(\rR\x05total\x1at\n" +
	"\tChangeLog\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\rR\ttimestamp\x12-\n" +
	"\x12change_description\x18\x02 \x01(\tR\x11changeDescription\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\x05R\blanguage\"\xaf\x06\n" +
	")CPublishedFile_RefreshVotingQueue_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12T\n" +
	"\x12matching_file_type\x18\x02 \x01(\rB&\x82\xb5\x18\"EPublishedFileInfoMatchingFileTypeR\x10matchingFileType\x12r\n" +
	"\x04tags\x18\x03 \x03(\tB^\x82\xb5\x18ZInclude files that have all the tags or any of the tags if match_all_tags is set to false.R\x04tags\x12\xa3\x01\n" +
	"\x0ematch_all_tags\x18\x04 \x01(\b:\x04trueBw\x82\xb5\x18sIf true, then files must have all the tags specified.  If false, then must have at least one of the tags specified.R\fmatchAllTags\x12W\n" +
	"\rexcluded_tags\x18\x05 \x03(\tB2\x82\xb5\x18.Exclude any files that have any of these tags.R\fexcludedTags\x12|\n" +
	"\x12desired_queue_size\x18\x06 \x01(\rBN\x82\xb5\x18JDesired number of items in the voting queue.  May be clamped by the serverR\x10desiredQueueSize\x12\xa4\x01\n" +
	"\x10desired_revision\x18\b \x01(\x0e2\x17.EPublishedFileRevision: k_EPublishedFileRevision_DefaultB>\x82\xb5\x18:Filter to items that have data for the specified revision.R\x0fdesiredRevision\",\n" +
	"*CPublishedFile_RefreshVotingQueue_Response\"\xc3\x1f\n" +
	"!CPublishedFile_QueryFiles_Request\x12W\n" +
	"\n" +
	"query_type\x18\x01 \x01(\rB8\x82\xb5\x184enumeration EPublishedFileQueryType in clientenums.hR\tqueryType\x12$\n" +
	"\x04page\x18\x02 \x01(\rB\x10\x82\xb5\x18\fCurrent pageR\x04page\x12\xf0\x01\n" +
	"\x06cursor\x18' \x01(\tB\xd7\x01\x82\xb5\x18\xd2\x01Cursor to paginate through the results (set to '*' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored.R\x06cursor\x12\\\n" +
	"\n" +
	"numperpage\x18\x03 \x01(\r:\x011B9\x82\xb5\x185(Optional) The number of results, per page to return.R\n" +
	"numperpage\x12C\n" +
	"\rcreator_appid\x18\x04 \x01(\rB\x1e\x82\xb5\x18\x1aApp that created the filesR\fcreatorAppid\x125\n" +
	"\x05appid\x18\x05 \x01(\rB\x1f\x82\xb5\x18\x1bApp that consumes the filesR\x05appid\x12\\\n" +
	"\frequiredtags\x18\x06 \x03(\tB8\x82\xb5\x184Tags to match on. See match_all_tags parameter belowR\frequiredtags\x12z\n" +
	"\fexcludedtags\x18\a \x03(\tBV\x82\xb5\x18R(Optional) Tags that must NOT be present on a published file to satisfy the query.R\fexcludedtags\x12\x98\x01\n" +
	"\x0ematch_all_tags\x18\b \x01(\b:\x04trueBl\x82\xb5\x18hIf true, then items must have all the tags specified, otherwise they must have at least one of the tags.R\fmatchAllTags\x12`\n" +
	"\x0erequired_flags\x18\t \x03(\tB9\x82\xb5\x185Required flags that must be set on any returned itemsR\rrequiredFlags\x12Y\n" +
	"\romitted_flags\x18\n" +
	" \x03(\tB4\x82\xb5\x180Flags that must not be set on any returned itemsR\fomittedFlags\x12U\n" +
	"\vsearch_text\x18\v \x01(\tB4\x82\xb5\x180Text to match in the item's title or descriptionR\n" +
	"searchText\x12B\n" +
	"\bfiletype\x18\f \x01(\rB&\x82\xb5\x18\"EPublishedFileInfoMatchingFileTypeR\bfiletype\x12f\n" +
	"\x15child_publishedfileid\x18\r \x01(\x06B1\x82\xb5\x18-Find all items that reference the given item.R\x14childPublishedfileid\x12\x88\x01\n" +
	"\x04days\x18\x0e \x01(\rBt\x82\xb5\x18pIf query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7].R\x04days\x12\xc8\x01\n" +
	"\x19include_recent_votes_only\x18\x0f \x01(\bB\x8c\x01\x82\xb5\x18\x87\x01If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range givenR\x16includeRecentVotesOnly\x12~\n" +
	"\x15cache_max_age_seconds\x18\x1f \x01(\r:\x010BH\x82\xb5\x18DAllow stale data to be returned for the specified number of seconds.R\x12cacheMaxAgeSeconds\x12j\n" +
	"\blanguage\x18! \x01(\x05:\x010BK\x82\xb5\x18GLanguage to search in and also what gets returned. Defaults to English.R\blanguage\x12|\n" +
	"\x10required_kv_tags\x18\" \x03(\v2(.CPublishedFile_QueryFiles_Request.KVTagB(\x82\xb5\x18$Required key-value tags to match on.R\x0erequiredKvTags\x12\xac\x01\n" +
	"\ttaggroups\x18* \x03(\v2+.CPublishedFile_QueryFiles_Request.TagGroupBa\x82\xb5\x18](Optional) At least one of the tags must be present on a published file to satisfy the query.R\ttaggroups\x12t\n" +
	"\ttotalonly\x18\x10 \x01(\bBV\x82\xb5\x18R(Optional) If true, only return the total number of files that satisfy this query.R\ttotalonly\x12w\n" +
	"\bids_only\x18# \x01(\bB\\\x82\xb5\x18X(Optional) If true, only return the published file ids of files that satisfy this query.R\aidsOnly\x12>\n" +
	"\x10return_vote_data\x18\x11 \x01(\bB\x14\x82\xb5\x18\x10Return vote dataR\x0ereturnVoteData\x12D\n" +
	"\vreturn_tags\x18\x12 \x01(\bB#\x82\xb5\x18\x1fReturn tags in the file detailsR\n" +
	"returnTags\x12S\n" +
	"\x0ereturn_kv_tags\x18\x13 \x01(\bB-\x82\xb5\x18)Return key-value tags in the file detailsR\freturnKvTags\x12g\n" +
	"\x0freturn_previews\x18\x14 \x01(\bB>\x82\xb5\x18:Return preview image and video details in the file detailsR\x0ereturnPreviews\x12V\n" +
	"\x0freturn_children\x18\x15 \x01(\bB-\x82\xb5\x18)Return child item ids in the file detailsR\x0ereturnChildren\x12~\n" +
	"\x18return_short_description\x18\x16 \x01(\bBD\x82\xb5\x18@Populate the short_description field instead of file_descriptionR\x16returnShortDescription\x12^\n" +
	"\x14return_for_sale_data\x18\x1e \x01(\bB-\x82\xb5\x18)Return pricing information, if applicableR\x11returnForSaleData\x12I\n" +
	"\x0freturn_metadata\x18  \x01(\b:\x05falseB\x19\x82\xb5\x18\x15Populate the metadataR\x0ereturnMetadata\x12|\n" +
	"\x15return_playtime_stats\x18$ \x01(\rBH\x82\xb5\x18DReturn playtime stats for the specified number of days before today.R\x13returnPlaytimeStats\x12\xc6\x01\n" +
	"\x0ereturn_details\x18% \x01(\bB\x9e\x01\x82\xb5\x18\x99\x01By default, if none of the other 'return_*' fields are set, only some voting details are returned. Set this to true to return the default set of details.R\rreturnDetails\x12^\n" +
	"\x18strip_description_bbcode\x18& \x01(\bB$\x82\xb5\x18 Strips BBCode from descriptions.R\x16stripDescriptionBbcode\x12\x95\x01\n" +
	"\x10desired_revision\x18( \x01(\x0e2\x17.EPublishedFileRevision: k_EPublishedFileRevision_DefaultB/\x82\xb5\x18+Return the data for the specified revision.R\x0fdesiredRevision\x12h\n" +
	"\x10return_reactions\x18+ \x01(\b:\x05falseB6\x82\xb5\x182If true, then reactions to items will be returned.R\x0freturnReactions\x1a/\n" +
	"\x05KVTag\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x1a\x1e\n" +
	"\bTagGroup\x12\x12\n" +
	"\x04tags\x18\x01 \x03(\tR\x04tags\"\xaf\x03\n" +
	"\"CPublishedFile_QueryFiles_Response\x12[\n" +
	"\x05total\x18\x01 \x01(\rBE\x82\xb5\x18ANumber of matches found, not necessarily number of items returnedR\x05total\x12\xa3\x01\n" +
	"\x14publishedfiledetails\x18\x02 \x03(\v2\x15.PublishedFileDetailsBX\x82\xb5\x18TEach file details will be populated, depending on what return values were requested.R\x14publishedfiledetails\x12\x85\x01\n" +
	"\vnext_cursor\x18\x03 \x01(\tBd\x82\xb5\x18`If a paging cursor was used, then this will be the next cursor to use for paging through resultsR\n" +
	"nextCursor\"\x8f\x01\n" +
	")CPublishedFile_AddAppRelationship_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\"\n" +
	"\frelationship\x18\x03 \x01(\rR\frelationship\",\n" +
	"*CPublishedFile_AddAppRelationship_Response\"\x92\x01\n" +
	",CPublishedFile_RemoveAppRelationship_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\"\n" +
	"\frelationship\x18\x03 \x01(\rR\frelationship\"/\n" +
	"-CPublishedFile_RemoveAppRelationship_Response\"V\n" +
	"*CPublishedFile_GetAppRelationships_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\"\xe5\x01\n" +
	"+CPublishedFile_GetAppRelationships_Response\x12i\n" +
	"\x11app_relationships\x18\x03 \x03(\v2<.CPublishedFile_GetAppRelationships_Response.AppRelationshipR\x10appRelationships\x1aK\n" +
	"\x0fAppRelationship\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\"\n" +
	"\frelationship\x18\x02 \x01(\rR\frelationship\"p\n" +
	",CPublishedFile_StartPlaytimeTracking_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12*\n" +
	"\x10publishedfileids\x18\x02 \x03(\x04R\x10publishedfileids\"/\n" +
	"-CPublishedFile_StartPlaytimeTracking_Response\"o\n" +
	"+CPublishedFile_StopPlaytimeTracking_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12*\n" +
	"\x10publishedfileids\x18\x02 \x03(\x04R\x10publishedfileids\".\n" +
	",CPublishedFile_StopPlaytimeTracking_Response\"Q\n" +
	"9CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"<\n" +
	":CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response\"\xc0\x02\n" +
	"6CPublishedFile_SetPlaytimeForControllerConfigs_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x85\x01\n" +
	"\x17controller_config_usage\x18\x02 \x03(\v2M.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsageR\x15controllerConfigUsage\x1ah\n" +
	"\x15ControllerConfigUsage\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12%\n" +
	"\x0eseconds_active\x18\x02 \x01(\x02R\rsecondsActive\"9\n" +
	"7CPublishedFile_SetPlaytimeForControllerConfigs_Response\"\x80\x01\n" +
	"\x1fCPublishedFile_AddChild_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x123\n" +
	"\x15child_publishedfileid\x18\x02 \x01(\x04R\x14childPublishedfileid\"\"\n" +
	" CPublishedFile_AddChild_Response\"\x83\x01\n" +
	"\"CPublishedFile_RemoveChild_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x123\n" +
	"\x15child_publishedfileid\x18\x02 \x01(\x04R\x14childPublishedfileid\"%\n" +
	"#CPublishedFile_RemoveChild_Response\"W\n" +
	")CPublishedFile_GetUserVoteSummary_Request\x12*\n" +
	"\x10publishedfileids\x18\x01 \x03(\x06R\x10publishedfileids\"\x97\x02\n" +
	"*CPublishedFile_GetUserVoteSummary_Response\x12U\n" +
	"\tsummaries\x18\x01 \x03(\v27.CPublishedFile_GetUserVoteSummary_Response.VoteSummaryR\tsummaries\x1a\x91\x01\n" +
	"\vVoteSummary\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x06R\x0fpublishedfileid\x12\x19\n" +
	"\bvote_for\x18\x02 \x01(\bR\avoteFor\x12!\n" +
	"\fvote_against\x18\x03 \x01(\bR\vvoteAgainst\x12\x1a\n" +
	"\breported\x18\x04 \x01(\bR\breported\"\xbf\x06\n" +
	"*CPublishedFile_FileSubscribed_Notification\x12Q\n" +
	"\x11published_file_id\x18\x01 \x01(\x06B%\x82\xb5\x18!PublishedFileID_t for the contentR\x0fpublishedFileId\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId\x12H\n" +
	"\rfile_hcontent\x18\x03 \x01(\x06B#\x82\xb5\x18\x1fUGC file handle or manifest GIDR\ffileHcontent\x12\x1b\n" +
	"\tfile_size\x18\x04 \x01(\rR\bfileSize\x12)\n" +
	"\x10rtime_subscribed\x18\x05 \x01(\rR\x0frtimeSubscribed\x12^\n" +
	"\x10is_depot_content\x18\x06 \x01(\bB4\x82\xb5\x180True if workshop item is delivered via SteampipeR\x0eisDepotContent\x12B\n" +
	"\rrtime_updated\x18\a \x01(\rB\x1d\x82\xb5\x18\x19Last time content updatedR\frtimeUpdated\x12\x8d\x01\n" +
	"\trevisions\x18\b \x03(\v28.CPublishedFile_FileSubscribed_Notification.RevisionDataB5\x82\xb5\x181Data for each of the revisions that this item hasR\trevisions\x1a\xe0\x01\n" +
	"\fRevisionData\x12U\n" +
	"\brevision\x18\x01 \x01(\x0e2\x17.EPublishedFileRevision: k_EPublishedFileRevision_DefaultR\brevision\x125\n" +
	"\rfile_hcontent\x18\x02 \x01(\x06B\x10\x82\xb5\x18\fManifest GIDR\ffileHcontent\x12B\n" +
	"\rrtime_updated\x18\x03 \x01(\rB\x1d\x82\xb5\x18\x19Last time content updatedR\frtimeUpdated\"\x98\x01\n" +
	",CPublishedFile_FileUnsubscribed_Notification\x12Q\n" +
	"\x11published_file_id\x18\x01 \x01(\x06B%\x82\xb5\x18!PublishedFileID_t for the contentR\x0fpublishedFileId\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId\"\x9a\x01\n" +
	".CPublishedFile_FileDeleted_Client_Notification\x12Q\n" +
	"\x11published_file_id\x18\x01 \x01(\x06B%\x82\xb5\x18!PublishedFileID_t for the contentR\x0fpublishedFileId\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId*\xab\x02\n" +
	"\x16EPublishedFileRevision\x12$\n" +
	" k_EPublishedFileRevision_Default\x10\x00\x12#\n" +
	"\x1fk_EPublishedFileRevision_Latest\x10\x01\x12-\n" +
	")k_EPublishedFileRevision_ApprovedSnapshot\x10\x02\x123\n" +
	"/k_EPublishedFileRevision_ApprovedSnapshot_China\x10\x03\x12-\n" +
	")k_EPublishedFileRevision_RejectedSnapshot\x10\x04\x123\n" +
	"/k_EPublishedFileRevision_RejectedSnapshot_China\x10\x05*\xc8\x01\n" +
	"\x1bEPublishedFileForSaleStatus\x12\x16\n" +
	"\x12k_PFFSS_NotForSale\x10\x00\x12\x1b\n" +
	"\x17k_PFFSS_PendingApproval\x10\x01\x12\x1b\n" +
	"\x17k_PFFSS_ApprovedForSale\x10\x02\x12\x1b\n" +
	"\x17k_PFFSS_RejectedForSale\x10\x03\x12\x1b\n" +
	"\x17k_PFFSS_NoLongerForSale\x10\x04\x12\x1d\n" +
	"\x19k_PFFSS_TentativeApproval\x10\x052\xd7\x1e\n" +
	"\rPublishedFile\x12\x81\x01\n" +
	"\tSubscribe\x12!.CPublishedFile_Subscribe_Request\x1a\".CPublishedFile_Subscribe_Response\"-\x82\xb5\x18)Subscribes the user to the published file\x12\x8b\x01\n" +
	"\vUnsubscribe\x12#.CPublishedFile_Unsubscribe_Request\x1a$.CPublishedFile_Unsubscribe_Response\"1\x82\xb5\x18-Unsubscribes the user from the published file\x12\x96\x01\n" +
	"\fCanSubscribe\x12$.CPublishedFile_CanSubscribe_Request\x1a%.CPublishedFile_CanSubscribe_Response\"9\x82\xb5\x185Check if the user can subscribe to the published file\x12\x80\x01\n" +
	"\aPublish\x12\x1f.CPublishedFile_Publish_Request\x1a .CPublishedFile_Publish_Response\"2\x82\xb5\x18.Publishes a clouded user file to the Workshop.\x12\x90\x01\n" +
	"\n" +
	"GetDetails\x12\".CPublishedFile_GetDetails_Request\x1a#.CPublishedFile_GetDetails_Response\"9\x82\xb5\x185Retrieves information about a set of published files.\x12\x93\x01\n" +
	"\vGetItemInfo\x12#.CPublishedFile_GetItemInfo_Request\x1a$.CPublishedFile_GetItemInfo_Response\"9\x82\xb5\x185Retrieves information about a set of published files.\x12\x85\x01\n" +
	"\fGetUserFiles\x12$.CPublishedFile_GetUserFiles_Request\x1a%.CPublishedFile_GetUserFiles_Response\"(\x82\xb5\x18$Retrieves files published by a user.\x12\xd5\x01\n" +
	"\x1aAreFilesInSubscriptionList\x122.CPublishedFile_AreFilesInSubscriptionList_Request\x1a3.CPublishedFile_AreFilesInSubscriptionList_Response\"N\x82\xb5\x18JDetermines which files in the given list are in a user's subscription list\x12z\n" +
	"\x06Update\x12\x1e.CPublishedFile_Update_Request\x1a\x1f.CPublishedFile_Update_Response\"/\x82\xb5\x18+Updates information about a published file.\x12\xc0\x01\n" +
	"\x15GetChangeHistoryEntry\x12-.CPublishedFile_GetChangeHistoryEntry_Request\x1a..CPublishedFile_GetChangeHistoryEntry_Response\"H\x82\xb5\x18DReturns data on a specific change history entry for a published file\x12\xa4\x01\n" +
	"\x10GetChangeHistory\x12(.CPublishedFile_GetChangeHistory_Request\x1a).CPublishedFile_GetChangeHistory_Response\";\x82\xb5\x187Returns data on the change history for a published file\x12\x98\x01\n" +
	"\x12RefreshVotingQueue\x12*.CPublishedFile_RefreshVotingQueue_Request\x1a+.CPublishedFile_RefreshVotingQueue_Response\")\x82\xb5\x18%Refresh the voting queue for the user\x12\x86\x01\n" +
	"\n" +
	"QueryFiles\x12\".CPublishedFile_QueryFiles_Request\x1a#.CPublishedFile_QueryFiles_Response\"/\x82\xb5\x18+Performs a search query for published files\x12\xb3\x01\n" +
	"\x12AddAppRelationship\x12*.CPublishedFile_AddAppRelationship_Request\x1a+.CPublishedFile_AddAppRelationship_Response\"D\x82\xb5\x18@Adds a relationship between the published file and the given app\x12\xbe\x01\n" +
	"\x15RemoveAppRelationship\x12-.CPublishedFile_RemoveAppRelationship_Request\x1a..CPublishedFile_RemoveAppRelationship_Response\"F\x82\xb5\x18BRemove a relationship between the published file and the given app\x12\xb3\x01\n" +
	"\x13GetAppRelationships\x12+.CPublishedFile_GetAppRelationships_Request\x1a,.CPublishedFile_GetAppRelationships_Response\"A\x82\xb5\x18=Returns the list of app relationships for this published file\x12\xb3\x01\n" +
	"\x15StartPlaytimeTracking\x12-.CPublishedFile_StartPlaytimeTracking_Request\x1a..CPublishedFile_StartPlaytimeTracking_Response\";\x82\xb5\x187Start usage tracking for a given set of published files\x12\xb0\x01\n" +
	"\x14StopPlaytimeTracking\x12,.CPublishedFile_StopPlaytimeTracking_Request\x1a-.CPublishedFile_StopPlaytimeTracking_Response\";\x82\xb5\x187Stops usage tracking for a given set of published files\x12\xed\x01\n" +
	"\"StopPlaytimeTrackingForAllAppItems\x12:.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request\x1a;.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response\"N\x82\xb5\x18JStops usage tracking for all items currently tracked for the specified app\x12\x98\x02\n" +
	"\x1fSetPlaytimeForControllerConfigs\x127.CPublishedFile_SetPlaytimeForControllerConfigs_Request\x1a8.CPublishedFile_SetPlaytimeForControllerConfigs_Response\"\x81\x01\x82\xb5\x18}Stops usage tracking all controller configs for the given app and set the usage time for the for the given controller configs\x12\x8f\x01\n" +
	"\bAddChild\x12 .CPublishedFile_AddChild_Request\x1a!.CPublishedFile_AddChild_Response\">\x82\xb5\x18:Adds a parent->child relationship between the given items.\x12\x99\x01\n" +
	"\vRemoveChild\x12#.CPublishedFile_RemoveChild_Request\x1a$.CPublishedFile_RemoveChild_Response\"?\x82\xb5\x18;Removes parent->child relationship between the given items.\x12\x88\x01\n" +
	"\x12GetUserVoteSummary\x12*.CPublishedFile_GetUserVoteSummary_Request\x1a+.CPublishedFile_GetUserVoteSummary_Response\"\x19\x82\xb5\x18\x15Get user vote summary\x1a+\x82\xb5\x18'A service to access published file data2\x8d\x04\n" +
	"\x13PublishedFileClient\x12\x93\x01\n" +
	"\x14NotifyFileSubscribed\x12+.CPublishedFile_FileSubscribed_Notification\x1a\v.NoResponse\"A\x82\xb5\x18=Notification from the server when a user subscribes to a file\x12\x9b\x01\n" +
	"\x16NotifyFileUnsubscribed\x12-.CPublishedFile_FileUnsubscribed_Notification\x1a\v.NoResponse\"E\x82\xb5\x18ANotification from the server when a user unsubscribes from a file\x12\x94\x01\n" +
	"\x11NotifyFileDeleted\x12/.CPublishedFile_FileDeleted_Client_Notification\x1a\v.NoResponse\"A\x82\xb5\x18=Notification from the server when a published file is deleted\x1a+\x82\xb5\x18#Published file client notifications\xc0\xb5\x18\x02B\x03\x80\x01\x01"

var (
	file_steammessages_publishedfile_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_publishedfile_steamclient_proto_rawDescData []byte
)

func file_steammessages_publishedfile_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_publishedfile_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_publishedfile_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_publishedfile_steamclient_proto_rawDesc), len(file_steammessages_publishedfile_steamclient_proto_rawDesc)))
	})
	return file_steammessages_publishedfile_steamclient_proto_rawDescData
}

var file_steammessages_publishedfile_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steammessages_publishedfile_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_steammessages_publishedfile_steamclient_proto_goTypes = []any{
	(EPublishedFileRevision)(0),                                                          // 0: EPublishedFileRevision
	(EPublishedFileForSaleStatus)(0),                                                     // 1: EPublishedFileForSaleStatus
	(*CPublishedFile_Subscribe_Request)(nil),                                             // 2: CPublishedFile_Subscribe_Request
	(*CPublishedFile_Subscribe_Response)(nil),                                            // 3: CPublishedFile_Subscribe_Response
	(*CPublishedFile_Unsubscribe_Request)(nil),                                           // 4: CPublishedFile_Unsubscribe_Request
	(*CPublishedFile_Unsubscribe_Response)(nil),                                          // 5: CPublishedFile_Unsubscribe_Response
	(*CPublishedFile_CanSubscribe_Request)(nil),                                          // 6: CPublishedFile_CanSubscribe_Request
	(*CPublishedFile_CanSubscribe_Response)(nil),                                         // 7: CPublishedFile_CanSubscribe_Response
	(*CPublishedFile_Publish_Request)(nil),                                               // 8: CPublishedFile_Publish_Request
	(*CPublishedFile_Publish_Response)(nil),                                              // 9: CPublishedFile_Publish_Response
	(*CPublishedFile_GetDetails_Request)(nil),                                            // 10: CPublishedFile_GetDetails_Request
	(*PublishedFileDetails)(nil),                                                         // 11: PublishedFileDetails
	(*CPublishedFile_GetDetails_Response)(nil),                                           // 12: CPublishedFile_GetDetails_Response
	(*CPublishedFile_GetItemInfo_Request)(nil),                                           // 13: CPublishedFile_GetItemInfo_Request
	(*CPublishedFile_GetItemInfo_Response)(nil),                                          // 14: CPublishedFile_GetItemInfo_Response
	(*CPublishedFile_GetUserFiles_Request)(nil),                                          // 15: CPublishedFile_GetUserFiles_Request
	(*CPublishedFile_GetUserFiles_Response)(nil),                                         // 16: CPublishedFile_GetUserFiles_Response
	(*CPublishedFile_AreFilesInSubscriptionList_Request)(nil),                            // 17: CPublishedFile_AreFilesInSubscriptionList_Request
	(*CPublishedFile_AreFilesInSubscriptionList_Response)(nil),                           // 18: CPublishedFile_AreFilesInSubscriptionList_Response
	(*CPublishedFile_Update_Request)(nil),                                                // 19: CPublishedFile_Update_Request
	(*CPublishedFile_Update_Response)(nil),                                               // 20: CPublishedFile_Update_Response
	(*CPublishedFile_GetChangeHistoryEntry_Request)(nil),                                 // 21: CPublishedFile_GetChangeHistoryEntry_Request
	(*CPublishedFile_GetChangeHistoryEntry_Response)(nil),                                // 22: CPublishedFile_GetChangeHistoryEntry_Response
	(*CPublishedFile_GetChangeHistory_Request)(nil),                                      // 23: CPublishedFile_GetChangeHistory_Request
	(*CPublishedFile_GetChangeHistory_Response)(nil),                                     // 24: CPublishedFile_GetChangeHistory_Response
	(*CPublishedFile_RefreshVotingQueue_Request)(nil),                                    // 25: CPublishedFile_RefreshVotingQueue_Request
	(*CPublishedFile_RefreshVotingQueue_Response)(nil),                                   // 26: CPublishedFile_RefreshVotingQueue_Response
	(*CPublishedFile_QueryFiles_Request)(nil),                                            // 27: CPublishedFile_QueryFiles_Request
	(*CPublishedFile_QueryFiles_Response)(nil),                                           // 28: CPublishedFile_QueryFiles_Response
	(*CPublishedFile_AddAppRelationship_Request)(nil),                                    // 29: CPublishedFile_AddAppRelationship_Request
	(*CPublishedFile_AddAppRelationship_Response)(nil),                                   // 30: CPublishedFile_AddAppRelationship_Response
	(*CPublishedFile_RemoveAppRelationship_Request)(nil),                                 // 31: CPublishedFile_RemoveAppRelationship_Request
	(*CPublishedFile_RemoveAppRelationship_Response)(nil),                                // 32: CPublishedFile_RemoveAppRelationship_Response
	(*CPublishedFile_GetAppRelationships_Request)(nil),                                   // 33: CPublishedFile_GetAppRelationships_Request
	(*CPublishedFile_GetAppRelationships_Response)(nil),                                  // 34: CPublishedFile_GetAppRelationships_Response
	(*CPublishedFile_StartPlaytimeTracking_Request)(nil),                                 // 35: CPublishedFile_StartPlaytimeTracking_Request
	(*CPublishedFile_StartPlaytimeTracking_Response)(nil),                                // 36: CPublishedFile_StartPlaytimeTracking_Response
	(*CPublishedFile_StopPlaytimeTracking_Request)(nil),                                  // 37: CPublishedFile_StopPlaytimeTracking_Request
	(*CPublishedFile_StopPlaytimeTracking_Response)(nil),                                 // 38: CPublishedFile_StopPlaytimeTracking_Response
	(*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)(nil),                    // 39: CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request
	(*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)(nil),                   // 40: CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response
	(*CPublishedFile_SetPlaytimeForControllerConfigs_Request)(nil),                       // 41: CPublishedFile_SetPlaytimeForControllerConfigs_Request
	(*CPublishedFile_SetPlaytimeForControllerConfigs_Response)(nil),                      // 42: CPublishedFile_SetPlaytimeForControllerConfigs_Response
	(*CPublishedFile_AddChild_Request)(nil),                                              // 43: CPublishedFile_AddChild_Request
	(*CPublishedFile_AddChild_Response)(nil),                                             // 44: CPublishedFile_AddChild_Response
	(*CPublishedFile_RemoveChild_Request)(nil),                                           // 45: CPublishedFile_RemoveChild_Request
	(*CPublishedFile_RemoveChild_Response)(nil),                                          // 46: CPublishedFile_RemoveChild_Response
	(*CPublishedFile_GetUserVoteSummary_Request)(nil),                                    // 47: CPublishedFile_GetUserVoteSummary_Request
	(*CPublishedFile_GetUserVoteSummary_Response)(nil),                                   // 48: CPublishedFile_GetUserVoteSummary_Response
	(*CPublishedFile_FileSubscribed_Notification)(nil),                                   // 49: CPublishedFile_FileSubscribed_Notification
	(*CPublishedFile_FileUnsubscribed_Notification)(nil),                                 // 50: CPublishedFile_FileUnsubscribed_Notification
	(*CPublishedFile_FileDeleted_Client_Notification)(nil),                               // 51: CPublishedFile_FileDeleted_Client_Notification
	(*PublishedFileDetails_Tag)(nil),                                                     // 52: PublishedFileDetails.Tag
	(*PublishedFileDetails_Preview)(nil),                                                 // 53: PublishedFileDetails.Preview
	(*PublishedFileDetails_Child)(nil),                                                   // 54: PublishedFileDetails.Child
	(*PublishedFileDetails_KVTag)(nil),                                                   // 55: PublishedFileDetails.KVTag
	(*PublishedFileDetails_VoteData)(nil),                                                // 56: PublishedFileDetails.VoteData
	(*PublishedFileDetails_ForSaleData)(nil),                                             // 57: PublishedFileDetails.ForSaleData
	(*PublishedFileDetails_PlaytimeStats)(nil),                                           // 58: PublishedFileDetails.PlaytimeStats
	(*PublishedFileDetails_Reaction)(nil),                                                // 59: PublishedFileDetails.Reaction
	(*CPublishedFile_GetItemInfo_Request_WorkshopItem)(nil),                              // 60: CPublishedFile_GetItemInfo_Request.WorkshopItem
	(*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo)(nil),                         // 61: CPublishedFile_GetItemInfo_Response.WorkshopItemInfo
	(*CPublishedFile_GetUserFiles_Request_KVTag)(nil),                                    // 62: CPublishedFile_GetUserFiles_Request.KVTag
	(*CPublishedFile_GetUserFiles_Request_TagGroup)(nil),                                 // 63: CPublishedFile_GetUserFiles_Request.TagGroup
	(*CPublishedFile_GetUserFiles_Response_App)(nil),                                     // 64: CPublishedFile_GetUserFiles_Response.App
	(*CPublishedFile_AreFilesInSubscriptionList_Response_InList)(nil),                    // 65: CPublishedFile_AreFilesInSubscriptionList_Response.InList
	(*CPublishedFile_GetChangeHistory_Response_ChangeLog)(nil),                           // 66: CPublishedFile_GetChangeHistory_Response.ChangeLog
	(*CPublishedFile_QueryFiles_Request_KVTag)(nil),                                      // 67: CPublishedFile_QueryFiles_Request.KVTag
	(*CPublishedFile_QueryFiles_Request_TagGroup)(nil),                                   // 68: CPublishedFile_QueryFiles_Request.TagGroup
	(*CPublishedFile_GetAppRelationships_Response_AppRelationship)(nil),                  // 69: CPublishedFile_GetAppRelationships_Response.AppRelationship
	(*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage)(nil), // 70: CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage
	(*CPublishedFile_GetUserVoteSummary_Response_VoteSummary)(nil),                       // 71: CPublishedFile_GetUserVoteSummary_Response.VoteSummary
	(*CPublishedFile_FileSubscribed_Notification_RevisionData)(nil),                      // 72: CPublishedFile_FileSubscribed_Notification.RevisionData
	(*NoResponse)(nil),                      // 73: NoResponse
}
var file_steammessages_publishedfile_steamclient_proto_depIdxs = []int32{
	0,  // 0: CPublishedFile_GetDetails_Request.desired_revision:type_name -> EPublishedFileRevision
	53, // 1: PublishedFileDetails.previews:type_name -> PublishedFileDetails.Preview
	52, // 2: PublishedFileDetails.tags:type_name -> PublishedFileDetails.Tag
	54, // 3: PublishedFileDetails.children:type_name -> PublishedFileDetails.Child
	55, // 4: PublishedFileDetails.kvtags:type_name -> PublishedFileDetails.KVTag
	56, // 5: PublishedFileDetails.vote_data:type_name -> PublishedFileDetails.VoteData
	58, // 6: PublishedFileDetails.playtime_stats:type_name -> PublishedFileDetails.PlaytimeStats
	57, // 7: PublishedFileDetails.for_sale_data:type_name -> PublishedFileDetails.ForSaleData
	0,  // 8: PublishedFileDetails.revision:type_name -> EPublishedFileRevision
	0,  // 9: PublishedFileDetails.available_revisions:type_name -> EPublishedFileRevision
	59, // 10: PublishedFileDetails.reactions:type_name -> PublishedFileDetails.Reaction
	11, // 11: CPublishedFile_GetDetails_Response.publishedfiledetails:type_name -> PublishedFileDetails
	60, // 12: CPublishedFile_GetItemInfo_Request.workshop_items:type_name -> CPublishedFile_GetItemInfo_Request.WorkshopItem
	61, // 13: CPublishedFile_GetItemInfo_Response.workshop_items:type_name -> CPublishedFile_GetItemInfo_Response.WorkshopItemInfo
	62, // 14: CPublishedFile_GetUserFiles_Request.required_kv_tags:type_name -> CPublishedFile_GetUserFiles_Request.KVTag
	63, // 15: CPublishedFile_GetUserFiles_Request.taggroups:type_name -> CPublishedFile_GetUserFiles_Request.TagGroup
	0,  // 16: CPublishedFile_GetUserFiles_Request.desired_revision:type_name -> EPublishedFileRevision
	11, // 17: CPublishedFile_GetUserFiles_Response.publishedfiledetails:type_name -> PublishedFileDetails
	64, // 18: CPublishedFile_GetUserFiles_Response.apps:type_name -> CPublishedFile_GetUserFiles_Response.App
	65, // 19: CPublishedFile_AreFilesInSubscriptionList_Response.files:type_name -> CPublishedFile_AreFilesInSubscriptionList_Response.InList
	66, // 20: CPublishedFile_GetChangeHistory_Response.changes:type_name -> CPublishedFile_GetChangeHistory_Response.ChangeLog
	0,  // 21: CPublishedFile_RefreshVotingQueue_Request.desired_revision:type_name -> EPublishedFileRevision
	67, // 22: CPublishedFile_QueryFiles_Request.required_kv_tags:type_name -> CPublishedFile_QueryFiles_Request.KVTag
	68, // 23: CPublishedFile_QueryFiles_Request.taggroups:type_name -> CPublishedFile_QueryFiles_Request.TagGroup
	0,  // 24: CPublishedFile_QueryFiles_Request.desired_revision:type_name -> EPublishedFileRevision
	11, // 25: CPublishedFile_QueryFiles_Response.publishedfiledetails:type_name -> PublishedFileDetails
	69, // 26: CPublishedFile_GetAppRelationships_Response.app_relationships:type_name -> CPublishedFile_GetAppRelationships_Response.AppRelationship
	70, // 27: CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage:type_name -> CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage
	71, // 28: CPublishedFile_GetUserVoteSummary_Response.summaries:type_name -> CPublishedFile_GetUserVoteSummary_Response.VoteSummary
	72, // 29: CPublishedFile_FileSubscribed_Notification.revisions:type_name -> CPublishedFile_FileSubscribed_Notification.RevisionData
	1,  // 30: PublishedFileDetails.ForSaleData.estatus:type_name -> EPublishedFileForSaleStatus
	0,  // 31: CPublishedFile_GetItemInfo_Request.WorkshopItem.desired_revision:type_name -> EPublishedFileRevision
	0,  // 32: CPublishedFile_FileSubscribed_Notification.RevisionData.revision:type_name -> EPublishedFileRevision
	2,  // 33: PublishedFile.Subscribe:input_type -> CPublishedFile_Subscribe_Request
	4,  // 34: PublishedFile.Unsubscribe:input_type -> CPublishedFile_Unsubscribe_Request
	6,  // 35: PublishedFile.CanSubscribe:input_type -> CPublishedFile_CanSubscribe_Request
	8,  // 36: PublishedFile.Publish:input_type -> CPublishedFile_Publish_Request
	10, // 37: PublishedFile.GetDetails:input_type -> CPublishedFile_GetDetails_Request
	13, // 38: PublishedFile.GetItemInfo:input_type -> CPublishedFile_GetItemInfo_Request
	15, // 39: PublishedFile.GetUserFiles:input_type -> CPublishedFile_GetUserFiles_Request
	17, // 40: PublishedFile.AreFilesInSubscriptionList:input_type -> CPublishedFile_AreFilesInSubscriptionList_Request
	19, // 41: PublishedFile.Update:input_type -> CPublishedFile_Update_Request
	21, // 42: PublishedFile.GetChangeHistoryEntry:input_type -> CPublishedFile_GetChangeHistoryEntry_Request
	23, // 43: PublishedFile.GetChangeHistory:input_type -> CPublishedFile_GetChangeHistory_Request
	25, // 44: PublishedFile.RefreshVotingQueue:input_type -> CPublishedFile_RefreshVotingQueue_Request
	27, // 45: PublishedFile.QueryFiles:input_type -> CPublishedFile_QueryFiles_Request
	29, // 46: PublishedFile.AddAppRelationship:input_type -> CPublishedFile_AddAppRelationship_Request
	31, // 47: PublishedFile.RemoveAppRelationship:input_type -> CPublishedFile_RemoveAppRelationship_Request
	33, // 48: PublishedFile.GetAppRelationships:input_type -> CPublishedFile_GetAppRelationships_Request
	35, // 49: PublishedFile.StartPlaytimeTracking:input_type -> CPublishedFile_StartPlaytimeTracking_Request
	37, // 50: PublishedFile.StopPlaytimeTracking:input_type -> CPublishedFile_StopPlaytimeTracking_Request
	39, // 51: PublishedFile.StopPlaytimeTrackingForAllAppItems:input_type -> CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request
	41, // 52: PublishedFile.SetPlaytimeForControllerConfigs:input_type -> CPublishedFile_SetPlaytimeForControllerConfigs_Request
	43, // 53: PublishedFile.AddChild:input_type -> CPublishedFile_AddChild_Request
	45, // 54: PublishedFile.RemoveChild:input_type -> CPublishedFile_RemoveChild_Request
	47, // 55: PublishedFile.GetUserVoteSummary:input_type -> CPublishedFile_GetUserVoteSummary_Request
	49, // 56: PublishedFileClient.NotifyFileSubscribed:input_type -> CPublishedFile_FileSubscribed_Notification
	50, // 57: PublishedFileClient.NotifyFileUnsubscribed:input_type -> CPublishedFile_FileUnsubscribed_Notification
	51, // 58: PublishedFileClient.NotifyFileDeleted:input_type -> CPublishedFile_FileDeleted_Client_Notification
	3,  // 59: PublishedFile.Subscribe:output_type -> CPublishedFile_Subscribe_Response
	5,  // 60: PublishedFile.Unsubscribe:output_type -> CPublishedFile_Unsubscribe_Response
	7,  // 61: PublishedFile.CanSubscribe:output_type -> CPublishedFile_CanSubscribe_Response
	9,  // 62: PublishedFile.Publish:output_type -> CPublishedFile_Publish_Response
	12, // 63: PublishedFile.GetDetails:output_type -> CPublishedFile_GetDetails_Response
	14, // 64: PublishedFile.GetItemInfo:output_type -> CPublishedFile_GetItemInfo_Response
	16, // 65: PublishedFile.GetUserFiles:output_type -> CPublishedFile_GetUserFiles_Response
	18, // 66: PublishedFile.AreFilesInSubscriptionList:output_type -> CPublishedFile_AreFilesInSubscriptionList_Response
	20, // 67: PublishedFile.Update:output_type -> CPublishedFile_Update_Response
	22, // 68: PublishedFile.GetChangeHistoryEntry:output_type -> CPublishedFile_GetChangeHistoryEntry_Response
	24, // 69: PublishedFile.GetChangeHistory:output_type -> CPublishedFile_GetChangeHistory_Response
	26, // 70: PublishedFile.RefreshVotingQueue:output_type -> CPublishedFile_RefreshVotingQueue_Response
	28, // 71: PublishedFile.QueryFiles:output_type -> CPublishedFile_QueryFiles_Response
	30, // 72: PublishedFile.AddAppRelationship:output_type -> CPublishedFile_AddAppRelationship_Response
	32, // 73: PublishedFile.RemoveAppRelationship:output_type -> CPublishedFile_RemoveAppRelationship_Response
	34, // 74: PublishedFile.GetAppRelationships:output_type -> CPublishedFile_GetAppRelationships_Response
	36, // 75: PublishedFile.StartPlaytimeTracking:output_type -> CPublishedFile_StartPlaytimeTracking_Response
	38, // 76: PublishedFile.StopPlaytimeTracking:output_type -> CPublishedFile_StopPlaytimeTracking_Response
	40, // 77: PublishedFile.StopPlaytimeTrackingForAllAppItems:output_type -> CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response
	42, // 78: PublishedFile.SetPlaytimeForControllerConfigs:output_type -> CPublishedFile_SetPlaytimeForControllerConfigs_Response
	44, // 79: PublishedFile.AddChild:output_type -> CPublishedFile_AddChild_Response
	46, // 80: PublishedFile.RemoveChild:output_type -> CPublishedFile_RemoveChild_Response
	48, // 81: PublishedFile.GetUserVoteSummary:output_type -> CPublishedFile_GetUserVoteSummary_Response
	73, // 82: PublishedFileClient.NotifyFileSubscribed:output_type -> NoResponse
	73, // 83: PublishedFileClient.NotifyFileUnsubscribed:output_type -> NoResponse
	73, // 84: PublishedFileClient.NotifyFileDeleted:output_type -> NoResponse
	59, // [59:85] is the sub-list for method output_type
	33, // [33:59] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_steammessages_publishedfile_steamclient_proto_init() }
func file_steammessages_publishedfile_steamclient_proto_init() {
	if File_steammessages_publishedfile_steamclient_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_publishedfile_steamclient_proto_rawDesc), len(file_steammessages_publishedfile_steamclient_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_publishedfile_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_publishedfile_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_publishedfile_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_publishedfile_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_publishedfile_steamclient_proto = out.File
	file_steammessages_publishedfile_steamclient_proto_goTypes = nil
	file_steammessages_publishedfile_steamclient_proto_depIdxs = nil
}
