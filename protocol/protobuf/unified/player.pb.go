// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: steammessages_player.steamclient.proto

package unified

import (
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ENotificationSetting int32

const (
	ENotificationSetting_k_ENotificationSettingNotifyUseDefault ENotificationSetting = 0
	ENotificationSetting_k_ENotificationSettingAlways           ENotificationSetting = 1
	ENotificationSetting_k_ENotificationSettingNever            ENotificationSetting = 2
)

// Enum value maps for ENotificationSetting.
var (
	ENotificationSetting_name = map[int32]string{
		0: "k_ENotificationSettingNotifyUseDefault",
		1: "k_ENotificationSettingAlways",
		2: "k_ENotificationSettingNever",
	}
	ENotificationSetting_value = map[string]int32{
		"k_ENotificationSettingNotifyUseDefault": 0,
		"k_ENotificationSettingAlways":           1,
		"k_ENotificationSettingNever":            2,
	}
)

func (x ENotificationSetting) Enum() *ENotificationSetting {
	p := new(ENotificationSetting)
	*p = x
	return p
}

func (x ENotificationSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENotificationSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_player_steamclient_proto_enumTypes[0].Descriptor()
}

func (ENotificationSetting) Type() protoreflect.EnumType {
	return &file_steammessages_player_steamclient_proto_enumTypes[0]
}

func (x ENotificationSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENotificationSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENotificationSetting(num)
	return nil
}

// Deprecated: Use ENotificationSetting.Descriptor instead.
func (ENotificationSetting) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{0}
}

type CPlayer_GetMutualFriendsForIncomingInvites_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) Reset() {
	*x = CPlayer_GetMutualFriendsForIncomingInvites_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMutualFriendsForIncomingInvites_Request) ProtoMessage() {}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMutualFriendsForIncomingInvites_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMutualFriendsForIncomingInvites_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{0}
}

type CPlayer_IncomingInviteMutualFriendList struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Steamid                *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MutualFriendAccountIds []uint32               `protobuf:"varint,2,rep,name=mutual_friend_account_ids,json=mutualFriendAccountIds" json:"mutual_friend_account_ids,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CPlayer_IncomingInviteMutualFriendList) Reset() {
	*x = CPlayer_IncomingInviteMutualFriendList{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_IncomingInviteMutualFriendList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IncomingInviteMutualFriendList) ProtoMessage() {}

func (x *CPlayer_IncomingInviteMutualFriendList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IncomingInviteMutualFriendList.ProtoReflect.Descriptor instead.
func (*CPlayer_IncomingInviteMutualFriendList) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CPlayer_IncomingInviteMutualFriendList) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_IncomingInviteMutualFriendList) GetMutualFriendAccountIds() []uint32 {
	if x != nil {
		return x.MutualFriendAccountIds
	}
	return nil
}

type CPlayer_GetMutualFriendsForIncomingInvites_Response struct {
	state                            protoimpl.MessageState                    `protogen:"open.v1"`
	IncomingInviteMutualFriendsLists []*CPlayer_IncomingInviteMutualFriendList `protobuf:"bytes,1,rep,name=incoming_invite_mutual_friends_lists,json=incomingInviteMutualFriendsLists" json:"incoming_invite_mutual_friends_lists,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) Reset() {
	*x = CPlayer_GetMutualFriendsForIncomingInvites_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMutualFriendsForIncomingInvites_Response) ProtoMessage() {}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMutualFriendsForIncomingInvites_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMutualFriendsForIncomingInvites_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) GetIncomingInviteMutualFriendsLists() []*CPlayer_IncomingInviteMutualFriendList {
	if x != nil {
		return x.IncomingInviteMutualFriendsLists
	}
	return nil
}

type CPlayer_GetOwnedGames_Request struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Steamid                *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeAppinfo         *bool                  `protobuf:"varint,2,opt,name=include_appinfo,json=includeAppinfo" json:"include_appinfo,omitempty"`
	IncludePlayedFreeGames *bool                  `protobuf:"varint,3,opt,name=include_played_free_games,json=includePlayedFreeGames" json:"include_played_free_games,omitempty"`
	AppidsFilter           []uint32               `protobuf:"varint,4,rep,name=appids_filter,json=appidsFilter" json:"appids_filter,omitempty"`
	IncludeFreeSub         *bool                  `protobuf:"varint,5,opt,name=include_free_sub,json=includeFreeSub" json:"include_free_sub,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CPlayer_GetOwnedGames_Request) Reset() {
	*x = CPlayer_GetOwnedGames_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetOwnedGames_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetOwnedGames_Request) ProtoMessage() {}

func (x *CPlayer_GetOwnedGames_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetOwnedGames_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetOwnedGames_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CPlayer_GetOwnedGames_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Request) GetIncludeAppinfo() bool {
	if x != nil && x.IncludeAppinfo != nil {
		return *x.IncludeAppinfo
	}
	return false
}

func (x *CPlayer_GetOwnedGames_Request) GetIncludePlayedFreeGames() bool {
	if x != nil && x.IncludePlayedFreeGames != nil {
		return *x.IncludePlayedFreeGames
	}
	return false
}

func (x *CPlayer_GetOwnedGames_Request) GetAppidsFilter() []uint32 {
	if x != nil {
		return x.AppidsFilter
	}
	return nil
}

func (x *CPlayer_GetOwnedGames_Request) GetIncludeFreeSub() bool {
	if x != nil && x.IncludeFreeSub != nil {
		return *x.IncludeFreeSub
	}
	return false
}

type CPlayer_GetOwnedGames_Response struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	GameCount     *uint32                                `protobuf:"varint,1,opt,name=game_count,json=gameCount" json:"game_count,omitempty"`
	Games         []*CPlayer_GetOwnedGames_Response_Game `protobuf:"bytes,2,rep,name=games" json:"games,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetOwnedGames_Response) Reset() {
	*x = CPlayer_GetOwnedGames_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetOwnedGames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetOwnedGames_Response) ProtoMessage() {}

func (x *CPlayer_GetOwnedGames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetOwnedGames_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetOwnedGames_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CPlayer_GetOwnedGames_Response) GetGameCount() uint32 {
	if x != nil && x.GameCount != nil {
		return *x.GameCount
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response) GetGames() []*CPlayer_GetOwnedGames_Response_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type CPlayer_GetPlayNext_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxAgeSeconds *uint32                `protobuf:"varint,1,opt,name=max_age_seconds,json=maxAgeSeconds" json:"max_age_seconds,omitempty"`
	IgnoreAppids  []uint32               `protobuf:"varint,2,rep,name=ignore_appids,json=ignoreAppids" json:"ignore_appids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetPlayNext_Request) Reset() {
	*x = CPlayer_GetPlayNext_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPlayNext_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPlayNext_Request) ProtoMessage() {}

func (x *CPlayer_GetPlayNext_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPlayNext_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPlayNext_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CPlayer_GetPlayNext_Request) GetMaxAgeSeconds() uint32 {
	if x != nil && x.MaxAgeSeconds != nil {
		return *x.MaxAgeSeconds
	}
	return 0
}

func (x *CPlayer_GetPlayNext_Request) GetIgnoreAppids() []uint32 {
	if x != nil {
		return x.IgnoreAppids
	}
	return nil
}

type CPlayer_GetPlayNext_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LastUpdateTime *uint32                `protobuf:"varint,1,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty"`
	Appids         []uint32               `protobuf:"varint,2,rep,name=appids" json:"appids,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CPlayer_GetPlayNext_Response) Reset() {
	*x = CPlayer_GetPlayNext_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPlayNext_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPlayNext_Response) ProtoMessage() {}

func (x *CPlayer_GetPlayNext_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPlayNext_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPlayNext_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CPlayer_GetPlayNext_Response) GetLastUpdateTime() uint32 {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return 0
}

func (x *CPlayer_GetPlayNext_Response) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

type CPlayer_GetFriendsGameplayInfo_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Request) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response struct {
	state          protoimpl.MessageState                                         `protogen:"open.v1"`
	YourInfo       *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo       `protobuf:"bytes,1,opt,name=your_info,json=yourInfo" json:"your_info,omitempty"`
	InGame         []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,2,rep,name=in_game,json=inGame" json:"in_game,omitempty"`
	PlayedRecently []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,3,rep,name=played_recently,json=playedRecently" json:"played_recently,omitempty"`
	PlayedEver     []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,4,rep,name=played_ever,json=playedEver" json:"played_ever,omitempty"`
	Owns           []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,5,rep,name=owns" json:"owns,omitempty"`
	InWishlist     []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,6,rep,name=in_wishlist,json=inWishlist" json:"in_wishlist,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetYourInfo() *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo {
	if x != nil {
		return x.YourInfo
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetInGame() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.InGame
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetPlayedRecently() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.PlayedRecently
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetPlayedEver() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.PlayedEver
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetOwns() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.Owns
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetInWishlist() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.InWishlist
	}
	return nil
}

type CPlayer_GetFriendsAppsActivity_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewsLanguage  *string                `protobuf:"bytes,1,opt,name=news_language,json=newsLanguage" json:"news_language,omitempty"`
	RequestFlags  *uint32                `protobuf:"varint,2,opt,name=request_flags,json=requestFlags" json:"request_flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsAppsActivity_Request) Reset() {
	*x = CPlayer_GetFriendsAppsActivity_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsAppsActivity_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsAppsActivity_Request) ProtoMessage() {}

func (x *CPlayer_GetFriendsAppsActivity_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsAppsActivity_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsAppsActivity_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CPlayer_GetFriendsAppsActivity_Request) GetNewsLanguage() string {
	if x != nil && x.NewsLanguage != nil {
		return *x.NewsLanguage
	}
	return ""
}

func (x *CPlayer_GetFriendsAppsActivity_Request) GetRequestFlags() uint32 {
	if x != nil && x.RequestFlags != nil {
		return *x.RequestFlags
	}
	return 0
}

type CPlayer_GetFriendsAppsActivity_Response struct {
	state             protoimpl.MessageState                                    `protogen:"open.v1"`
	Trending          []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,1,rep,name=trending" json:"trending,omitempty"`
	RecentPurchases   []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,2,rep,name=recent_purchases,json=recentPurchases" json:"recent_purchases,omitempty"`
	Unowned           []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,3,rep,name=unowned" json:"unowned,omitempty"`
	Popular           []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,4,rep,name=popular" json:"popular,omitempty"`
	DontForget        []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,5,rep,name=dont_forget,json=dontForget" json:"dont_forget,omitempty"`
	BeingDiscussed    []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,6,rep,name=being_discussed,json=beingDiscussed" json:"being_discussed,omitempty"`
	NewToGroup        []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,7,rep,name=new_to_group,json=newToGroup" json:"new_to_group,omitempty"`
	ReturnedToGroup   []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,8,rep,name=returned_to_group,json=returnedToGroup" json:"returned_to_group,omitempty"`
	ActiveFriendCount *uint32                                                   `protobuf:"varint,9,opt,name=active_friend_count,json=activeFriendCount,def=0" json:"active_friend_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CPlayer_GetFriendsAppsActivity_Response fields.
const (
	Default_CPlayer_GetFriendsAppsActivity_Response_ActiveFriendCount = uint32(0)
)

func (x *CPlayer_GetFriendsAppsActivity_Response) Reset() {
	*x = CPlayer_GetFriendsAppsActivity_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsAppsActivity_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsAppsActivity_Response) ProtoMessage() {}

func (x *CPlayer_GetFriendsAppsActivity_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsAppsActivity_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsAppsActivity_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetTrending() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.Trending
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetRecentPurchases() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.RecentPurchases
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetUnowned() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.Unowned
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetPopular() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.Popular
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetDontForget() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.DontForget
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetBeingDiscussed() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.BeingDiscussed
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetNewToGroup() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.NewToGroup
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetReturnedToGroup() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.ReturnedToGroup
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetActiveFriendCount() uint32 {
	if x != nil && x.ActiveFriendCount != nil {
		return *x.ActiveFriendCount
	}
	return Default_CPlayer_GetFriendsAppsActivity_Response_ActiveFriendCount
}

type CPlayer_GetGameBadgeLevels_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetGameBadgeLevels_Request) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetGameBadgeLevels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Request) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CPlayer_GetGameBadgeLevels_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetGameBadgeLevels_Response struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	PlayerLevel   *uint32                                      `protobuf:"varint,1,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	Badges        []*CPlayer_GetGameBadgeLevels_Response_Badge `protobuf:"bytes,2,rep,name=badges" json:"badges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetGameBadgeLevels_Response) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetGameBadgeLevels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Response) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CPlayer_GetGameBadgeLevels_Response) GetPlayerLevel() uint32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response) GetBadges() []*CPlayer_GetGameBadgeLevels_Response_Badge {
	if x != nil {
		return x.Badges
	}
	return nil
}

type CPlayer_GetProfileBackground_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language      *string                `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetProfileBackground_Request) Reset() {
	*x = CPlayer_GetProfileBackground_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetProfileBackground_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileBackground_Request) ProtoMessage() {}

func (x *CPlayer_GetProfileBackground_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileBackground_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileBackground_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CPlayer_GetProfileBackground_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetProfileBackground_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type ProfileItem struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Communityitemid *uint64                `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
	ImageSmall      *string                `protobuf:"bytes,2,opt,name=image_small,json=imageSmall" json:"image_small,omitempty"`
	ImageLarge      *string                `protobuf:"bytes,3,opt,name=image_large,json=imageLarge" json:"image_large,omitempty"`
	Name            *string                `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	ItemTitle       *string                `protobuf:"bytes,5,opt,name=item_title,json=itemTitle" json:"item_title,omitempty"`
	ItemDescription *string                `protobuf:"bytes,6,opt,name=item_description,json=itemDescription" json:"item_description,omitempty"`
	Appid           *uint32                `protobuf:"varint,7,opt,name=appid" json:"appid,omitempty"`
	ItemType        *uint32                `protobuf:"varint,8,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	ItemClass       *uint32                `protobuf:"varint,9,opt,name=item_class,json=itemClass" json:"item_class,omitempty"`
	MovieWebm       *string                `protobuf:"bytes,10,opt,name=movie_webm,json=movieWebm" json:"movie_webm,omitempty"`
	MovieMp4        *string                `protobuf:"bytes,11,opt,name=movie_mp4,json=movieMp4" json:"movie_mp4,omitempty"`
	EquippedFlags   *uint32                `protobuf:"varint,12,opt,name=equipped_flags,json=equippedFlags" json:"equipped_flags,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProfileItem) Reset() {
	*x = ProfileItem{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileItem) ProtoMessage() {}

func (x *ProfileItem) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileItem.ProtoReflect.Descriptor instead.
func (*ProfileItem) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *ProfileItem) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

func (x *ProfileItem) GetImageSmall() string {
	if x != nil && x.ImageSmall != nil {
		return *x.ImageSmall
	}
	return ""
}

func (x *ProfileItem) GetImageLarge() string {
	if x != nil && x.ImageLarge != nil {
		return *x.ImageLarge
	}
	return ""
}

func (x *ProfileItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProfileItem) GetItemTitle() string {
	if x != nil && x.ItemTitle != nil {
		return *x.ItemTitle
	}
	return ""
}

func (x *ProfileItem) GetItemDescription() string {
	if x != nil && x.ItemDescription != nil {
		return *x.ItemDescription
	}
	return ""
}

func (x *ProfileItem) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *ProfileItem) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *ProfileItem) GetItemClass() uint32 {
	if x != nil && x.ItemClass != nil {
		return *x.ItemClass
	}
	return 0
}

func (x *ProfileItem) GetMovieWebm() string {
	if x != nil && x.MovieWebm != nil {
		return *x.MovieWebm
	}
	return ""
}

func (x *ProfileItem) GetMovieMp4() string {
	if x != nil && x.MovieMp4 != nil {
		return *x.MovieMp4
	}
	return ""
}

func (x *ProfileItem) GetEquippedFlags() uint32 {
	if x != nil && x.EquippedFlags != nil {
		return *x.EquippedFlags
	}
	return 0
}

type CPlayer_GetProfileBackground_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ProfileBackground *ProfileItem           `protobuf:"bytes,1,opt,name=profile_background,json=profileBackground" json:"profile_background,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CPlayer_GetProfileBackground_Response) Reset() {
	*x = CPlayer_GetProfileBackground_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_GetProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CPlayer_GetProfileBackground_Response) GetProfileBackground() *ProfileItem {
	if x != nil {
		return x.ProfileBackground
	}
	return nil
}

type CPlayer_SetProfileBackground_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Communityitemid *uint64                `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_SetProfileBackground_Request) Reset() {
	*x = CPlayer_SetProfileBackground_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetProfileBackground_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetProfileBackground_Request) ProtoMessage() {}

func (x *CPlayer_SetProfileBackground_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetProfileBackground_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetProfileBackground_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CPlayer_SetProfileBackground_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

type CPlayer_SetProfileBackground_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetProfileBackground_Response) Reset() {
	*x = CPlayer_SetProfileBackground_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_SetProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{17}
}

type CPlayer_GetMiniProfileBackground_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language      *string                `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetMiniProfileBackground_Request) Reset() {
	*x = CPlayer_GetMiniProfileBackground_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetMiniProfileBackground_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMiniProfileBackground_Request) ProtoMessage() {}

func (x *CPlayer_GetMiniProfileBackground_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMiniProfileBackground_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMiniProfileBackground_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CPlayer_GetMiniProfileBackground_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetMiniProfileBackground_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetMiniProfileBackground_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ProfileBackground *ProfileItem           `protobuf:"bytes,1,opt,name=profile_background,json=profileBackground" json:"profile_background,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CPlayer_GetMiniProfileBackground_Response) Reset() {
	*x = CPlayer_GetMiniProfileBackground_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetMiniProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMiniProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_GetMiniProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMiniProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMiniProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CPlayer_GetMiniProfileBackground_Response) GetProfileBackground() *ProfileItem {
	if x != nil {
		return x.ProfileBackground
	}
	return nil
}

type CPlayer_SetMiniProfileBackground_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Communityitemid *uint64                `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_SetMiniProfileBackground_Request) Reset() {
	*x = CPlayer_SetMiniProfileBackground_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetMiniProfileBackground_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetMiniProfileBackground_Request) ProtoMessage() {}

func (x *CPlayer_SetMiniProfileBackground_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetMiniProfileBackground_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetMiniProfileBackground_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CPlayer_SetMiniProfileBackground_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

type CPlayer_SetMiniProfileBackground_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetMiniProfileBackground_Response) Reset() {
	*x = CPlayer_SetMiniProfileBackground_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetMiniProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetMiniProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_SetMiniProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetMiniProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetMiniProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{21}
}

type CPlayer_GetAvatarFrame_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language      *string                `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetAvatarFrame_Request) Reset() {
	*x = CPlayer_GetAvatarFrame_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetAvatarFrame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAvatarFrame_Request) ProtoMessage() {}

func (x *CPlayer_GetAvatarFrame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAvatarFrame_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAvatarFrame_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CPlayer_GetAvatarFrame_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetAvatarFrame_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetAvatarFrame_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AvatarFrame   *ProfileItem           `protobuf:"bytes,1,opt,name=avatar_frame,json=avatarFrame" json:"avatar_frame,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetAvatarFrame_Response) Reset() {
	*x = CPlayer_GetAvatarFrame_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetAvatarFrame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAvatarFrame_Response) ProtoMessage() {}

func (x *CPlayer_GetAvatarFrame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAvatarFrame_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAvatarFrame_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CPlayer_GetAvatarFrame_Response) GetAvatarFrame() *ProfileItem {
	if x != nil {
		return x.AvatarFrame
	}
	return nil
}

type CPlayer_SetAvatarFrame_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Communityitemid *uint64                `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_SetAvatarFrame_Request) Reset() {
	*x = CPlayer_SetAvatarFrame_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetAvatarFrame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAvatarFrame_Request) ProtoMessage() {}

func (x *CPlayer_SetAvatarFrame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAvatarFrame_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAvatarFrame_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CPlayer_SetAvatarFrame_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

type CPlayer_SetAvatarFrame_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetAvatarFrame_Response) Reset() {
	*x = CPlayer_SetAvatarFrame_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetAvatarFrame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAvatarFrame_Response) ProtoMessage() {}

func (x *CPlayer_SetAvatarFrame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAvatarFrame_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAvatarFrame_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{25}
}

type CPlayer_GetAnimatedAvatar_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language      *string                `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetAnimatedAvatar_Request) Reset() {
	*x = CPlayer_GetAnimatedAvatar_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetAnimatedAvatar_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAnimatedAvatar_Request) ProtoMessage() {}

func (x *CPlayer_GetAnimatedAvatar_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAnimatedAvatar_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAnimatedAvatar_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CPlayer_GetAnimatedAvatar_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetAnimatedAvatar_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetAnimatedAvatar_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Avatar        *ProfileItem           `protobuf:"bytes,1,opt,name=avatar" json:"avatar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetAnimatedAvatar_Response) Reset() {
	*x = CPlayer_GetAnimatedAvatar_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetAnimatedAvatar_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAnimatedAvatar_Response) ProtoMessage() {}

func (x *CPlayer_GetAnimatedAvatar_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAnimatedAvatar_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAnimatedAvatar_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CPlayer_GetAnimatedAvatar_Response) GetAvatar() *ProfileItem {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type CPlayer_SetAnimatedAvatar_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Communityitemid *uint64                `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_SetAnimatedAvatar_Request) Reset() {
	*x = CPlayer_SetAnimatedAvatar_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetAnimatedAvatar_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAnimatedAvatar_Request) ProtoMessage() {}

func (x *CPlayer_SetAnimatedAvatar_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAnimatedAvatar_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAnimatedAvatar_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CPlayer_SetAnimatedAvatar_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

type CPlayer_SetAnimatedAvatar_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetAnimatedAvatar_Response) Reset() {
	*x = CPlayer_SetAnimatedAvatar_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetAnimatedAvatar_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAnimatedAvatar_Response) ProtoMessage() {}

func (x *CPlayer_SetAnimatedAvatar_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAnimatedAvatar_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAnimatedAvatar_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{29}
}

type CPlayer_GetProfileItemsOwned_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *string                `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetProfileItemsOwned_Request) Reset() {
	*x = CPlayer_GetProfileItemsOwned_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetProfileItemsOwned_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsOwned_Request) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsOwned_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsOwned_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsOwned_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{30}
}

func (x *CPlayer_GetProfileItemsOwned_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetProfileItemsOwned_Response struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ProfileBackgrounds     []*ProfileItem         `protobuf:"bytes,1,rep,name=profile_backgrounds,json=profileBackgrounds" json:"profile_backgrounds,omitempty"`
	MiniProfileBackgrounds []*ProfileItem         `protobuf:"bytes,2,rep,name=mini_profile_backgrounds,json=miniProfileBackgrounds" json:"mini_profile_backgrounds,omitempty"`
	AvatarFrames           []*ProfileItem         `protobuf:"bytes,3,rep,name=avatar_frames,json=avatarFrames" json:"avatar_frames,omitempty"`
	AnimatedAvatars        []*ProfileItem         `protobuf:"bytes,4,rep,name=animated_avatars,json=animatedAvatars" json:"animated_avatars,omitempty"`
	ProfileModifiers       []*ProfileItem         `protobuf:"bytes,5,rep,name=profile_modifiers,json=profileModifiers" json:"profile_modifiers,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CPlayer_GetProfileItemsOwned_Response) Reset() {
	*x = CPlayer_GetProfileItemsOwned_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetProfileItemsOwned_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsOwned_Response) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsOwned_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsOwned_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsOwned_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{31}
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetProfileBackgrounds() []*ProfileItem {
	if x != nil {
		return x.ProfileBackgrounds
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetMiniProfileBackgrounds() []*ProfileItem {
	if x != nil {
		return x.MiniProfileBackgrounds
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetAvatarFrames() []*ProfileItem {
	if x != nil {
		return x.AvatarFrames
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetAnimatedAvatars() []*ProfileItem {
	if x != nil {
		return x.AnimatedAvatars
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetProfileModifiers() []*ProfileItem {
	if x != nil {
		return x.ProfileModifiers
	}
	return nil
}

type CPlayer_GetProfileItemsEquipped_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language      *string                `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetProfileItemsEquipped_Request) Reset() {
	*x = CPlayer_GetProfileItemsEquipped_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetProfileItemsEquipped_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsEquipped_Request) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsEquipped_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsEquipped_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsEquipped_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CPlayer_GetProfileItemsEquipped_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetProfileItemsEquipped_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetProfileItemsEquipped_Response struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ProfileBackground     *ProfileItem           `protobuf:"bytes,1,opt,name=profile_background,json=profileBackground" json:"profile_background,omitempty"`
	MiniProfileBackground *ProfileItem           `protobuf:"bytes,2,opt,name=mini_profile_background,json=miniProfileBackground" json:"mini_profile_background,omitempty"`
	AvatarFrame           *ProfileItem           `protobuf:"bytes,3,opt,name=avatar_frame,json=avatarFrame" json:"avatar_frame,omitempty"`
	AnimatedAvatar        *ProfileItem           `protobuf:"bytes,4,opt,name=animated_avatar,json=animatedAvatar" json:"animated_avatar,omitempty"`
	ProfileModifier       *ProfileItem           `protobuf:"bytes,5,opt,name=profile_modifier,json=profileModifier" json:"profile_modifier,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CPlayer_GetProfileItemsEquipped_Response) Reset() {
	*x = CPlayer_GetProfileItemsEquipped_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetProfileItemsEquipped_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsEquipped_Response) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsEquipped_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsEquipped_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsEquipped_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetProfileBackground() *ProfileItem {
	if x != nil {
		return x.ProfileBackground
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetMiniProfileBackground() *ProfileItem {
	if x != nil {
		return x.MiniProfileBackground
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetAvatarFrame() *ProfileItem {
	if x != nil {
		return x.AvatarFrame
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetAnimatedAvatar() *ProfileItem {
	if x != nil {
		return x.AnimatedAvatar
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetProfileModifier() *ProfileItem {
	if x != nil {
		return x.ProfileModifier
	}
	return nil
}

type CPlayer_SetEquippedProfileItemFlags_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Communityitemid *uint64                `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
	Flags           *uint32                `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) Reset() {
	*x = CPlayer_SetEquippedProfileItemFlags_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetEquippedProfileItemFlags_Request) ProtoMessage() {}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetEquippedProfileItemFlags_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetEquippedProfileItemFlags_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{34}
}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type CPlayer_SetEquippedProfileItemFlags_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetEquippedProfileItemFlags_Response) Reset() {
	*x = CPlayer_SetEquippedProfileItemFlags_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetEquippedProfileItemFlags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetEquippedProfileItemFlags_Response) ProtoMessage() {}

func (x *CPlayer_SetEquippedProfileItemFlags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetEquippedProfileItemFlags_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetEquippedProfileItemFlags_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{35}
}

type CPlayer_GetEmoticonList_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetEmoticonList_Request) Reset() {
	*x = CPlayer_GetEmoticonList_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetEmoticonList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetEmoticonList_Request) ProtoMessage() {}

func (x *CPlayer_GetEmoticonList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetEmoticonList_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetEmoticonList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{36}
}

type CPlayer_GetEmoticonList_Response struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Emoticons     []*CPlayer_GetEmoticonList_Response_Emoticon `protobuf:"bytes,1,rep,name=emoticons" json:"emoticons,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetEmoticonList_Response) Reset() {
	*x = CPlayer_GetEmoticonList_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetEmoticonList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetEmoticonList_Response) ProtoMessage() {}

func (x *CPlayer_GetEmoticonList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetEmoticonList_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetEmoticonList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{37}
}

func (x *CPlayer_GetEmoticonList_Response) GetEmoticons() []*CPlayer_GetEmoticonList_Response_Emoticon {
	if x != nil {
		return x.Emoticons
	}
	return nil
}

type CPlayer_GetAchievementsProgress_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Language      *string                `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	Appids        []uint32               `protobuf:"varint,3,rep,name=appids" json:"appids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetAchievementsProgress_Request) Reset() {
	*x = CPlayer_GetAchievementsProgress_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetAchievementsProgress_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAchievementsProgress_Request) ProtoMessage() {}

func (x *CPlayer_GetAchievementsProgress_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAchievementsProgress_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAchievementsProgress_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{38}
}

func (x *CPlayer_GetAchievementsProgress_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CPlayer_GetAchievementsProgress_Request) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

type CPlayer_GetAchievementsProgress_Response struct {
	state               protoimpl.MessageState                                          `protogen:"open.v1"`
	AchievementProgress []*CPlayer_GetAchievementsProgress_Response_AchievementProgress `protobuf:"bytes,1,rep,name=achievement_progress,json=achievementProgress" json:"achievement_progress,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CPlayer_GetAchievementsProgress_Response) Reset() {
	*x = CPlayer_GetAchievementsProgress_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetAchievementsProgress_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAchievementsProgress_Response) ProtoMessage() {}

func (x *CPlayer_GetAchievementsProgress_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAchievementsProgress_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAchievementsProgress_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CPlayer_GetAchievementsProgress_Response) GetAchievementProgress() []*CPlayer_GetAchievementsProgress_Response_AchievementProgress {
	if x != nil {
		return x.AchievementProgress
	}
	return nil
}

type CPlayer_PostStatusToFriends_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	StatusText    *string                `protobuf:"bytes,2,opt,name=status_text,json=statusText" json:"status_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_PostStatusToFriends_Request) Reset() {
	*x = CPlayer_PostStatusToFriends_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_PostStatusToFriends_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_PostStatusToFriends_Request) ProtoMessage() {}

func (x *CPlayer_PostStatusToFriends_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_PostStatusToFriends_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_PostStatusToFriends_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{40}
}

func (x *CPlayer_PostStatusToFriends_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_PostStatusToFriends_Request) GetStatusText() string {
	if x != nil && x.StatusText != nil {
		return *x.StatusText
	}
	return ""
}

type CPlayer_PostStatusToFriends_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_PostStatusToFriends_Response) Reset() {
	*x = CPlayer_PostStatusToFriends_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_PostStatusToFriends_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_PostStatusToFriends_Response) ProtoMessage() {}

func (x *CPlayer_PostStatusToFriends_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_PostStatusToFriends_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_PostStatusToFriends_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{41}
}

type CPlayer_GetPostedStatus_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Postid        *uint64                `protobuf:"varint,2,opt,name=postid" json:"postid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetPostedStatus_Request) Reset() {
	*x = CPlayer_GetPostedStatus_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPostedStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPostedStatus_Request) ProtoMessage() {}

func (x *CPlayer_GetPostedStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPostedStatus_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPostedStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{42}
}

func (x *CPlayer_GetPostedStatus_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetPostedStatus_Request) GetPostid() uint64 {
	if x != nil && x.Postid != nil {
		return *x.Postid
	}
	return 0
}

type CPlayer_GetPostedStatus_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Postid        *uint64                `protobuf:"varint,2,opt,name=postid" json:"postid,omitempty"`
	StatusText    *string                `protobuf:"bytes,3,opt,name=status_text,json=statusText" json:"status_text,omitempty"`
	Deleted       *bool                  `protobuf:"varint,4,opt,name=deleted" json:"deleted,omitempty"`
	Appid         *uint32                `protobuf:"varint,5,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetPostedStatus_Response) Reset() {
	*x = CPlayer_GetPostedStatus_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPostedStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPostedStatus_Response) ProtoMessage() {}

func (x *CPlayer_GetPostedStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPostedStatus_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPostedStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{43}
}

func (x *CPlayer_GetPostedStatus_Response) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_GetPostedStatus_Response) GetPostid() uint64 {
	if x != nil && x.Postid != nil {
		return *x.Postid
	}
	return 0
}

func (x *CPlayer_GetPostedStatus_Response) GetStatusText() string {
	if x != nil && x.StatusText != nil {
		return *x.StatusText
	}
	return ""
}

func (x *CPlayer_GetPostedStatus_Response) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CPlayer_GetPostedStatus_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_DeletePostedStatus_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Postid        *uint64                `protobuf:"varint,1,opt,name=postid" json:"postid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_DeletePostedStatus_Request) Reset() {
	*x = CPlayer_DeletePostedStatus_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_DeletePostedStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_DeletePostedStatus_Request) ProtoMessage() {}

func (x *CPlayer_DeletePostedStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_DeletePostedStatus_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_DeletePostedStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{44}
}

func (x *CPlayer_DeletePostedStatus_Request) GetPostid() uint64 {
	if x != nil && x.Postid != nil {
		return *x.Postid
	}
	return 0
}

type CPlayer_DeletePostedStatus_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_DeletePostedStatus_Response) Reset() {
	*x = CPlayer_DeletePostedStatus_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_DeletePostedStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_DeletePostedStatus_Response) ProtoMessage() {}

func (x *CPlayer_DeletePostedStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_DeletePostedStatus_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_DeletePostedStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{45}
}

type CPlayer_GetLastPlayedTimes_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinLastPlayed *uint32                `protobuf:"varint,1,opt,name=min_last_played,json=minLastPlayed" json:"min_last_played,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetLastPlayedTimes_Request) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetLastPlayedTimes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Request) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{46}
}

func (x *CPlayer_GetLastPlayedTimes_Request) GetMinLastPlayed() uint32 {
	if x != nil && x.MinLastPlayed != nil {
		return *x.MinLastPlayed
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Response struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Games         []*CPlayer_GetLastPlayedTimes_Response_Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetLastPlayedTimes_Response) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetLastPlayedTimes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Response) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{47}
}

func (x *CPlayer_GetLastPlayedTimes_Response) GetGames() []*CPlayer_GetLastPlayedTimes_Response_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type CPlayer_AcceptSSA_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_AcceptSSA_Request) Reset() {
	*x = CPlayer_AcceptSSA_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_AcceptSSA_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AcceptSSA_Request) ProtoMessage() {}

func (x *CPlayer_AcceptSSA_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AcceptSSA_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_AcceptSSA_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{48}
}

type CPlayer_AcceptSSA_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_AcceptSSA_Response) Reset() {
	*x = CPlayer_AcceptSSA_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_AcceptSSA_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AcceptSSA_Response) ProtoMessage() {}

func (x *CPlayer_AcceptSSA_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AcceptSSA_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_AcceptSSA_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{49}
}

type CPlayer_GetNicknameList_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetNicknameList_Request) Reset() {
	*x = CPlayer_GetNicknameList_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNicknameList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Request) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{50}
}

type CPlayer_GetNicknameList_Response struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Nicknames     []*CPlayer_GetNicknameList_Response_PlayerNickname `protobuf:"bytes,1,rep,name=nicknames" json:"nicknames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetNicknameList_Response) Reset() {
	*x = CPlayer_GetNicknameList_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNicknameList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Response) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{51}
}

func (x *CPlayer_GetNicknameList_Response) GetNicknames() []*CPlayer_GetNicknameList_Response_PlayerNickname {
	if x != nil {
		return x.Nicknames
	}
	return nil
}

type CPlayer_GetPerFriendPreferences_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetPerFriendPreferences_Request) Reset() {
	*x = CPlayer_GetPerFriendPreferences_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPerFriendPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPerFriendPreferences_Request) ProtoMessage() {}

func (x *CPlayer_GetPerFriendPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPerFriendPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPerFriendPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{52}
}

type PerFriendPreferences struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Accountid                 *uint32                `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname                  *string                `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	NotificationsShowingame   *ENotificationSetting  `protobuf:"varint,3,opt,name=notifications_showingame,json=notificationsShowingame,enum=ENotificationSetting,def=0" json:"notifications_showingame,omitempty"`
	NotificationsShowonline   *ENotificationSetting  `protobuf:"varint,4,opt,name=notifications_showonline,json=notificationsShowonline,enum=ENotificationSetting,def=0" json:"notifications_showonline,omitempty"`
	NotificationsShowmessages *ENotificationSetting  `protobuf:"varint,5,opt,name=notifications_showmessages,json=notificationsShowmessages,enum=ENotificationSetting,def=0" json:"notifications_showmessages,omitempty"`
	SoundsShowingame          *ENotificationSetting  `protobuf:"varint,6,opt,name=sounds_showingame,json=soundsShowingame,enum=ENotificationSetting,def=0" json:"sounds_showingame,omitempty"`
	SoundsShowonline          *ENotificationSetting  `protobuf:"varint,7,opt,name=sounds_showonline,json=soundsShowonline,enum=ENotificationSetting,def=0" json:"sounds_showonline,omitempty"`
	SoundsShowmessages        *ENotificationSetting  `protobuf:"varint,8,opt,name=sounds_showmessages,json=soundsShowmessages,enum=ENotificationSetting,def=0" json:"sounds_showmessages,omitempty"`
	NotificationsSendmobile   *ENotificationSetting  `protobuf:"varint,9,opt,name=notifications_sendmobile,json=notificationsSendmobile,enum=ENotificationSetting,def=0" json:"notifications_sendmobile,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

// Default values for PerFriendPreferences fields.
const (
	Default_PerFriendPreferences_NotificationsShowingame   = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_NotificationsShowonline   = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_NotificationsShowmessages = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_SoundsShowingame          = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_SoundsShowonline          = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_SoundsShowmessages        = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_NotificationsSendmobile   = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
)

func (x *PerFriendPreferences) Reset() {
	*x = PerFriendPreferences{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerFriendPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerFriendPreferences) ProtoMessage() {}

func (x *PerFriendPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerFriendPreferences.ProtoReflect.Descriptor instead.
func (*PerFriendPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{53}
}

func (x *PerFriendPreferences) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *PerFriendPreferences) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *PerFriendPreferences) GetNotificationsShowingame() ENotificationSetting {
	if x != nil && x.NotificationsShowingame != nil {
		return *x.NotificationsShowingame
	}
	return Default_PerFriendPreferences_NotificationsShowingame
}

func (x *PerFriendPreferences) GetNotificationsShowonline() ENotificationSetting {
	if x != nil && x.NotificationsShowonline != nil {
		return *x.NotificationsShowonline
	}
	return Default_PerFriendPreferences_NotificationsShowonline
}

func (x *PerFriendPreferences) GetNotificationsShowmessages() ENotificationSetting {
	if x != nil && x.NotificationsShowmessages != nil {
		return *x.NotificationsShowmessages
	}
	return Default_PerFriendPreferences_NotificationsShowmessages
}

func (x *PerFriendPreferences) GetSoundsShowingame() ENotificationSetting {
	if x != nil && x.SoundsShowingame != nil {
		return *x.SoundsShowingame
	}
	return Default_PerFriendPreferences_SoundsShowingame
}

func (x *PerFriendPreferences) GetSoundsShowonline() ENotificationSetting {
	if x != nil && x.SoundsShowonline != nil {
		return *x.SoundsShowonline
	}
	return Default_PerFriendPreferences_SoundsShowonline
}

func (x *PerFriendPreferences) GetSoundsShowmessages() ENotificationSetting {
	if x != nil && x.SoundsShowmessages != nil {
		return *x.SoundsShowmessages
	}
	return Default_PerFriendPreferences_SoundsShowmessages
}

func (x *PerFriendPreferences) GetNotificationsSendmobile() ENotificationSetting {
	if x != nil && x.NotificationsSendmobile != nil {
		return *x.NotificationsSendmobile
	}
	return Default_PerFriendPreferences_NotificationsSendmobile
}

type CPlayer_GetPerFriendPreferences_Response struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Preferences   []*PerFriendPreferences `protobuf:"bytes,1,rep,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetPerFriendPreferences_Response) Reset() {
	*x = CPlayer_GetPerFriendPreferences_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPerFriendPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPerFriendPreferences_Response) ProtoMessage() {}

func (x *CPlayer_GetPerFriendPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPerFriendPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPerFriendPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{54}
}

func (x *CPlayer_GetPerFriendPreferences_Response) GetPreferences() []*PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetPerFriendPreferences_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Preferences   *PerFriendPreferences  `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetPerFriendPreferences_Request) Reset() {
	*x = CPlayer_SetPerFriendPreferences_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetPerFriendPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetPerFriendPreferences_Request) ProtoMessage() {}

func (x *CPlayer_SetPerFriendPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetPerFriendPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetPerFriendPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{55}
}

func (x *CPlayer_SetPerFriendPreferences_Request) GetPreferences() *PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetPerFriendPreferences_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetPerFriendPreferences_Response) Reset() {
	*x = CPlayer_SetPerFriendPreferences_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetPerFriendPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetPerFriendPreferences_Response) ProtoMessage() {}

func (x *CPlayer_SetPerFriendPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetPerFriendPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetPerFriendPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{56}
}

type CPlayer_AddFriend_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_AddFriend_Request) Reset() {
	*x = CPlayer_AddFriend_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_AddFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AddFriend_Request) ProtoMessage() {}

func (x *CPlayer_AddFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AddFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_AddFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{57}
}

func (x *CPlayer_AddFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPlayer_AddFriend_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InviteSent         *bool                  `protobuf:"varint,1,opt,name=invite_sent,json=inviteSent" json:"invite_sent,omitempty"`
	FriendRelationship *uint32                `protobuf:"varint,2,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
	Result             *int32                 `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CPlayer_AddFriend_Response) Reset() {
	*x = CPlayer_AddFriend_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_AddFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AddFriend_Response) ProtoMessage() {}

func (x *CPlayer_AddFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AddFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_AddFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{58}
}

func (x *CPlayer_AddFriend_Response) GetInviteSent() bool {
	if x != nil && x.InviteSent != nil {
		return *x.InviteSent
	}
	return false
}

func (x *CPlayer_AddFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

func (x *CPlayer_AddFriend_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CPlayer_RemoveFriend_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_RemoveFriend_Request) Reset() {
	*x = CPlayer_RemoveFriend_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_RemoveFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_RemoveFriend_Request) ProtoMessage() {}

func (x *CPlayer_RemoveFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_RemoveFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_RemoveFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{59}
}

func (x *CPlayer_RemoveFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPlayer_RemoveFriend_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	FriendRelationship *uint32                `protobuf:"varint,1,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CPlayer_RemoveFriend_Response) Reset() {
	*x = CPlayer_RemoveFriend_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_RemoveFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_RemoveFriend_Response) ProtoMessage() {}

func (x *CPlayer_RemoveFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_RemoveFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_RemoveFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{60}
}

func (x *CPlayer_RemoveFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_IgnoreFriend_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Unignore      *bool                  `protobuf:"varint,2,opt,name=unignore" json:"unignore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_IgnoreFriend_Request) Reset() {
	*x = CPlayer_IgnoreFriend_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_IgnoreFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IgnoreFriend_Request) ProtoMessage() {}

func (x *CPlayer_IgnoreFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IgnoreFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_IgnoreFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{61}
}

func (x *CPlayer_IgnoreFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_IgnoreFriend_Request) GetUnignore() bool {
	if x != nil && x.Unignore != nil {
		return *x.Unignore
	}
	return false
}

type CPlayer_IgnoreFriend_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	FriendRelationship *uint32                `protobuf:"varint,1,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CPlayer_IgnoreFriend_Response) Reset() {
	*x = CPlayer_IgnoreFriend_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_IgnoreFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IgnoreFriend_Response) ProtoMessage() {}

func (x *CPlayer_IgnoreFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IgnoreFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_IgnoreFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{62}
}

func (x *CPlayer_IgnoreFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_GetCommunityPreferences_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetCommunityPreferences_Request) Reset() {
	*x = CPlayer_GetCommunityPreferences_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetCommunityPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetCommunityPreferences_Request) ProtoMessage() {}

func (x *CPlayer_GetCommunityPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetCommunityPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetCommunityPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{63}
}

type CPlayer_CommunityPreferences struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	HideAdultContentViolence *bool                  `protobuf:"varint,1,opt,name=hide_adult_content_violence,json=hideAdultContentViolence,def=1" json:"hide_adult_content_violence,omitempty"`
	HideAdultContentSex      *bool                  `protobuf:"varint,2,opt,name=hide_adult_content_sex,json=hideAdultContentSex,def=1" json:"hide_adult_content_sex,omitempty"`
	ParenthesizeNicknames    *bool                  `protobuf:"varint,4,opt,name=parenthesize_nicknames,json=parenthesizeNicknames,def=0" json:"parenthesize_nicknames,omitempty"`
	TimestampUpdated         *uint32                `protobuf:"varint,3,opt,name=timestamp_updated,json=timestampUpdated" json:"timestamp_updated,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for CPlayer_CommunityPreferences fields.
const (
	Default_CPlayer_CommunityPreferences_HideAdultContentViolence = bool(true)
	Default_CPlayer_CommunityPreferences_HideAdultContentSex      = bool(true)
	Default_CPlayer_CommunityPreferences_ParenthesizeNicknames    = bool(false)
)

func (x *CPlayer_CommunityPreferences) Reset() {
	*x = CPlayer_CommunityPreferences{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_CommunityPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_CommunityPreferences) ProtoMessage() {}

func (x *CPlayer_CommunityPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_CommunityPreferences.ProtoReflect.Descriptor instead.
func (*CPlayer_CommunityPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{64}
}

func (x *CPlayer_CommunityPreferences) GetHideAdultContentViolence() bool {
	if x != nil && x.HideAdultContentViolence != nil {
		return *x.HideAdultContentViolence
	}
	return Default_CPlayer_CommunityPreferences_HideAdultContentViolence
}

func (x *CPlayer_CommunityPreferences) GetHideAdultContentSex() bool {
	if x != nil && x.HideAdultContentSex != nil {
		return *x.HideAdultContentSex
	}
	return Default_CPlayer_CommunityPreferences_HideAdultContentSex
}

func (x *CPlayer_CommunityPreferences) GetParenthesizeNicknames() bool {
	if x != nil && x.ParenthesizeNicknames != nil {
		return *x.ParenthesizeNicknames
	}
	return Default_CPlayer_CommunityPreferences_ParenthesizeNicknames
}

func (x *CPlayer_CommunityPreferences) GetTimestampUpdated() uint32 {
	if x != nil && x.TimestampUpdated != nil {
		return *x.TimestampUpdated
	}
	return 0
}

type CPlayer_GetCommunityPreferences_Response struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Preferences   *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetCommunityPreferences_Response) Reset() {
	*x = CPlayer_GetCommunityPreferences_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetCommunityPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetCommunityPreferences_Response) ProtoMessage() {}

func (x *CPlayer_GetCommunityPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetCommunityPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetCommunityPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{65}
}

func (x *CPlayer_GetCommunityPreferences_Response) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetCommunityPreferences_Request struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Preferences   *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetCommunityPreferences_Request) Reset() {
	*x = CPlayer_SetCommunityPreferences_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetCommunityPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetCommunityPreferences_Request) ProtoMessage() {}

func (x *CPlayer_SetCommunityPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetCommunityPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetCommunityPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{66}
}

func (x *CPlayer_SetCommunityPreferences_Request) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetCommunityPreferences_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetCommunityPreferences_Response) Reset() {
	*x = CPlayer_SetCommunityPreferences_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetCommunityPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetCommunityPreferences_Response) ProtoMessage() {}

func (x *CPlayer_SetCommunityPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetCommunityPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetCommunityPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{67}
}

type CPlayer_GetNewSteamAnnouncementState_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *int32                 `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) Reset() {
	*x = CPlayer_GetNewSteamAnnouncementState_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNewSteamAnnouncementState_Request) ProtoMessage() {}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNewSteamAnnouncementState_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNewSteamAnnouncementState_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{68}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPlayer_GetNewSteamAnnouncementState_Response struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	State                *int32                 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	AnnouncementHeadline *string                `protobuf:"bytes,2,opt,name=announcement_headline,json=announcementHeadline" json:"announcement_headline,omitempty"`
	AnnouncementUrl      *string                `protobuf:"bytes,3,opt,name=announcement_url,json=announcementUrl" json:"announcement_url,omitempty"`
	TimePosted           *uint32                `protobuf:"varint,4,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
	AnnouncementGid      *uint64                `protobuf:"varint,5,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) Reset() {
	*x = CPlayer_GetNewSteamAnnouncementState_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNewSteamAnnouncementState_Response) ProtoMessage() {}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNewSteamAnnouncementState_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNewSteamAnnouncementState_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{69}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementHeadline() string {
	if x != nil && x.AnnouncementHeadline != nil {
		return *x.AnnouncementHeadline
	}
	return ""
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementUrl() string {
	if x != nil && x.AnnouncementUrl != nil {
		return *x.AnnouncementUrl
	}
	return ""
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

type CPlayer_UpdateSteamAnnouncementLastRead_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AnnouncementGid *uint64                `protobuf:"varint,1,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	TimePosted      *uint32                `protobuf:"varint,2,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) Reset() {
	*x = CPlayer_UpdateSteamAnnouncementLastRead_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_UpdateSteamAnnouncementLastRead_Request) ProtoMessage() {}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_UpdateSteamAnnouncementLastRead_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_UpdateSteamAnnouncementLastRead_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{70}
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

type CPlayer_UpdateSteamAnnouncementLastRead_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) Reset() {
	*x = CPlayer_UpdateSteamAnnouncementLastRead_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_UpdateSteamAnnouncementLastRead_Response) ProtoMessage() {}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_UpdateSteamAnnouncementLastRead_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_UpdateSteamAnnouncementLastRead_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{71}
}

type CPlayer_GetPrivacySettings_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetPrivacySettings_Request) Reset() {
	*x = CPlayer_GetPrivacySettings_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPrivacySettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPrivacySettings_Request) ProtoMessage() {}

func (x *CPlayer_GetPrivacySettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPrivacySettings_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPrivacySettings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{72}
}

type CPrivacySettings struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	PrivacyState            *int32                 `protobuf:"varint,1,opt,name=privacy_state,json=privacyState" json:"privacy_state,omitempty"`
	PrivacyStateInventory   *int32                 `protobuf:"varint,2,opt,name=privacy_state_inventory,json=privacyStateInventory" json:"privacy_state_inventory,omitempty"`
	PrivacyStateGifts       *int32                 `protobuf:"varint,3,opt,name=privacy_state_gifts,json=privacyStateGifts" json:"privacy_state_gifts,omitempty"`
	PrivacyStateOwnedgames  *int32                 `protobuf:"varint,4,opt,name=privacy_state_ownedgames,json=privacyStateOwnedgames" json:"privacy_state_ownedgames,omitempty"`
	PrivacyStatePlaytime    *int32                 `protobuf:"varint,5,opt,name=privacy_state_playtime,json=privacyStatePlaytime" json:"privacy_state_playtime,omitempty"`
	PrivacyStateFriendslist *int32                 `protobuf:"varint,6,opt,name=privacy_state_friendslist,json=privacyStateFriendslist" json:"privacy_state_friendslist,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CPrivacySettings) Reset() {
	*x = CPrivacySettings{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPrivacySettings) ProtoMessage() {}

func (x *CPrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPrivacySettings.ProtoReflect.Descriptor instead.
func (*CPrivacySettings) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{73}
}

func (x *CPrivacySettings) GetPrivacyState() int32 {
	if x != nil && x.PrivacyState != nil {
		return *x.PrivacyState
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStateInventory() int32 {
	if x != nil && x.PrivacyStateInventory != nil {
		return *x.PrivacyStateInventory
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStateGifts() int32 {
	if x != nil && x.PrivacyStateGifts != nil {
		return *x.PrivacyStateGifts
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStateOwnedgames() int32 {
	if x != nil && x.PrivacyStateOwnedgames != nil {
		return *x.PrivacyStateOwnedgames
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStatePlaytime() int32 {
	if x != nil && x.PrivacyStatePlaytime != nil {
		return *x.PrivacyStatePlaytime
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStateFriendslist() int32 {
	if x != nil && x.PrivacyStateFriendslist != nil {
		return *x.PrivacyStateFriendslist
	}
	return 0
}

type CPlayer_GetPrivacySettings_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PrivacySettings *CPrivacySettings      `protobuf:"bytes,1,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_GetPrivacySettings_Response) Reset() {
	*x = CPlayer_GetPrivacySettings_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPrivacySettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPrivacySettings_Response) ProtoMessage() {}

func (x *CPlayer_GetPrivacySettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPrivacySettings_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPrivacySettings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{74}
}

func (x *CPlayer_GetPrivacySettings_Response) GetPrivacySettings() *CPrivacySettings {
	if x != nil {
		return x.PrivacySettings
	}
	return nil
}

type CPlayer_GetDurationControl_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetDurationControl_Request) Reset() {
	*x = CPlayer_GetDurationControl_Request{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetDurationControl_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetDurationControl_Request) ProtoMessage() {}

func (x *CPlayer_GetDurationControl_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetDurationControl_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetDurationControl_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{75}
}

func (x *CPlayer_GetDurationControl_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetDurationControl_Response struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IsEnabled           *bool                  `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	Seconds             *int32                 `protobuf:"varint,2,opt,name=seconds" json:"seconds,omitempty"`
	SecondsToday        *int32                 `protobuf:"varint,3,opt,name=seconds_today,json=secondsToday" json:"seconds_today,omitempty"`
	IsSteamchinaAccount *bool                  `protobuf:"varint,4,opt,name=is_steamchina_account,json=isSteamchinaAccount" json:"is_steamchina_account,omitempty"`
	IsAgeVerified       *bool                  `protobuf:"varint,5,opt,name=is_age_verified,json=isAgeVerified" json:"is_age_verified,omitempty"`
	SecondsAllowedToday *uint32                `protobuf:"varint,6,opt,name=seconds_allowed_today,json=secondsAllowedToday" json:"seconds_allowed_today,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CPlayer_GetDurationControl_Response) Reset() {
	*x = CPlayer_GetDurationControl_Response{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetDurationControl_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetDurationControl_Response) ProtoMessage() {}

func (x *CPlayer_GetDurationControl_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetDurationControl_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetDurationControl_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{76}
}

func (x *CPlayer_GetDurationControl_Response) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *CPlayer_GetDurationControl_Response) GetSeconds() int32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CPlayer_GetDurationControl_Response) GetSecondsToday() int32 {
	if x != nil && x.SecondsToday != nil {
		return *x.SecondsToday
	}
	return 0
}

func (x *CPlayer_GetDurationControl_Response) GetIsSteamchinaAccount() bool {
	if x != nil && x.IsSteamchinaAccount != nil {
		return *x.IsSteamchinaAccount
	}
	return false
}

func (x *CPlayer_GetDurationControl_Response) GetIsAgeVerified() bool {
	if x != nil && x.IsAgeVerified != nil {
		return *x.IsAgeVerified
	}
	return false
}

func (x *CPlayer_GetDurationControl_Response) GetSecondsAllowedToday() uint32 {
	if x != nil && x.SecondsAllowedToday != nil {
		return *x.SecondsAllowedToday
	}
	return 0
}

type CPlayer_LastPlayedTimes_Notification struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Games         []*CPlayer_GetLastPlayedTimes_Response_Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_LastPlayedTimes_Notification) Reset() {
	*x = CPlayer_LastPlayedTimes_Notification{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_LastPlayedTimes_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_LastPlayedTimes_Notification) ProtoMessage() {}

func (x *CPlayer_LastPlayedTimes_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_LastPlayedTimes_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_LastPlayedTimes_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{77}
}

func (x *CPlayer_LastPlayedTimes_Notification) GetGames() []*CPlayer_GetLastPlayedTimes_Response_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type CPlayer_FriendNicknameChanged_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname      *string                `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	IsEchoToSelf  *bool                  `protobuf:"varint,3,opt,name=is_echo_to_self,json=isEchoToSelf" json:"is_echo_to_self,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_FriendNicknameChanged_Notification) Reset() {
	*x = CPlayer_FriendNicknameChanged_Notification{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_FriendNicknameChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_FriendNicknameChanged_Notification) ProtoMessage() {}

func (x *CPlayer_FriendNicknameChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_FriendNicknameChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_FriendNicknameChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{78}
}

func (x *CPlayer_FriendNicknameChanged_Notification) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_FriendNicknameChanged_Notification) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *CPlayer_FriendNicknameChanged_Notification) GetIsEchoToSelf() bool {
	if x != nil && x.IsEchoToSelf != nil {
		return *x.IsEchoToSelf
	}
	return false
}

type CPlayer_FriendEquippedProfileItemsChanged_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_FriendEquippedProfileItemsChanged_Notification) Reset() {
	*x = CPlayer_FriendEquippedProfileItemsChanged_Notification{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_FriendEquippedProfileItemsChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_FriendEquippedProfileItemsChanged_Notification) ProtoMessage() {}

func (x *CPlayer_FriendEquippedProfileItemsChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_FriendEquippedProfileItemsChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_FriendEquippedProfileItemsChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{79}
}

func (x *CPlayer_FriendEquippedProfileItemsChanged_Notification) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CPlayer_NewSteamAnnouncementState_Notification struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	State                *int32                 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	AnnouncementHeadline *string                `protobuf:"bytes,2,opt,name=announcement_headline,json=announcementHeadline" json:"announcement_headline,omitempty"`
	AnnouncementUrl      *string                `protobuf:"bytes,3,opt,name=announcement_url,json=announcementUrl" json:"announcement_url,omitempty"`
	TimePosted           *uint32                `protobuf:"varint,4,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
	AnnouncementGid      *uint64                `protobuf:"varint,5,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) Reset() {
	*x = CPlayer_NewSteamAnnouncementState_Notification{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_NewSteamAnnouncementState_Notification) ProtoMessage() {}

func (x *CPlayer_NewSteamAnnouncementState_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_NewSteamAnnouncementState_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_NewSteamAnnouncementState_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{80}
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetAnnouncementHeadline() string {
	if x != nil && x.AnnouncementHeadline != nil {
		return *x.AnnouncementHeadline
	}
	return ""
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetAnnouncementUrl() string {
	if x != nil && x.AnnouncementUrl != nil {
		return *x.AnnouncementUrl
	}
	return ""
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

type CPlayer_CommunityPreferencesChanged_Notification struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Preferences   *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_CommunityPreferencesChanged_Notification) Reset() {
	*x = CPlayer_CommunityPreferencesChanged_Notification{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_CommunityPreferencesChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_CommunityPreferencesChanged_Notification) ProtoMessage() {}

func (x *CPlayer_CommunityPreferencesChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_CommunityPreferencesChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_CommunityPreferencesChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{81}
}

func (x *CPlayer_CommunityPreferencesChanged_Notification) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_PerFriendPreferencesChanged_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Preferences   *PerFriendPreferences  `protobuf:"bytes,2,opt,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) Reset() {
	*x = CPlayer_PerFriendPreferencesChanged_Notification{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_PerFriendPreferencesChanged_Notification) ProtoMessage() {}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_PerFriendPreferencesChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_PerFriendPreferencesChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{82}
}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) GetPreferences() *PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_PrivacySettingsChanged_Notification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PrivacySettings *CPrivacySettings      `protobuf:"bytes,1,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_PrivacySettingsChanged_Notification) Reset() {
	*x = CPlayer_PrivacySettingsChanged_Notification{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_PrivacySettingsChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_PrivacySettingsChanged_Notification) ProtoMessage() {}

func (x *CPlayer_PrivacySettingsChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_PrivacySettingsChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_PrivacySettingsChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{83}
}

func (x *CPlayer_PrivacySettingsChanged_Notification) GetPrivacySettings() *CPrivacySettings {
	if x != nil {
		return x.PrivacySettings
	}
	return nil
}

type CPlayer_GetOwnedGames_Response_Game struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Appid                    *int32                 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name                     *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Playtime_2Weeks          *int32                 `protobuf:"varint,3,opt,name=playtime_2weeks,json=playtime2weeks" json:"playtime_2weeks,omitempty"`
	PlaytimeForever          *int32                 `protobuf:"varint,4,opt,name=playtime_forever,json=playtimeForever" json:"playtime_forever,omitempty"`
	ImgIconUrl               *string                `protobuf:"bytes,5,opt,name=img_icon_url,json=imgIconUrl" json:"img_icon_url,omitempty"`
	ImgLogoUrl               *string                `protobuf:"bytes,6,opt,name=img_logo_url,json=imgLogoUrl" json:"img_logo_url,omitempty"`
	HasCommunityVisibleStats *bool                  `protobuf:"varint,7,opt,name=has_community_visible_stats,json=hasCommunityVisibleStats" json:"has_community_visible_stats,omitempty"`
	PlaytimeWindowsForever   *int32                 `protobuf:"varint,8,opt,name=playtime_windows_forever,json=playtimeWindowsForever" json:"playtime_windows_forever,omitempty"`
	PlaytimeMacForever       *int32                 `protobuf:"varint,9,opt,name=playtime_mac_forever,json=playtimeMacForever" json:"playtime_mac_forever,omitempty"`
	PlaytimeLinuxForever     *int32                 `protobuf:"varint,10,opt,name=playtime_linux_forever,json=playtimeLinuxForever" json:"playtime_linux_forever,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CPlayer_GetOwnedGames_Response_Game) Reset() {
	*x = CPlayer_GetOwnedGames_Response_Game{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetOwnedGames_Response_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetOwnedGames_Response_Game) ProtoMessage() {}

func (x *CPlayer_GetOwnedGames_Response_Game) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetOwnedGames_Response_Game.ProtoReflect.Descriptor instead.
func (*CPlayer_GetOwnedGames_Response_Game) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytime_2Weeks() int32 {
	if x != nil && x.Playtime_2Weeks != nil {
		return *x.Playtime_2Weeks
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytimeForever() int32 {
	if x != nil && x.PlaytimeForever != nil {
		return *x.PlaytimeForever
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetImgIconUrl() string {
	if x != nil && x.ImgIconUrl != nil {
		return *x.ImgIconUrl
	}
	return ""
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetImgLogoUrl() string {
	if x != nil && x.ImgLogoUrl != nil {
		return *x.ImgLogoUrl
	}
	return ""
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetHasCommunityVisibleStats() bool {
	if x != nil && x.HasCommunityVisibleStats != nil {
		return *x.HasCommunityVisibleStats
	}
	return false
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytimeWindowsForever() int32 {
	if x != nil && x.PlaytimeWindowsForever != nil {
		return *x.PlaytimeWindowsForever
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytimeMacForever() int32 {
	if x != nil && x.PlaytimeMacForever != nil {
		return *x.PlaytimeMacForever
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytimeLinuxForever() int32 {
	if x != nil && x.PlaytimeLinuxForever != nil {
		return *x.PlaytimeLinuxForever
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Steamid              *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayed        *uint32                `protobuf:"varint,2,opt,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
	MinutesPlayedForever *uint32                `protobuf:"varint,3,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetMinutesPlayed() uint32 {
	if x != nil && x.MinutesPlayed != nil {
		return *x.MinutesPlayed
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Steamid              *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayed        *uint32                `protobuf:"varint,2,opt,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
	MinutesPlayedForever *uint32                `protobuf:"varint,3,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
	InWishlist           *bool                  `protobuf:"varint,4,opt,name=in_wishlist,json=inWishlist" json:"in_wishlist,omitempty"`
	Owned                *bool                  `protobuf:"varint,5,opt,name=owned" json:"owned,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{8, 1}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetMinutesPlayed() uint32 {
	if x != nil && x.MinutesPlayed != nil {
		return *x.MinutesPlayed
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetInWishlist() bool {
	if x != nil && x.InWishlist != nil {
		return *x.InWishlist
	}
	return false
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

type CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Steamid               *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayedThisWeek *uint32                `protobuf:"varint,2,opt,name=minutes_played_this_week,json=minutesPlayedThisWeek" json:"minutes_played_this_week,omitempty"`
	MinutesPlayedTwoWeeks *uint32                `protobuf:"varint,3,opt,name=minutes_played_two_weeks,json=minutesPlayedTwoWeeks" json:"minutes_played_two_weeks,omitempty"`
	MinutesPlayedForever  *uint32                `protobuf:"varint,4,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
	EventCount            *uint32                `protobuf:"varint,5,opt,name=event_count,json=eventCount" json:"event_count,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) Reset() {
	*x = CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) ProtoMessage() {}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetMinutesPlayedThisWeek() uint32 {
	if x != nil && x.MinutesPlayedThisWeek != nil {
		return *x.MinutesPlayedThisWeek
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetMinutesPlayedTwoWeeks() uint32 {
	if x != nil && x.MinutesPlayedTwoWeeks != nil {
		return *x.MinutesPlayedTwoWeeks
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetEventCount() uint32 {
	if x != nil && x.EventCount != nil {
		return *x.EventCount
	}
	return 0
}

type CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo struct {
	state         protoimpl.MessageState                                    `protogen:"open.v1"`
	Appid         *uint32                                                   `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Friends       []*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime `protobuf:"bytes,2,rep,name=friends" json:"friends,omitempty"`
	DisplayOrder  *uint32                                                   `protobuf:"varint,3,opt,name=display_order,json=displayOrder" json:"display_order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) Reset() {
	*x = CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) GetFriends() []*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) GetDisplayOrder() uint32 {
	if x != nil && x.DisplayOrder != nil {
		return *x.DisplayOrder
	}
	return 0
}

type CPlayer_GetGameBadgeLevels_Response_Badge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         *int32                 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Series        *int32                 `protobuf:"varint,2,opt,name=series" json:"series,omitempty"`
	BorderColor   *uint32                `protobuf:"varint,3,opt,name=border_color,json=borderColor" json:"border_color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Response_Badge{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Response_Badge) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Response_Badge.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Response_Badge) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetSeries() int32 {
	if x != nil && x.Series != nil {
		return *x.Series
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetBorderColor() uint32 {
	if x != nil && x.BorderColor != nil {
		return *x.BorderColor
	}
	return 0
}

type CPlayer_GetEmoticonList_Response_Emoticon struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count         *int32                 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	TimeLastUsed  *uint32                `protobuf:"varint,3,opt,name=time_last_used,json=timeLastUsed" json:"time_last_used,omitempty"`
	UseCount      *uint32                `protobuf:"varint,4,opt,name=use_count,json=useCount" json:"use_count,omitempty"`
	TimeReceived  *uint32                `protobuf:"varint,5,opt,name=time_received,json=timeReceived" json:"time_received,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) Reset() {
	*x = CPlayer_GetEmoticonList_Response_Emoticon{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetEmoticonList_Response_Emoticon) ProtoMessage() {}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetEmoticonList_Response_Emoticon.ProtoReflect.Descriptor instead.
func (*CPlayer_GetEmoticonList_Response_Emoticon) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{37, 0}
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetTimeLastUsed() uint32 {
	if x != nil && x.TimeLastUsed != nil {
		return *x.TimeLastUsed
	}
	return 0
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetUseCount() uint32 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetTimeReceived() uint32 {
	if x != nil && x.TimeReceived != nil {
		return *x.TimeReceived
	}
	return 0
}

type CPlayer_GetAchievementsProgress_Response_AchievementProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Unlocked      *uint32                `protobuf:"varint,2,opt,name=unlocked" json:"unlocked,omitempty"`
	Total         *uint32                `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	Percentage    *float32               `protobuf:"fixed32,4,opt,name=percentage" json:"percentage,omitempty"`
	AllUnlocked   *bool                  `protobuf:"varint,5,opt,name=all_unlocked,json=allUnlocked" json:"all_unlocked,omitempty"`
	CacheTime     *uint32                `protobuf:"varint,6,opt,name=cache_time,json=cacheTime" json:"cache_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) Reset() {
	*x = CPlayer_GetAchievementsProgress_Response_AchievementProgress{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAchievementsProgress_Response_AchievementProgress) ProtoMessage() {}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAchievementsProgress_Response_AchievementProgress.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAchievementsProgress_Response_AchievementProgress) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{39, 0}
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetUnlocked() uint32 {
	if x != nil && x.Unlocked != nil {
		return *x.Unlocked
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetPercentage() float32 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetAllUnlocked() bool {
	if x != nil && x.AllUnlocked != nil {
		return *x.AllUnlocked
	}
	return false
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetCacheTime() uint32 {
	if x != nil && x.CacheTime != nil {
		return *x.CacheTime
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Response_Game struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Appid                  *int32                 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LastPlaytime           *uint32                `protobuf:"varint,2,opt,name=last_playtime,json=lastPlaytime" json:"last_playtime,omitempty"`
	Playtime_2Weeks        *int32                 `protobuf:"varint,3,opt,name=playtime_2weeks,json=playtime2weeks" json:"playtime_2weeks,omitempty"`
	PlaytimeForever        *int32                 `protobuf:"varint,4,opt,name=playtime_forever,json=playtimeForever" json:"playtime_forever,omitempty"`
	FirstPlaytime          *uint32                `protobuf:"varint,5,opt,name=first_playtime,json=firstPlaytime" json:"first_playtime,omitempty"`
	PlaytimeWindowsForever *int32                 `protobuf:"varint,6,opt,name=playtime_windows_forever,json=playtimeWindowsForever" json:"playtime_windows_forever,omitempty"`
	PlaytimeMacForever     *int32                 `protobuf:"varint,7,opt,name=playtime_mac_forever,json=playtimeMacForever" json:"playtime_mac_forever,omitempty"`
	PlaytimeLinuxForever   *int32                 `protobuf:"varint,8,opt,name=playtime_linux_forever,json=playtimeLinuxForever" json:"playtime_linux_forever,omitempty"`
	FirstWindowsPlaytime   *uint32                `protobuf:"varint,9,opt,name=first_windows_playtime,json=firstWindowsPlaytime" json:"first_windows_playtime,omitempty"`
	FirstMacPlaytime       *uint32                `protobuf:"varint,10,opt,name=first_mac_playtime,json=firstMacPlaytime" json:"first_mac_playtime,omitempty"`
	FirstLinuxPlaytime     *uint32                `protobuf:"varint,11,opt,name=first_linux_playtime,json=firstLinuxPlaytime" json:"first_linux_playtime,omitempty"`
	LastWindowsPlaytime    *uint32                `protobuf:"varint,12,opt,name=last_windows_playtime,json=lastWindowsPlaytime" json:"last_windows_playtime,omitempty"`
	LastMacPlaytime        *uint32                `protobuf:"varint,13,opt,name=last_mac_playtime,json=lastMacPlaytime" json:"last_mac_playtime,omitempty"`
	LastLinuxPlaytime      *uint32                `protobuf:"varint,14,opt,name=last_linux_playtime,json=lastLinuxPlaytime" json:"last_linux_playtime,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Response_Game{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Response_Game) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Response_Game.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Response_Game) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{47, 0}
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastPlaytime() uint32 {
	if x != nil && x.LastPlaytime != nil {
		return *x.LastPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytime_2Weeks() int32 {
	if x != nil && x.Playtime_2Weeks != nil {
		return *x.Playtime_2Weeks
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeForever() int32 {
	if x != nil && x.PlaytimeForever != nil {
		return *x.PlaytimeForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstPlaytime() uint32 {
	if x != nil && x.FirstPlaytime != nil {
		return *x.FirstPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeWindowsForever() int32 {
	if x != nil && x.PlaytimeWindowsForever != nil {
		return *x.PlaytimeWindowsForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeMacForever() int32 {
	if x != nil && x.PlaytimeMacForever != nil {
		return *x.PlaytimeMacForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeLinuxForever() int32 {
	if x != nil && x.PlaytimeLinuxForever != nil {
		return *x.PlaytimeLinuxForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstWindowsPlaytime() uint32 {
	if x != nil && x.FirstWindowsPlaytime != nil {
		return *x.FirstWindowsPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstMacPlaytime() uint32 {
	if x != nil && x.FirstMacPlaytime != nil {
		return *x.FirstMacPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstLinuxPlaytime() uint32 {
	if x != nil && x.FirstLinuxPlaytime != nil {
		return *x.FirstLinuxPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastWindowsPlaytime() uint32 {
	if x != nil && x.LastWindowsPlaytime != nil {
		return *x.LastWindowsPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastMacPlaytime() uint32 {
	if x != nil && x.LastMacPlaytime != nil {
		return *x.LastMacPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastLinuxPlaytime() uint32 {
	if x != nil && x.LastLinuxPlaytime != nil {
		return *x.LastLinuxPlaytime
	}
	return 0
}

type CPlayer_GetNicknameList_Response_PlayerNickname struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname      *string                `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) Reset() {
	*x = CPlayer_GetNicknameList_Response_PlayerNickname{}
	mi := &file_steammessages_player_steamclient_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Response_PlayerNickname) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Response_PlayerNickname.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Response_PlayerNickname) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{51, 0}
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

var File_steammessages_player_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_player_steamclient_proto_rawDesc = "" +
	"\n" +
	"&steammessages_player.steamclient.proto\x1a,steammessages_unified_base.steamclient.proto\"4\n" +
	"2CPlayer_GetMutualFriendsForIncomingInvites_Request\"}\n" +
	"&CPlayer_IncomingInviteMutualFriendList\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x129\n" +
	"\x19mutual_friend_account_ids\x18\x02 \x03(\rR\x16mutualFriendAccountIds\"\xae\x01\n" +
	"3CPlayer_GetMutualFriendsForIncomingInvites_Response\x12w\n" +
	"$incoming_invite_mutual_friends_lists\x18\x01 \x03(\v2'.CPlayer_IncomingInviteMutualFriendListR incomingInviteMutualFriendsLists\"\xbc\x04\n" +
	"\x1dCPlayer_GetOwnedGames_Request\x12;\n" +
	"\asteamid\x18\x01 \x01(\x04B!\x82\xb5\x18\x1dThe player we're asking aboutR\asteamid\x12l\n" +
	"\x0finclude_appinfo\x18\x02 \x01(\bBC\x82\xb5\x18?true if we want additional details (name, icon) about each gameR\x0eincludeAppinfo\x12\xa4\x01\n" +
	"\x19include_played_free_games\x18\x03 \x01(\bBi\x82\xb5\x18eFree games are excluded by default.  If this is set, free games the user has played will be returned.R\x16includePlayedFreeGames\x12[\n" +
	"\rappids_filter\x18\x04 \x03(\rB6\x82\xb5\x182if set, restricts result set to the passed in appsR\fappidsFilter\x12l\n" +
	"\x10include_free_sub\x18\x05 \x01(\bBB\x82\xb5\x18>Some games are in the free sub, which are excluded by default.R\x0eincludeFreeSub\"\xa7\x04\n" +
	"\x1eCPlayer_GetOwnedGames_Response\x12\x1d\n" +
	"\n" +
	"game_count\x18\x01 \x01(\rR\tgameCount\x12:\n" +
	"\x05games\x18\x02 \x03(\v2$.CPlayer_GetOwnedGames_Response.GameR\x05games\x1a\xa9\x03\n" +
	"\x04Game\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\x05R\x05appid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12'\n" +
	"\x0fplaytime_2weeks\x18\x03 \x01(\x05R\x0eplaytime2weeks\x12)\n" +
	"\x10playtime_forever\x18\x04 \x01(\x05R\x0fplaytimeForever\x12 \n" +
	"\fimg_icon_url\x18\x05 \x01(\tR\n" +
	"imgIconUrl\x12 \n" +
	"\fimg_logo_url\x18\x06 \x01(\tR\n" +
	"imgLogoUrl\x12=\n" +
	"\x1bhas_community_visible_stats\x18\a \x01(\bR\x18hasCommunityVisibleStats\x128\n" +
	"\x18playtime_windows_forever\x18\b \x01(\x05R\x16playtimeWindowsForever\x120\n" +
	"\x14playtime_mac_forever\x18\t \x01(\x05R\x12playtimeMacForever\x124\n" +
	"\x16playtime_linux_forever\x18\n" +
	" \x01(\x05R\x14playtimeLinuxForever\"j\n" +
	"\x1bCPlayer_GetPlayNext_Request\x12&\n" +
	"\x0fmax_age_seconds\x18\x01 \x01(\rR\rmaxAgeSeconds\x12#\n" +
	"\rignore_appids\x18\x02 \x03(\rR\fignoreAppids\"`\n" +
	"\x1cCPlayer_GetPlayNext_Response\x12(\n" +
	"\x10last_update_time\x18\x01 \x01(\rR\x0elastUpdateTime\x12\x16\n" +
	"\x06appids\x18\x02 \x03(\rR\x06appids\">\n" +
	"&CPlayer_GetFriendsGameplayInfo_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"\x9f\a\n" +
	"'CPlayer_GetFriendsGameplayInfo_Response\x12U\n" +
	"\tyour_info\x18\x01 \x01(\v28.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfoR\byourInfo\x12U\n" +
	"\ain_game\x18\x02 \x03(\v2<.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\x06inGame\x12e\n" +
	"\x0fplayed_recently\x18\x03 \x03(\v2<.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\x0eplayedRecently\x12]\n" +
	"\vplayed_ever\x18\x04 \x03(\v2<.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\n" +
	"playedEver\x12P\n" +
	"\x04owns\x18\x05 \x03(\v2<.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\x04owns\x12]\n" +
	"\vin_wishlist\x18\x06 \x03(\v2<.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\n" +
	"inWishlist\x1a\x8c\x01\n" +
	"\x13FriendsGameplayInfo\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12%\n" +
	"\x0eminutes_played\x18\x02 \x01(\rR\rminutesPlayed\x124\n" +
	"\x16minutes_played_forever\x18\x03 \x01(\rR\x14minutesPlayedForever\x1a\xbf\x01\n" +
	"\x0fOwnGameplayInfo\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12%\n" +
	"\x0eminutes_played\x18\x02 \x01(\rR\rminutesPlayed\x124\n" +
	"\x16minutes_played_forever\x18\x03 \x01(\rR\x14minutesPlayedForever\x12\x1f\n" +
	"\vin_wishlist\x18\x04 \x01(\bR\n" +
	"inWishlist\x12\x14\n" +
	"\x05owned\x18\x05 \x01(\bR\x05owned\"\xa3\x02\n" +
	"&CPlayer_GetFriendsAppsActivity_Request\x12\x8f\x01\n" +
	"\rnews_language\x18\x01 \x01(\tBj\x82\xb5\x18fLanguage for which to query about news items (for the being_discussed results). DEPRECATED AND UNUSED.R\fnewsLanguage\x12g\n" +
	"\rrequest_flags\x18\x02 \x01(\rBB\x82\xb5\x18>Flags describing the request; see EGetFriendsAppsActivityFlagsR\frequestFlags\"\x96\x15\n" +
	"'CPlayer_GetFriendsAppsActivity_Response\x12\xc2\x01\n" +
	"\btrending\x18\x01 \x03(\v27.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfoBm\x82\xb5\x18iApps that friends have played more this week than last, with list of friends who've played more this weekR\btrending\x12\xc5\x01\n" +
	"\x10recent_purchases\x18\x02 \x03(\v27.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfoBa\x82\xb5\x18]Apps friends have played in the past two weeks for which the user recently acquired a licenseR\x0frecentPurchases\x12\xa7\x01\n" +
	"\aunowned\x18\x03 \x03(\v27.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfoBT\x82\xb5\x18PApps friends have played in the past two weeks for which the user has no licenseR\aunowned\x12\xb8\x01\n" +
	"\apopular\x18\x04 \x03(\v27.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfoBe\x82\xb5\x18aApps friends have played in the past two weeks, for which the user has a license, sorted by countR\apopular\x12\xd2\x01\n" +
	"\vdont_forget\x18\x05 \x03(\v27.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfoBx\x82\xb5\x18tApps friends have played in the past two weeks which the user has neither purchased nor played in the past two weeksR\n" +
	"dontForget\x12\xd1\x01\n" +
	"\x0fbeing_discussed\x18\x06 \x03(\v27.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfoBo\x82\xb5\x18kOwned apps that friends have posted status or screenshots for in the past two weeks. DEPRECATED AND UNUSED.R\x0ebeingDiscussed\x12\xa0\x01\n" +
	"\fnew_to_group\x18\a \x03(\v27.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfoBE\x82\xb5\x18AOwned apps that none of your friends had played prior to 2 weeks.R\n" +
	"newToGroup\x12\xaa\x01\n" +
	"\x11returned_to_group\x18\b \x03(\v27.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfoBE\x82\xb5\x18AOwned apps that friends hadn't played for a while, but are again.R\x0freturnedToGroup\x12y\n" +
	"\x13active_friend_count\x18\t \x01(\r:\x010BF\x82\xb5\x18BNumber of friends with non-trivial activity in the past two weeks.R\x11activeFriendCount\x1a\xec\x04\n" +
	"\x0eFriendPlayTime\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x8a\x01\n" +
	"\x18minutes_played_this_week\x18\x02 \x01(\rBQ\x82\xb5\x18MMinutes this friend played the game (from the enclosing structure) this week.R\x15minutesPlayedThisWeek\x12\x94\x01\n" +
	"\x18minutes_played_two_weeks\x18\x03 \x01(\rB[\x82\xb5\x18WMinutes this friend played the game (from the enclosing structure) in the past 2 weeks.R\x15minutesPlayedTwoWeeks\x12\x86\x01\n" +
	"\x16minutes_played_forever\x18\x04 \x01(\rBP\x82\xb5\x18LMinutes this friend played the game (from the enclosing structure) all time.R\x14minutesPlayedForever\x12\x92\x01\n" +
	"\vevent_count\x18\x05 \x01(\rBq\x82\xb5\x18mNumber of events involving this user & app. (Only set for results in being_discussed.) DEPRECATED AND UNUSED.R\n" +
	"eventCount\x1a\x95\x03\n" +
	"\x0eAppFriendsInfo\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\xd2\x01\n" +
	"\afriends\x18\x02 \x03(\v27.CPlayer_GetFriendsAppsActivity_Response.FriendPlayTimeB\x7f\x82\xb5\x18{Friends (w/ playtime) that meet a specific criteria -- e.g. for trending, only includes friends w/ more playtime this week.R\afriends\x12\x97\x01\n" +
	"\rdisplay_order\x18\x03 \x01(\rBr\x82\xb5\x18nIndex indicating the order in which this app should be displayed, relative to other apps in the same response.R\fdisplayOrder\":\n" +
	"\"CPlayer_GetGameBadgeLevels_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"\xe6\x01\n" +
	"#CPlayer_GetGameBadgeLevels_Response\x12!\n" +
	"\fplayer_level\x18\x01 \x01(\rR\vplayerLevel\x12B\n" +
	"\x06badges\x18\x02 \x03(\v2*.CPlayer_GetGameBadgeLevels_Response.BadgeR\x06badges\x1aX\n" +
	"\x05Badge\x12\x14\n" +
	"\x05level\x18\x01 \x01(\x05R\x05level\x12\x16\n" +
	"\x06series\x18\x02 \x01(\x05R\x06series\x12!\n" +
	"\fborder_color\x18\x03 \x01(\rR\vborderColor\"\x7f\n" +
	"$CPlayer_GetProfileBackground_Request\x12;\n" +
	"\asteamid\x18\x01 \x01(\x06B!\x82\xb5\x18\x1dThe player we're asking aboutR\asteamid\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"\x84\x05\n" +
	"\vProfileItem\x12(\n" +
	"\x0fcommunityitemid\x18\x01 \x01(\x04R\x0fcommunityitemid\x12N\n" +
	"\vimage_small\x18\x02 \x01(\tB-\x82\xb5\x18)small image used in backpack or selectionR\n" +
	"imageSmall\x125\n" +
	"\vimage_large\x18\x03 \x01(\tB\x14\x82\xb5\x18\x10the image itselfR\n" +
	"imageLarge\x12$\n" +
	"\x04name\x18\x04 \x01(\tB\x10\x82\xb5\x18\fenglish nameR\x04name\x122\n" +
	"\n" +
	"item_title\x18\x05 \x01(\tB\x13\x82\xb5\x18\x0flocalized titleR\titemTitle\x12D\n" +
	"\x10item_description\x18\x06 \x01(\tB\x19\x82\xb5\x18\x15localized descriptionR\x0fitemDescription\x12\x14\n" +
	"\x05appid\x18\a \x01(\rR\x05appid\x12\x1b\n" +
	"\titem_type\x18\b \x01(\rR\bitemType\x12\x1d\n" +
	"\n" +
	"item_class\x18\t \x01(\rR\titemClass\x126\n" +
	"\n" +
	"movie_webm\x18\n" +
	" \x01(\tB\x17\x82\xb5\x18\x13URL to webm, if anyR\tmovieWebm\x123\n" +
	"\tmovie_mp4\x18\v \x01(\tB\x16\x82\xb5\x18\x12URL to mp4, if anyR\bmovieMp4\x12e\n" +
	"\x0eequipped_flags\x18\f \x01(\rB>\x82\xb5\x18:Special flags set when equipped (EProfileItemEquippedFlag)R\requippedFlags\"d\n" +
	"%CPlayer_GetProfileBackground_Response\x12;\n" +
	"\x12profile_background\x18\x01 \x01(\v2\f.ProfileItemR\x11profileBackground\"P\n" +
	"$CPlayer_SetProfileBackground_Request\x12(\n" +
	"\x0fcommunityitemid\x18\x01 \x01(\x04R\x0fcommunityitemid\"'\n" +
	"%CPlayer_SetProfileBackground_Response\"\x83\x01\n" +
	"(CPlayer_GetMiniProfileBackground_Request\x12;\n" +
	"\asteamid\x18\x01 \x01(\x06B!\x82\xb5\x18\x1dThe player we're asking aboutR\asteamid\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"h\n" +
	")CPlayer_GetMiniProfileBackground_Response\x12;\n" +
	"\x12profile_background\x18\x01 \x01(\v2\f.ProfileItemR\x11profileBackground\"T\n" +
	"(CPlayer_SetMiniProfileBackground_Request\x12(\n" +
	"\x0fcommunityitemid\x18\x01 \x01(\x04R\x0fcommunityitemid\"+\n" +
	")CPlayer_SetMiniProfileBackground_Response\"y\n" +
	"\x1eCPlayer_GetAvatarFrame_Request\x12;\n" +
	"\asteamid\x18\x01 \x01(\x06B!\x82\xb5\x18\x1dThe player we're asking aboutR\asteamid\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"R\n" +
	"\x1fCPlayer_GetAvatarFrame_Response\x12/\n" +
	"\favatar_frame\x18\x01 \x01(\v2\f.ProfileItemR\vavatarFrame\"J\n" +
	"\x1eCPlayer_SetAvatarFrame_Request\x12(\n" +
	"\x0fcommunityitemid\x18\x01 \x01(\x04R\x0fcommunityitemid\"!\n" +
	"\x1fCPlayer_SetAvatarFrame_Response\"|\n" +
	"!CPlayer_GetAnimatedAvatar_Request\x12;\n" +
	"\asteamid\x18\x01 \x01(\x06B!\x82\xb5\x18\x1dThe player we're asking aboutR\asteamid\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"J\n" +
	"\"CPlayer_GetAnimatedAvatar_Response\x12$\n" +
	"\x06avatar\x18\x01 \x01(\v2\f.ProfileItemR\x06avatar\"M\n" +
	"!CPlayer_SetAnimatedAvatar_Request\x12(\n" +
	"\x0fcommunityitemid\x18\x01 \x01(\x04R\x0fcommunityitemid\"$\n" +
	"\"CPlayer_SetAnimatedAvatar_Response\"B\n" +
	"$CPlayer_GetProfileItemsOwned_Request\x12\x1a\n" +
	"\blanguage\x18\x01 \x01(\tR\blanguage\"\xd5\x02\n" +
	"%CPlayer_GetProfileItemsOwned_Response\x12=\n" +
	"\x13profile_backgrounds\x18\x01 \x03(\v2\f.ProfileItemR\x12profileBackgrounds\x12F\n" +
	"\x18mini_profile_backgrounds\x18\x02 \x03(\v2\f.ProfileItemR\x16miniProfileBackgrounds\x121\n" +
	"\ravatar_frames\x18\x03 \x03(\v2\f.ProfileItemR\favatarFrames\x127\n" +
	"\x10animated_avatars\x18\x04 \x03(\v2\f.ProfileItemR\x0fanimatedAvatars\x129\n" +
	"\x11profile_modifiers\x18\x05 \x03(\v2\f.ProfileItemR\x10profileModifiers\"_\n" +
	"'CPlayer_GetProfileItemsEquipped_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"\xce\x02\n" +
	"(CPlayer_GetProfileItemsEquipped_Response\x12;\n" +
	"\x12profile_background\x18\x01 \x01(\v2\f.ProfileItemR\x11profileBackground\x12D\n" +
	"\x17mini_profile_background\x18\x02 \x01(\v2\f.ProfileItemR\x15miniProfileBackground\x12/\n" +
	"\favatar_frame\x18\x03 \x01(\v2\f.ProfileItemR\vavatarFrame\x125\n" +
	"\x0fanimated_avatar\x18\x04 \x01(\v2\f.ProfileItemR\x0eanimatedAvatar\x127\n" +
	"\x10profile_modifier\x18\x05 \x01(\v2\f.ProfileItemR\x0fprofileModifier\"\x92\x01\n" +
	"+CPlayer_SetEquippedProfileItemFlags_Request\x12(\n" +
	"\x0fcommunityitemid\x18\x01 \x01(\x04R\x0fcommunityitemid\x129\n" +
	"\x05flags\x18\x02 \x01(\rB#\x82\xb5\x18\x1fSet of EProfileItemEquippedFlagR\x05flags\".\n" +
	",CPlayer_SetEquippedProfileItemFlags_Response\"!\n" +
	"\x1fCPlayer_GetEmoticonList_Request\"\x8b\x02\n" +
	" CPlayer_GetEmoticonList_Response\x12H\n" +
	"\temoticons\x18\x01 \x03(\v2*.CPlayer_GetEmoticonList_Response.EmoticonR\temoticons\x1a\x9c\x01\n" +
	"\bEmoticon\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12$\n" +
	"\x0etime_last_used\x18\x03 \x01(\rR\ftimeLastUsed\x12\x1b\n" +
	"\tuse_count\x18\x04 \x01(\rR\buseCount\x12#\n" +
	"\rtime_received\x18\x05 \x01(\rR\ftimeReceived\"w\n" +
	"'CPlayer_GetAchievementsProgress_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12\x16\n" +
	"\x06appids\x18\x03 \x03(\rR\x06appids\"\xde\x02\n" +
	"(CPlayer_GetAchievementsProgress_Response\x12p\n" +
	"\x14achievement_progress\x18\x01 \x03(\v2=.CPlayer_GetAchievementsProgress_Response.AchievementProgressR\x13achievementProgress\x1a\xbf\x01\n" +
	"\x13AchievementProgress\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x1a\n" +
	"\bunlocked\x18\x02 \x01(\rR\bunlocked\x12\x14\n" +
	"\x05total\x18\x03 \x01(\rR\x05total\x12\x1e\n" +
	"\n" +
	"percentage\x18\x04 \x01(\x02R\n" +
	"percentage\x12!\n" +
	"\fall_unlocked\x18\x05 \x01(\bR\vallUnlocked\x12\x1d\n" +
	"\n" +
	"cache_time\x18\x06 \x01(\rR\tcacheTime\"\\\n" +
	"#CPlayer_PostStatusToFriends_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x1f\n" +
	"\vstatus_text\x18\x02 \x01(\tR\n" +
	"statusText\"&\n" +
	"$CPlayer_PostStatusToFriends_Response\"v\n" +
	"\x1fCPlayer_GetPostedStatus_Request\x12;\n" +
	"\asteamid\x18\x01 \x01(\x04B!\x82\xb5\x18\x1dThe player we're asking aboutR\asteamid\x12\x16\n" +
	"\x06postid\x18\x02 \x01(\x04R\x06postid\"\xa9\x01\n" +
	" CPlayer_GetPostedStatus_Response\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x16\n" +
	"\x06postid\x18\x02 \x01(\x04R\x06postid\x12\x1f\n" +
	"\vstatus_text\x18\x03 \x01(\tR\n" +
	"statusText\x12\x18\n" +
	"\adeleted\x18\x04 \x01(\bR\adeleted\x12\x14\n" +
	"\x05appid\x18\x05 \x01(\rR\x05appid\"<\n" +
	"\"CPlayer_DeletePostedStatus_Request\x12\x16\n" +
	"\x06postid\x18\x01 \x01(\x04R\x06postid\"%\n" +
	"#CPlayer_DeletePostedStatus_Response\"\x91\x01\n" +
	"\"CPlayer_GetLastPlayedTimes_Request\x12k\n" +
	"\x0fmin_last_played\x18\x01 \x01(\rBC\x82\xb5\x18?The most recent last-played time the client already knows aboutR\rminLastPlayed\"\xed\x05\n" +
	"#CPlayer_GetLastPlayedTimes_Response\x12?\n" +
	"\x05games\x18\x01 \x03(\v2).CPlayer_GetLastPlayedTimes_Response.GameR\x05games\x1a\x84\x05\n" +
	"\x04Game\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\x05R\x05appid\x12#\n" +
	"\rlast_playtime\x18\x02 \x01(\rR\flastPlaytime\x12'\n" +
	"\x0fplaytime_2weeks\x18\x03 \x01(\x05R\x0eplaytime2weeks\x12)\n" +
	"\x10playtime_forever\x18\x04 \x01(\x05R\x0fplaytimeForever\x12%\n" +
	"\x0efirst_playtime\x18\x05 \x01(\rR\rfirstPlaytime\x128\n" +
	"\x18playtime_windows_forever\x18\x06 \x01(\x05R\x16playtimeWindowsForever\x120\n" +
	"\x14playtime_mac_forever\x18\a \x01(\x05R\x12playtimeMacForever\x124\n" +
	"\x16playtime_linux_forever\x18\b \x01(\x05R\x14playtimeLinuxForever\x124\n" +
	"\x16first_windows_playtime\x18\t \x01(\rR\x14firstWindowsPlaytime\x12,\n" +
	"\x12first_mac_playtime\x18\n" +
	" \x01(\rR\x10firstMacPlaytime\x120\n" +
	"\x14first_linux_playtime\x18\v \x01(\rR\x12firstLinuxPlaytime\x122\n" +
	"\x15last_windows_playtime\x18\f \x01(\rR\x13lastWindowsPlaytime\x12*\n" +
	"\x11last_mac_playtime\x18\r \x01(\rR\x0flastMacPlaytime\x12.\n" +
	"\x13last_linux_playtime\x18\x0e \x01(\rR\x11lastLinuxPlaytime\"\x1b\n" +
	"\x19CPlayer_AcceptSSA_Request\"\x1c\n" +
	"\x1aCPlayer_AcceptSSA_Response\"!\n" +
	"\x1fCPlayer_GetNicknameList_Request\"\xbe\x01\n" +
	" CPlayer_GetNicknameList_Response\x12N\n" +
	"\tnicknames\x18\x01 \x03(\v20.CPlayer_GetNicknameList_Response.PlayerNicknameR\tnicknames\x1aJ\n" +
	"\x0ePlayerNickname\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\aR\taccountid\x12\x1a\n" +
	"\bnickname\x18\x02 \x01(\tR\bnickname\")\n" +
	"'CPlayer_GetPerFriendPreferences_Request\"\x84\a\n" +
	"\x14PerFriendPreferences\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\aR\taccountid\x12\x1a\n" +
	"\bnickname\x18\x02 \x01(\tR\bnickname\x12x\n" +
	"\x18notifications_showingame\x18\x03 \x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x17notificationsShowingame\x12x\n" +
	"\x18notifications_showonline\x18\x04 \x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x17notificationsShowonline\x12|\n" +
	"\x1anotifications_showmessages\x18\x05 \x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x19notificationsShowmessages\x12j\n" +
	"\x11sounds_showingame\x18\x06 \x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x10soundsShowingame\x12j\n" +
	"\x11sounds_showonline\x18\a \x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x10soundsShowonline\x12n\n" +
	"\x13sounds_showmessages\x18\b \x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x12soundsShowmessages\x12x\n" +
	"\x18notifications_sendmobile\x18\t \x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x17notificationsSendmobile\"c\n" +
	"(CPlayer_GetPerFriendPreferences_Response\x127\n" +
	"\vpreferences\x18\x01 \x03(\v2\x15.PerFriendPreferencesR\vpreferences\"b\n" +
	"'CPlayer_SetPerFriendPreferences_Request\x127\n" +
	"\vpreferences\x18\x01 \x01(\v2\x15.PerFriendPreferencesR\vpreferences\"*\n" +
	"(CPlayer_SetPerFriendPreferences_Response\"l\n" +
	"\x19CPlayer_AddFriend_Request\x12O\n" +
	"\asteamid\x18\x01 \x01(\x06B5\x82\xb5\x181Steam ID of user to whom to send a friend invite.R\asteamid\"\xae\x02\n" +
	"\x1aCPlayer_AddFriend_Response\x12[\n" +
	"\vinvite_sent\x18\x01 \x01(\bB:\x82\xb5\x186True if the operation was successful, false otherwise.R\n" +
	"inviteSent\x12\x9a\x01\n" +
	"\x13friend_relationship\x18\x02 \x01(\rBi\x82\xb5\x18ethe resulting relationship.  Depending on state, may move directly to friends rather than invite sentR\x12friendRelationship\x12\x16\n" +
	"\x06result\x18\x03 \x01(\x05R\x06result\"[\n" +
	"\x1cCPlayer_RemoveFriend_Request\x12;\n" +
	"\asteamid\x18\x01 \x01(\x06B!\x82\xb5\x18\x1dSteam ID of friend to remove.R\asteamid\"p\n" +
	"\x1dCPlayer_RemoveFriend_Response\x12O\n" +
	"\x13friend_relationship\x18\x01 \x01(\rB\x1e\x82\xb5\x18\x1athe resulting relationshipR\x12friendRelationship\"\x92\x01\n" +
	"\x1cCPlayer_IgnoreFriend_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12X\n" +
	"\bunignore\x18\x02 \x01(\bB<\x82\xb5\x188If set, remove from ignore/block list instead of adding R\bunignore\"p\n" +
	"\x1dCPlayer_IgnoreFriend_Response\x12O\n" +
	"\x13friend_relationship\x18\x01 \x01(\rB\x1e\x82\xb5\x18\x1athe resulting relationshipR\x12friendRelationship\")\n" +
	"'CPlayer_GetCommunityPreferences_Request\"\x89\x02\n" +
	"\x1cCPlayer_CommunityPreferences\x12C\n" +
	"\x1bhide_adult_content_violence\x18\x01 \x01(\b:\x04trueR\x18hideAdultContentViolence\x129\n" +
	"\x16hide_adult_content_sex\x18\x02 \x01(\b:\x04trueR\x13hideAdultContentSex\x12<\n" +
	"\x16parenthesize_nicknames\x18\x04 \x01(\b:\x05falseR\x15parenthesizeNicknames\x12+\n" +
	"\x11timestamp_updated\x18\x03 \x01(\rR\x10timestampUpdated\"k\n" +
	"(CPlayer_GetCommunityPreferences_Response\x12?\n" +
	"\vpreferences\x18\x01 \x01(\v2\x1d.CPlayer_CommunityPreferencesR\vpreferences\"j\n" +
	"'CPlayer_SetCommunityPreferences_Request\x12?\n" +
	"\vpreferences\x18\x01 \x01(\v2\x1d.CPlayer_CommunityPreferencesR\vpreferences\"*\n" +
	"(CPlayer_SetCommunityPreferences_Response\"J\n" +
	",CPlayer_GetNewSteamAnnouncementState_Request\x12\x1a\n" +
	"\blanguage\x18\x01 \x01(\x05R\blanguage\"\xf1\x01\n" +
	"-CPlayer_GetNewSteamAnnouncementState_Response\x12\x14\n" +
	"\x05state\x18\x01 \x01(\x05R\x05state\x123\n" +
	"\x15announcement_headline\x18\x02 \x01(\tR\x14announcementHeadline\x12)\n" +
	"\x10announcement_url\x18\x03 \x01(\tR\x0fannouncementUrl\x12\x1f\n" +
	"\vtime_posted\x18\x04 \x01(\rR\n" +
	"timePosted\x12)\n" +
	"\x10announcement_gid\x18\x05 \x01(\x04R\x0fannouncementGid\"}\n" +
	"/CPlayer_UpdateSteamAnnouncementLastRead_Request\x12)\n" +
	"\x10announcement_gid\x18\x01 \x01(\x04R\x0fannouncementGid\x12\x1f\n" +
	"\vtime_posted\x18\x02 \x01(\rR\n" +
	"timePosted\"2\n" +
	"0CPlayer_UpdateSteamAnnouncementLastRead_Response\"$\n" +
	"\"CPlayer_GetPrivacySettings_Request\"\xcb\x02\n" +
	"\x10CPrivacySettings\x12#\n" +
	"\rprivacy_state\x18\x01 \x01(\x05R\fprivacyState\x126\n" +
	"\x17privacy_state_inventory\x18\x02 \x01(\x05R\x15privacyStateInventory\x12.\n" +
	"\x13privacy_state_gifts\x18\x03 \x01(\x05R\x11privacyStateGifts\x128\n" +
	"\x18privacy_state_ownedgames\x18\x04 \x01(\x05R\x16privacyStateOwnedgames\x124\n" +
	"\x16privacy_state_playtime\x18\x05 \x01(\x05R\x14privacyStatePlaytime\x12:\n" +
	"\x19privacy_state_friendslist\x18\x06 \x01(\x05R\x17privacyStateFriendslist\"c\n" +
	"#CPlayer_GetPrivacySettings_Response\x12<\n" +
	"\x10privacy_settings\x18\x01 \x01(\v2\x11.CPrivacySettingsR\x0fprivacySettings\":\n" +
	"\"CPlayer_GetDurationControl_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"\x93\x02\n" +
	"#CPlayer_GetDurationControl_Response\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12\x18\n" +
	"\aseconds\x18\x02 \x01(\x05R\aseconds\x12#\n" +
	"\rseconds_today\x18\x03 \x01(\x05R\fsecondsToday\x122\n" +
	"\x15is_steamchina_account\x18\x04 \x01(\bR\x13isSteamchinaAccount\x12&\n" +
	"\x0fis_age_verified\x18\x05 \x01(\bR\risAgeVerified\x122\n" +
	"\x15seconds_allowed_today\x18\x06 \x01(\rR\x13secondsAllowedToday\"g\n" +
	"$CPlayer_LastPlayedTimes_Notification\x12?\n" +
	"\x05games\x18\x01 \x03(\v2).CPlayer_GetLastPlayedTimes_Response.GameR\x05games\"\x8d\x01\n" +
	"*CPlayer_FriendNicknameChanged_Notification\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\aR\taccountid\x12\x1a\n" +
	"\bnickname\x18\x02 \x01(\tR\bnickname\x12%\n" +
	"\x0fis_echo_to_self\x18\x03 \x01(\bR\fisEchoToSelf\"V\n" +
	"6CPlayer_FriendEquippedProfileItemsChanged_Notification\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\aR\taccountid\"\xf2\x01\n" +
	".CPlayer_NewSteamAnnouncementState_Notification\x12\x14\n" +
	"\x05state\x18\x01 \x01(\x05R\x05state\x123\n" +
	"\x15announcement_headline\x18\x02 \x01(\tR\x14announcementHeadline\x12)\n" +
	"\x10announcement_url\x18\x03 \x01(\tR\x0fannouncementUrl\x12\x1f\n" +
	"\vtime_posted\x18\x04 \x01(\rR\n" +
	"timePosted\x12)\n" +
	"\x10announcement_gid\x18\x05 \x01(\x04R\x0fannouncementGid\"s\n" +
	"0CPlayer_CommunityPreferencesChanged_Notification\x12?\n" +
	"\vpreferences\x18\x01 \x01(\v2\x1d.CPlayer_CommunityPreferencesR\vpreferences\"\x89\x01\n" +
	"0CPlayer_PerFriendPreferencesChanged_Notification\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\aR\taccountid\x127\n" +
	"\vpreferences\x18\x02 \x01(\v2\x15.PerFriendPreferencesR\vpreferences\"k\n" +
	"+CPlayer_PrivacySettingsChanged_Notification\x12<\n" +
	"\x10privacy_settings\x18\x01 \x01(\v2\x11.CPrivacySettingsR\x0fprivacySettings*\x85\x01\n" +
	"\x14ENotificationSetting\x12*\n" +
	"&k_ENotificationSettingNotifyUseDefault\x10\x00\x12 \n" +
	"\x1ck_ENotificationSettingAlways\x10\x01\x12\x1f\n" +
	"\x1bk_ENotificationSettingNever\x10\x022\xd6-\n" +
	"\x06Player\x12\xef\x01\n" +
	"\"GetMutualFriendsForIncomingInvites\x123.CPlayer_GetMutualFriendsForIncomingInvites_Request\x1a4.CPlayer_GetMutualFriendsForIncomingInvites_Response\"^\x82\xb5\x18ZGet me the mutual friends for each of my pending incoming invites (individuals and clans).\x12\x80\x01\n" +
	"\rGetOwnedGames\x12\x1e.CPlayer_GetOwnedGames_Request\x1a\x1f.CPlayer_GetOwnedGames_Response\".\x82\xb5\x18*Return a list of games owned by the player\x12\x7f\n" +
	"\vGetPlayNext\x12\x1c.CPlayer_GetPlayNext_Request\x1a\x1d.CPlayer_GetPlayNext_Response\"3\x82\xb5\x18/Return suggested games for player to play next.\x12\xb8\x01\n" +
	"\x16GetFriendsGameplayInfo\x12'.CPlayer_GetFriendsGameplayInfo_Request\x1a(.CPlayer_GetFriendsGameplayInfo_Response\"K\x82\xb5\x18GGet a list of friends who are playing, have played, own, or want a game\x12\xae\x01\n" +
	"\x16GetFriendsAppsActivity\x12'.CPlayer_GetFriendsAppsActivity_Request\x1a(.CPlayer_GetFriendsAppsActivity_Response\"A\x82\xb5\x18=Get lists of apps friends are active in, in a variety of ways\x12\xb6\x01\n" +
	"\x12GetGameBadgeLevels\x12#.CPlayer_GetGameBadgeLevels_Request\x1a$.CPlayer_GetGameBadgeLevels_Response\"U\x82\xb5\x18QReturns the Steam Level of a user, the Badge level for the game, and if it's foil\x12\xa6\x01\n" +
	"\x14GetProfileBackground\x12%.CPlayer_GetProfileBackground_Request\x1a&.CPlayer_GetProfileBackground_Response\"?\x82\xb5\x18;Gets which profile background is active for a specific user\x12\x8d\x01\n" +
	"\x14SetProfileBackground\x12%.CPlayer_SetProfileBackground_Request\x1a&.CPlayer_SetProfileBackground_Response\"&\x82\xb5\x18\"Sets the user's profile background\x12\xb7\x01\n" +
	"\x18GetMiniProfileBackground\x12).CPlayer_GetMiniProfileBackground_Request\x1a*.CPlayer_GetMiniProfileBackground_Response\"D\x82\xb5\x18@Gets which mini profile background is active for a specific user\x12\x9e\x01\n" +
	"\x18SetMiniProfileBackground\x12).CPlayer_SetMiniProfileBackground_Request\x1a*.CPlayer_SetMiniProfileBackground_Response\"+\x82\xb5\x18'Sets the user's mini profile background\x12\x8e\x01\n" +
	"\x0eGetAvatarFrame\x12\x1f.CPlayer_GetAvatarFrame_Request\x1a .CPlayer_GetAvatarFrame_Response\"9\x82\xb5\x185Gets which avatar frame is active for a specific user\x12\x87\x01\n" +
	"\x0eSetAvatarFrame\x12\x1f.CPlayer_SetAvatarFrame_Request\x1a .CPlayer_SetAvatarFrame_Response\"2\x82\xb5\x18.Sets the user's avatar frame for their profile\x12\x9a\x01\n" +
	"\x11GetAnimatedAvatar\x12\".CPlayer_GetAnimatedAvatar_Request\x1a#.CPlayer_GetAnimatedAvatar_Response\"<\x82\xb5\x188Gets which animated avatar is active for a specific user\x12\x93\x01\n" +
	"\x11SetAnimatedAvatar\x12\".CPlayer_SetAnimatedAvatar_Request\x1a#.CPlayer_SetAnimatedAvatar_Response\"5\x82\xb5\x181Sets the user's animated avatar for their profile\x12\xa0\x01\n" +
	"\x14GetProfileItemsOwned\x12%.CPlayer_GetProfileItemsOwned_Request\x1a&.CPlayer_GetProfileItemsOwned_Response\"9\x82\xb5\x185Returns the items the user can equip on their profile\x12\xac\x01\n" +
	"\x17GetProfileItemsEquipped\x12(.CPlayer_GetProfileItemsEquipped_Request\x1a).CPlayer_GetProfileItemsEquipped_Response\"<\x82\xb5\x188Returns the items the user has equipped on their profile\x12\xa7\x01\n" +
	"\x1bSetEquippedProfileItemFlags\x12,.CPlayer_SetEquippedProfileItemFlags_Request\x1a-.CPlayer_SetEquippedProfileItemFlags_Response\"+\x82\xb5\x18'Sets special flags on the equipped item\x12\x91\x01\n" +
	"\x0fGetEmoticonList\x12 .CPlayer_GetEmoticonList_Request\x1a!.CPlayer_GetEmoticonList_Response\"9\x82\xb5\x185Gets a list of the emoticons a user has with metadata\x12\xb9\x01\n" +
	"\x17GetAchievementsProgress\x12(.CPlayer_GetAchievementsProgress_Request\x1a).CPlayer_GetAchievementsProgress_Response\"I\x82\xb5\x18EGets the achievement completion stats for the specified list of apps.\x12\x91\x01\n" +
	"\x13PostStatusToFriends\x12$.CPlayer_PostStatusToFriends_Request\x1a%.CPlayer_PostStatusToFriends_Response\"-\x82\xb5\x18)Posts custom status text into the blotter\x12\x86\x01\n" +
	"\x0fGetPostedStatus\x12 .CPlayer_GetPostedStatus_Request\x1a!.CPlayer_GetPostedStatus_Response\".\x82\xb5\x18*Gets a posted status text for a user by id\x12\x92\x01\n" +
	"\x12DeletePostedStatus\x12#.CPlayer_DeletePostedStatus_Request\x1a$.CPlayer_DeletePostedStatus_Response\"1\x82\xb5\x18-Deletes a posted status text for a user by id\x12\x95\x01\n" +
	"\x18ClientGetLastPlayedTimes\x12#.CPlayer_GetLastPlayedTimes_Request\x1a$.CPlayer_GetLastPlayedTimes_Response\".\x82\xb5\x18*Gets the last-played times for the account\x12c\n" +
	"\tAcceptSSA\x12\x1a.CPlayer_AcceptSSA_Request\x1a\x1b.CPlayer_AcceptSSA_Response\"\x1d\x82\xb5\x18\x19User is accepting the SSA\x12\x94\x01\n" +
	"\x0fGetNicknameList\x12 .CPlayer_GetNicknameList_Request\x1a!.CPlayer_GetNicknameList_Response\"<\x82\xb5\x188Gets the list of nicknames this user has for other users\x12\xbd\x01\n" +
	"\x17GetPerFriendPreferences\x12(.CPlayer_GetPerFriendPreferences_Request\x1a).CPlayer_GetPerFriendPreferences_Response\"M\x82\xb5\x18IGets the list of per-friend preferences this user has set for other users\x12\xb7\x01\n" +
	"\x17SetPerFriendPreferences\x12(.CPlayer_SetPerFriendPreferences_Request\x1a).CPlayer_SetPerFriendPreferences_Response\"G\x82\xb5\x18CSets the logged in user's per-friend preferences for the given user\x12s\n" +
	"\tAddFriend\x12\x1a.CPlayer_AddFriend_Request\x1a\x1b.CPlayer_AddFriend_Response\"-\x82\xb5\x18)Invites another Steam user to be a friend\x12\x82\x01\n" +
	"\fRemoveFriend\x12\x1d.CPlayer_RemoveFriend_Request\x1a\x1e.CPlayer_RemoveFriend_Response\"3\x82\xb5\x18/Removes a friend or ignores a friend suggestion\x12\xa6\x01\n" +
	"\fIgnoreFriend\x12\x1d.CPlayer_IgnoreFriend_Request\x1a\x1e.CPlayer_IgnoreFriend_Response\"W\x82\xb5\x18SBlocks or unblocks communication with the user.  Despite name, can be a non-friend.\x12\x9e\x01\n" +
	"\x17GetCommunityPreferences\x12(.CPlayer_GetCommunityPreferences_Request\x1a).CPlayer_GetCommunityPreferences_Response\".\x82\xb5\x18*Returns the player's community preferences\x12\x9b\x01\n" +
	"\x17SetCommunityPreferences\x12(.CPlayer_SetCommunityPreferences_Request\x1a).CPlayer_SetCommunityPreferences_Response\"+\x82\xb5\x18'Sets the player's community preferences\x12\xde\x01\n" +
	"\x1cGetNewSteamAnnouncementState\x12-.CPlayer_GetNewSteamAnnouncementState_Request\x1a..CPlayer_GetNewSteamAnnouncementState_Response\"_\x82\xb5\x18[Calculates and returns what to display for UI that renders new steam announcement available\x12\xbc\x01\n" +
	"\x1fUpdateSteamAnnouncementLastRead\x120.CPlayer_UpdateSteamAnnouncementLastRead_Request\x1a1.CPlayer_UpdateSteamAnnouncementLastRead_Response\"4\x82\xb5\x180Marks latest announcement timestamp read by user\x12\x82\x01\n" +
	"\x12GetPrivacySettings\x12#.CPlayer_GetPrivacySettings_Request\x1a$.CPlayer_GetPrivacySettings_Response\"!\x82\xb5\x18\x1dGet current privacy settings.\x12\x8c\x01\n" +
	"\x12GetDurationControl\x12#.CPlayer_GetDurationControl_Request\x1a$.CPlayer_GetDurationControl_Response\"+\x82\xb5\x18'Get gameplay duration control settings.\x1a-\x82\xb5\x18)A service for accessing Steam player data2\xf1\t\n" +
	"\fPlayerClient\x12\x8c\x01\n" +
	"\x15NotifyLastPlayedTimes\x12%.CPlayer_LastPlayedTimes_Notification\x1a\v.NoResponse\"?\x82\xb5\x18;Notification from server to client of more recent play time\x12\xa4\x01\n" +
	"\x1bNotifyFriendNicknameChanged\x12+.CPlayer_FriendNicknameChanged_Notification\x1a\v.NoResponse\"K\x82\xb5\x18GNotification from server to client that a friend's nickname has changed\x12\xcb\x01\n" +
	"'NotifyFriendEquippedProfileItemsChanged\x127.CPlayer_FriendEquippedProfileItemsChanged_Notification\x1a\v.NoResponse\"Z\x82\xb5\x18VNotification from server to client that a friend's equipped profile items have changed\x12\xa4\x01\n" +
	"\x1fNotifyNewSteamAnnouncementState\x12/.CPlayer_NewSteamAnnouncementState_Notification\x1a\v.NoResponse\"C\x82\xb5\x18?Notifies client of changes to steam announcement state for user\x12\xb9\x01\n" +
	"!NotifyCommunityPreferencesChanged\x121.CPlayer_CommunityPreferencesChanged_Notification\x1a\v.NoResponse\"T\x82\xb5\x18PNotification from server to client that their community preferences have changed\x12\xaa\x01\n" +
	"!NotifyPerFriendPreferencesChanged\x121.CPlayer_PerFriendPreferencesChanged_Notification\x1a\v.NoResponse\"E\x82\xb5\x18ANotification from server that per-friend preferences have changed\x12\x9c\x01\n" +
	"#NotifyPrivacyPrivacySettingsChanged\x12,.CPlayer_PrivacySettingsChanged_Notification\x1a\v.NoResponse\":\x82\xb5\x186Notification from server that privacy settings changed\x1a.\x82\xb5\x18&Steam player data client notifications\xc0\xb5\x18\x02B\x03\x80\x01\x01"

var (
	file_steammessages_player_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_player_steamclient_proto_rawDescData []byte
)

func file_steammessages_player_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_player_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_player_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_player_steamclient_proto_rawDesc), len(file_steammessages_player_steamclient_proto_rawDesc)))
	})
	return file_steammessages_player_steamclient_proto_rawDescData
}

var file_steammessages_player_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_player_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 94)
var file_steammessages_player_steamclient_proto_goTypes = []any{
	(ENotificationSetting)(0),                                            // 0: ENotificationSetting
	(*CPlayer_GetMutualFriendsForIncomingInvites_Request)(nil),           // 1: CPlayer_GetMutualFriendsForIncomingInvites_Request
	(*CPlayer_IncomingInviteMutualFriendList)(nil),                       // 2: CPlayer_IncomingInviteMutualFriendList
	(*CPlayer_GetMutualFriendsForIncomingInvites_Response)(nil),          // 3: CPlayer_GetMutualFriendsForIncomingInvites_Response
	(*CPlayer_GetOwnedGames_Request)(nil),                                // 4: CPlayer_GetOwnedGames_Request
	(*CPlayer_GetOwnedGames_Response)(nil),                               // 5: CPlayer_GetOwnedGames_Response
	(*CPlayer_GetPlayNext_Request)(nil),                                  // 6: CPlayer_GetPlayNext_Request
	(*CPlayer_GetPlayNext_Response)(nil),                                 // 7: CPlayer_GetPlayNext_Response
	(*CPlayer_GetFriendsGameplayInfo_Request)(nil),                       // 8: CPlayer_GetFriendsGameplayInfo_Request
	(*CPlayer_GetFriendsGameplayInfo_Response)(nil),                      // 9: CPlayer_GetFriendsGameplayInfo_Response
	(*CPlayer_GetFriendsAppsActivity_Request)(nil),                       // 10: CPlayer_GetFriendsAppsActivity_Request
	(*CPlayer_GetFriendsAppsActivity_Response)(nil),                      // 11: CPlayer_GetFriendsAppsActivity_Response
	(*CPlayer_GetGameBadgeLevels_Request)(nil),                           // 12: CPlayer_GetGameBadgeLevels_Request
	(*CPlayer_GetGameBadgeLevels_Response)(nil),                          // 13: CPlayer_GetGameBadgeLevels_Response
	(*CPlayer_GetProfileBackground_Request)(nil),                         // 14: CPlayer_GetProfileBackground_Request
	(*ProfileItem)(nil),                                                  // 15: ProfileItem
	(*CPlayer_GetProfileBackground_Response)(nil),                        // 16: CPlayer_GetProfileBackground_Response
	(*CPlayer_SetProfileBackground_Request)(nil),                         // 17: CPlayer_SetProfileBackground_Request
	(*CPlayer_SetProfileBackground_Response)(nil),                        // 18: CPlayer_SetProfileBackground_Response
	(*CPlayer_GetMiniProfileBackground_Request)(nil),                     // 19: CPlayer_GetMiniProfileBackground_Request
	(*CPlayer_GetMiniProfileBackground_Response)(nil),                    // 20: CPlayer_GetMiniProfileBackground_Response
	(*CPlayer_SetMiniProfileBackground_Request)(nil),                     // 21: CPlayer_SetMiniProfileBackground_Request
	(*CPlayer_SetMiniProfileBackground_Response)(nil),                    // 22: CPlayer_SetMiniProfileBackground_Response
	(*CPlayer_GetAvatarFrame_Request)(nil),                               // 23: CPlayer_GetAvatarFrame_Request
	(*CPlayer_GetAvatarFrame_Response)(nil),                              // 24: CPlayer_GetAvatarFrame_Response
	(*CPlayer_SetAvatarFrame_Request)(nil),                               // 25: CPlayer_SetAvatarFrame_Request
	(*CPlayer_SetAvatarFrame_Response)(nil),                              // 26: CPlayer_SetAvatarFrame_Response
	(*CPlayer_GetAnimatedAvatar_Request)(nil),                            // 27: CPlayer_GetAnimatedAvatar_Request
	(*CPlayer_GetAnimatedAvatar_Response)(nil),                           // 28: CPlayer_GetAnimatedAvatar_Response
	(*CPlayer_SetAnimatedAvatar_Request)(nil),                            // 29: CPlayer_SetAnimatedAvatar_Request
	(*CPlayer_SetAnimatedAvatar_Response)(nil),                           // 30: CPlayer_SetAnimatedAvatar_Response
	(*CPlayer_GetProfileItemsOwned_Request)(nil),                         // 31: CPlayer_GetProfileItemsOwned_Request
	(*CPlayer_GetProfileItemsOwned_Response)(nil),                        // 32: CPlayer_GetProfileItemsOwned_Response
	(*CPlayer_GetProfileItemsEquipped_Request)(nil),                      // 33: CPlayer_GetProfileItemsEquipped_Request
	(*CPlayer_GetProfileItemsEquipped_Response)(nil),                     // 34: CPlayer_GetProfileItemsEquipped_Response
	(*CPlayer_SetEquippedProfileItemFlags_Request)(nil),                  // 35: CPlayer_SetEquippedProfileItemFlags_Request
	(*CPlayer_SetEquippedProfileItemFlags_Response)(nil),                 // 36: CPlayer_SetEquippedProfileItemFlags_Response
	(*CPlayer_GetEmoticonList_Request)(nil),                              // 37: CPlayer_GetEmoticonList_Request
	(*CPlayer_GetEmoticonList_Response)(nil),                             // 38: CPlayer_GetEmoticonList_Response
	(*CPlayer_GetAchievementsProgress_Request)(nil),                      // 39: CPlayer_GetAchievementsProgress_Request
	(*CPlayer_GetAchievementsProgress_Response)(nil),                     // 40: CPlayer_GetAchievementsProgress_Response
	(*CPlayer_PostStatusToFriends_Request)(nil),                          // 41: CPlayer_PostStatusToFriends_Request
	(*CPlayer_PostStatusToFriends_Response)(nil),                         // 42: CPlayer_PostStatusToFriends_Response
	(*CPlayer_GetPostedStatus_Request)(nil),                              // 43: CPlayer_GetPostedStatus_Request
	(*CPlayer_GetPostedStatus_Response)(nil),                             // 44: CPlayer_GetPostedStatus_Response
	(*CPlayer_DeletePostedStatus_Request)(nil),                           // 45: CPlayer_DeletePostedStatus_Request
	(*CPlayer_DeletePostedStatus_Response)(nil),                          // 46: CPlayer_DeletePostedStatus_Response
	(*CPlayer_GetLastPlayedTimes_Request)(nil),                           // 47: CPlayer_GetLastPlayedTimes_Request
	(*CPlayer_GetLastPlayedTimes_Response)(nil),                          // 48: CPlayer_GetLastPlayedTimes_Response
	(*CPlayer_AcceptSSA_Request)(nil),                                    // 49: CPlayer_AcceptSSA_Request
	(*CPlayer_AcceptSSA_Response)(nil),                                   // 50: CPlayer_AcceptSSA_Response
	(*CPlayer_GetNicknameList_Request)(nil),                              // 51: CPlayer_GetNicknameList_Request
	(*CPlayer_GetNicknameList_Response)(nil),                             // 52: CPlayer_GetNicknameList_Response
	(*CPlayer_GetPerFriendPreferences_Request)(nil),                      // 53: CPlayer_GetPerFriendPreferences_Request
	(*PerFriendPreferences)(nil),                                         // 54: PerFriendPreferences
	(*CPlayer_GetPerFriendPreferences_Response)(nil),                     // 55: CPlayer_GetPerFriendPreferences_Response
	(*CPlayer_SetPerFriendPreferences_Request)(nil),                      // 56: CPlayer_SetPerFriendPreferences_Request
	(*CPlayer_SetPerFriendPreferences_Response)(nil),                     // 57: CPlayer_SetPerFriendPreferences_Response
	(*CPlayer_AddFriend_Request)(nil),                                    // 58: CPlayer_AddFriend_Request
	(*CPlayer_AddFriend_Response)(nil),                                   // 59: CPlayer_AddFriend_Response
	(*CPlayer_RemoveFriend_Request)(nil),                                 // 60: CPlayer_RemoveFriend_Request
	(*CPlayer_RemoveFriend_Response)(nil),                                // 61: CPlayer_RemoveFriend_Response
	(*CPlayer_IgnoreFriend_Request)(nil),                                 // 62: CPlayer_IgnoreFriend_Request
	(*CPlayer_IgnoreFriend_Response)(nil),                                // 63: CPlayer_IgnoreFriend_Response
	(*CPlayer_GetCommunityPreferences_Request)(nil),                      // 64: CPlayer_GetCommunityPreferences_Request
	(*CPlayer_CommunityPreferences)(nil),                                 // 65: CPlayer_CommunityPreferences
	(*CPlayer_GetCommunityPreferences_Response)(nil),                     // 66: CPlayer_GetCommunityPreferences_Response
	(*CPlayer_SetCommunityPreferences_Request)(nil),                      // 67: CPlayer_SetCommunityPreferences_Request
	(*CPlayer_SetCommunityPreferences_Response)(nil),                     // 68: CPlayer_SetCommunityPreferences_Response
	(*CPlayer_GetNewSteamAnnouncementState_Request)(nil),                 // 69: CPlayer_GetNewSteamAnnouncementState_Request
	(*CPlayer_GetNewSteamAnnouncementState_Response)(nil),                // 70: CPlayer_GetNewSteamAnnouncementState_Response
	(*CPlayer_UpdateSteamAnnouncementLastRead_Request)(nil),              // 71: CPlayer_UpdateSteamAnnouncementLastRead_Request
	(*CPlayer_UpdateSteamAnnouncementLastRead_Response)(nil),             // 72: CPlayer_UpdateSteamAnnouncementLastRead_Response
	(*CPlayer_GetPrivacySettings_Request)(nil),                           // 73: CPlayer_GetPrivacySettings_Request
	(*CPrivacySettings)(nil),                                             // 74: CPrivacySettings
	(*CPlayer_GetPrivacySettings_Response)(nil),                          // 75: CPlayer_GetPrivacySettings_Response
	(*CPlayer_GetDurationControl_Request)(nil),                           // 76: CPlayer_GetDurationControl_Request
	(*CPlayer_GetDurationControl_Response)(nil),                          // 77: CPlayer_GetDurationControl_Response
	(*CPlayer_LastPlayedTimes_Notification)(nil),                         // 78: CPlayer_LastPlayedTimes_Notification
	(*CPlayer_FriendNicknameChanged_Notification)(nil),                   // 79: CPlayer_FriendNicknameChanged_Notification
	(*CPlayer_FriendEquippedProfileItemsChanged_Notification)(nil),       // 80: CPlayer_FriendEquippedProfileItemsChanged_Notification
	(*CPlayer_NewSteamAnnouncementState_Notification)(nil),               // 81: CPlayer_NewSteamAnnouncementState_Notification
	(*CPlayer_CommunityPreferencesChanged_Notification)(nil),             // 82: CPlayer_CommunityPreferencesChanged_Notification
	(*CPlayer_PerFriendPreferencesChanged_Notification)(nil),             // 83: CPlayer_PerFriendPreferencesChanged_Notification
	(*CPlayer_PrivacySettingsChanged_Notification)(nil),                  // 84: CPlayer_PrivacySettingsChanged_Notification
	(*CPlayer_GetOwnedGames_Response_Game)(nil),                          // 85: CPlayer_GetOwnedGames_Response.Game
	(*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo)(nil),  // 86: CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	(*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo)(nil),      // 87: CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
	(*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime)(nil),       // 88: CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
	(*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo)(nil),       // 89: CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	(*CPlayer_GetGameBadgeLevels_Response_Badge)(nil),                    // 90: CPlayer_GetGameBadgeLevels_Response.Badge
	(*CPlayer_GetEmoticonList_Response_Emoticon)(nil),                    // 91: CPlayer_GetEmoticonList_Response.Emoticon
	(*CPlayer_GetAchievementsProgress_Response_AchievementProgress)(nil), // 92: CPlayer_GetAchievementsProgress_Response.AchievementProgress
	(*CPlayer_GetLastPlayedTimes_Response_Game)(nil),                     // 93: CPlayer_GetLastPlayedTimes_Response.Game
	(*CPlayer_GetNicknameList_Response_PlayerNickname)(nil),              // 94: CPlayer_GetNicknameList_Response.PlayerNickname
	(*NoResponse)(nil),      // 95: NoResponse
}
var file_steammessages_player_steamclient_proto_depIdxs = []int32{
	2,  // 0: CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists:type_name -> CPlayer_IncomingInviteMutualFriendList
	85, // 1: CPlayer_GetOwnedGames_Response.games:type_name -> CPlayer_GetOwnedGames_Response.Game
	87, // 2: CPlayer_GetFriendsGameplayInfo_Response.your_info:type_name -> CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
	86, // 3: CPlayer_GetFriendsGameplayInfo_Response.in_game:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	86, // 4: CPlayer_GetFriendsGameplayInfo_Response.played_recently:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	86, // 5: CPlayer_GetFriendsGameplayInfo_Response.played_ever:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	86, // 6: CPlayer_GetFriendsGameplayInfo_Response.owns:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	86, // 7: CPlayer_GetFriendsGameplayInfo_Response.in_wishlist:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	89, // 8: CPlayer_GetFriendsAppsActivity_Response.trending:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 9: CPlayer_GetFriendsAppsActivity_Response.recent_purchases:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 10: CPlayer_GetFriendsAppsActivity_Response.unowned:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 11: CPlayer_GetFriendsAppsActivity_Response.popular:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 12: CPlayer_GetFriendsAppsActivity_Response.dont_forget:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 13: CPlayer_GetFriendsAppsActivity_Response.being_discussed:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 14: CPlayer_GetFriendsAppsActivity_Response.new_to_group:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 15: CPlayer_GetFriendsAppsActivity_Response.returned_to_group:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	90, // 16: CPlayer_GetGameBadgeLevels_Response.badges:type_name -> CPlayer_GetGameBadgeLevels_Response.Badge
	15, // 17: CPlayer_GetProfileBackground_Response.profile_background:type_name -> ProfileItem
	15, // 18: CPlayer_GetMiniProfileBackground_Response.profile_background:type_name -> ProfileItem
	15, // 19: CPlayer_GetAvatarFrame_Response.avatar_frame:type_name -> ProfileItem
	15, // 20: CPlayer_GetAnimatedAvatar_Response.avatar:type_name -> ProfileItem
	15, // 21: CPlayer_GetProfileItemsOwned_Response.profile_backgrounds:type_name -> ProfileItem
	15, // 22: CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds:type_name -> ProfileItem
	15, // 23: CPlayer_GetProfileItemsOwned_Response.avatar_frames:type_name -> ProfileItem
	15, // 24: CPlayer_GetProfileItemsOwned_Response.animated_avatars:type_name -> ProfileItem
	15, // 25: CPlayer_GetProfileItemsOwned_Response.profile_modifiers:type_name -> ProfileItem
	15, // 26: CPlayer_GetProfileItemsEquipped_Response.profile_background:type_name -> ProfileItem
	15, // 27: CPlayer_GetProfileItemsEquipped_Response.mini_profile_background:type_name -> ProfileItem
	15, // 28: CPlayer_GetProfileItemsEquipped_Response.avatar_frame:type_name -> ProfileItem
	15, // 29: CPlayer_GetProfileItemsEquipped_Response.animated_avatar:type_name -> ProfileItem
	15, // 30: CPlayer_GetProfileItemsEquipped_Response.profile_modifier:type_name -> ProfileItem
	91, // 31: CPlayer_GetEmoticonList_Response.emoticons:type_name -> CPlayer_GetEmoticonList_Response.Emoticon
	92, // 32: CPlayer_GetAchievementsProgress_Response.achievement_progress:type_name -> CPlayer_GetAchievementsProgress_Response.AchievementProgress
	93, // 33: CPlayer_GetLastPlayedTimes_Response.games:type_name -> CPlayer_GetLastPlayedTimes_Response.Game
	94, // 34: CPlayer_GetNicknameList_Response.nicknames:type_name -> CPlayer_GetNicknameList_Response.PlayerNickname
	0,  // 35: PerFriendPreferences.notifications_showingame:type_name -> ENotificationSetting
	0,  // 36: PerFriendPreferences.notifications_showonline:type_name -> ENotificationSetting
	0,  // 37: PerFriendPreferences.notifications_showmessages:type_name -> ENotificationSetting
	0,  // 38: PerFriendPreferences.sounds_showingame:type_name -> ENotificationSetting
	0,  // 39: PerFriendPreferences.sounds_showonline:type_name -> ENotificationSetting
	0,  // 40: PerFriendPreferences.sounds_showmessages:type_name -> ENotificationSetting
	0,  // 41: PerFriendPreferences.notifications_sendmobile:type_name -> ENotificationSetting
	54, // 42: CPlayer_GetPerFriendPreferences_Response.preferences:type_name -> PerFriendPreferences
	54, // 43: CPlayer_SetPerFriendPreferences_Request.preferences:type_name -> PerFriendPreferences
	65, // 44: CPlayer_GetCommunityPreferences_Response.preferences:type_name -> CPlayer_CommunityPreferences
	65, // 45: CPlayer_SetCommunityPreferences_Request.preferences:type_name -> CPlayer_CommunityPreferences
	74, // 46: CPlayer_GetPrivacySettings_Response.privacy_settings:type_name -> CPrivacySettings
	93, // 47: CPlayer_LastPlayedTimes_Notification.games:type_name -> CPlayer_GetLastPlayedTimes_Response.Game
	65, // 48: CPlayer_CommunityPreferencesChanged_Notification.preferences:type_name -> CPlayer_CommunityPreferences
	54, // 49: CPlayer_PerFriendPreferencesChanged_Notification.preferences:type_name -> PerFriendPreferences
	74, // 50: CPlayer_PrivacySettingsChanged_Notification.privacy_settings:type_name -> CPrivacySettings
	88, // 51: CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.friends:type_name -> CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
	1,  // 52: Player.GetMutualFriendsForIncomingInvites:input_type -> CPlayer_GetMutualFriendsForIncomingInvites_Request
	4,  // 53: Player.GetOwnedGames:input_type -> CPlayer_GetOwnedGames_Request
	6,  // 54: Player.GetPlayNext:input_type -> CPlayer_GetPlayNext_Request
	8,  // 55: Player.GetFriendsGameplayInfo:input_type -> CPlayer_GetFriendsGameplayInfo_Request
	10, // 56: Player.GetFriendsAppsActivity:input_type -> CPlayer_GetFriendsAppsActivity_Request
	12, // 57: Player.GetGameBadgeLevels:input_type -> CPlayer_GetGameBadgeLevels_Request
	14, // 58: Player.GetProfileBackground:input_type -> CPlayer_GetProfileBackground_Request
	17, // 59: Player.SetProfileBackground:input_type -> CPlayer_SetProfileBackground_Request
	19, // 60: Player.GetMiniProfileBackground:input_type -> CPlayer_GetMiniProfileBackground_Request
	21, // 61: Player.SetMiniProfileBackground:input_type -> CPlayer_SetMiniProfileBackground_Request
	23, // 62: Player.GetAvatarFrame:input_type -> CPlayer_GetAvatarFrame_Request
	25, // 63: Player.SetAvatarFrame:input_type -> CPlayer_SetAvatarFrame_Request
	27, // 64: Player.GetAnimatedAvatar:input_type -> CPlayer_GetAnimatedAvatar_Request
	29, // 65: Player.SetAnimatedAvatar:input_type -> CPlayer_SetAnimatedAvatar_Request
	31, // 66: Player.GetProfileItemsOwned:input_type -> CPlayer_GetProfileItemsOwned_Request
	33, // 67: Player.GetProfileItemsEquipped:input_type -> CPlayer_GetProfileItemsEquipped_Request
	35, // 68: Player.SetEquippedProfileItemFlags:input_type -> CPlayer_SetEquippedProfileItemFlags_Request
	37, // 69: Player.GetEmoticonList:input_type -> CPlayer_GetEmoticonList_Request
	39, // 70: Player.GetAchievementsProgress:input_type -> CPlayer_GetAchievementsProgress_Request
	41, // 71: Player.PostStatusToFriends:input_type -> CPlayer_PostStatusToFriends_Request
	43, // 72: Player.GetPostedStatus:input_type -> CPlayer_GetPostedStatus_Request
	45, // 73: Player.DeletePostedStatus:input_type -> CPlayer_DeletePostedStatus_Request
	47, // 74: Player.ClientGetLastPlayedTimes:input_type -> CPlayer_GetLastPlayedTimes_Request
	49, // 75: Player.AcceptSSA:input_type -> CPlayer_AcceptSSA_Request
	51, // 76: Player.GetNicknameList:input_type -> CPlayer_GetNicknameList_Request
	53, // 77: Player.GetPerFriendPreferences:input_type -> CPlayer_GetPerFriendPreferences_Request
	56, // 78: Player.SetPerFriendPreferences:input_type -> CPlayer_SetPerFriendPreferences_Request
	58, // 79: Player.AddFriend:input_type -> CPlayer_AddFriend_Request
	60, // 80: Player.RemoveFriend:input_type -> CPlayer_RemoveFriend_Request
	62, // 81: Player.IgnoreFriend:input_type -> CPlayer_IgnoreFriend_Request
	64, // 82: Player.GetCommunityPreferences:input_type -> CPlayer_GetCommunityPreferences_Request
	67, // 83: Player.SetCommunityPreferences:input_type -> CPlayer_SetCommunityPreferences_Request
	69, // 84: Player.GetNewSteamAnnouncementState:input_type -> CPlayer_GetNewSteamAnnouncementState_Request
	71, // 85: Player.UpdateSteamAnnouncementLastRead:input_type -> CPlayer_UpdateSteamAnnouncementLastRead_Request
	73, // 86: Player.GetPrivacySettings:input_type -> CPlayer_GetPrivacySettings_Request
	76, // 87: Player.GetDurationControl:input_type -> CPlayer_GetDurationControl_Request
	78, // 88: PlayerClient.NotifyLastPlayedTimes:input_type -> CPlayer_LastPlayedTimes_Notification
	79, // 89: PlayerClient.NotifyFriendNicknameChanged:input_type -> CPlayer_FriendNicknameChanged_Notification
	80, // 90: PlayerClient.NotifyFriendEquippedProfileItemsChanged:input_type -> CPlayer_FriendEquippedProfileItemsChanged_Notification
	81, // 91: PlayerClient.NotifyNewSteamAnnouncementState:input_type -> CPlayer_NewSteamAnnouncementState_Notification
	82, // 92: PlayerClient.NotifyCommunityPreferencesChanged:input_type -> CPlayer_CommunityPreferencesChanged_Notification
	83, // 93: PlayerClient.NotifyPerFriendPreferencesChanged:input_type -> CPlayer_PerFriendPreferencesChanged_Notification
	84, // 94: PlayerClient.NotifyPrivacyPrivacySettingsChanged:input_type -> CPlayer_PrivacySettingsChanged_Notification
	3,  // 95: Player.GetMutualFriendsForIncomingInvites:output_type -> CPlayer_GetMutualFriendsForIncomingInvites_Response
	5,  // 96: Player.GetOwnedGames:output_type -> CPlayer_GetOwnedGames_Response
	7,  // 97: Player.GetPlayNext:output_type -> CPlayer_GetPlayNext_Response
	9,  // 98: Player.GetFriendsGameplayInfo:output_type -> CPlayer_GetFriendsGameplayInfo_Response
	11, // 99: Player.GetFriendsAppsActivity:output_type -> CPlayer_GetFriendsAppsActivity_Response
	13, // 100: Player.GetGameBadgeLevels:output_type -> CPlayer_GetGameBadgeLevels_Response
	16, // 101: Player.GetProfileBackground:output_type -> CPlayer_GetProfileBackground_Response
	18, // 102: Player.SetProfileBackground:output_type -> CPlayer_SetProfileBackground_Response
	20, // 103: Player.GetMiniProfileBackground:output_type -> CPlayer_GetMiniProfileBackground_Response
	22, // 104: Player.SetMiniProfileBackground:output_type -> CPlayer_SetMiniProfileBackground_Response
	24, // 105: Player.GetAvatarFrame:output_type -> CPlayer_GetAvatarFrame_Response
	26, // 106: Player.SetAvatarFrame:output_type -> CPlayer_SetAvatarFrame_Response
	28, // 107: Player.GetAnimatedAvatar:output_type -> CPlayer_GetAnimatedAvatar_Response
	30, // 108: Player.SetAnimatedAvatar:output_type -> CPlayer_SetAnimatedAvatar_Response
	32, // 109: Player.GetProfileItemsOwned:output_type -> CPlayer_GetProfileItemsOwned_Response
	34, // 110: Player.GetProfileItemsEquipped:output_type -> CPlayer_GetProfileItemsEquipped_Response
	36, // 111: Player.SetEquippedProfileItemFlags:output_type -> CPlayer_SetEquippedProfileItemFlags_Response
	38, // 112: Player.GetEmoticonList:output_type -> CPlayer_GetEmoticonList_Response
	40, // 113: Player.GetAchievementsProgress:output_type -> CPlayer_GetAchievementsProgress_Response
	42, // 114: Player.PostStatusToFriends:output_type -> CPlayer_PostStatusToFriends_Response
	44, // 115: Player.GetPostedStatus:output_type -> CPlayer_GetPostedStatus_Response
	46, // 116: Player.DeletePostedStatus:output_type -> CPlayer_DeletePostedStatus_Response
	48, // 117: Player.ClientGetLastPlayedTimes:output_type -> CPlayer_GetLastPlayedTimes_Response
	50, // 118: Player.AcceptSSA:output_type -> CPlayer_AcceptSSA_Response
	52, // 119: Player.GetNicknameList:output_type -> CPlayer_GetNicknameList_Response
	55, // 120: Player.GetPerFriendPreferences:output_type -> CPlayer_GetPerFriendPreferences_Response
	57, // 121: Player.SetPerFriendPreferences:output_type -> CPlayer_SetPerFriendPreferences_Response
	59, // 122: Player.AddFriend:output_type -> CPlayer_AddFriend_Response
	61, // 123: Player.RemoveFriend:output_type -> CPlayer_RemoveFriend_Response
	63, // 124: Player.IgnoreFriend:output_type -> CPlayer_IgnoreFriend_Response
	66, // 125: Player.GetCommunityPreferences:output_type -> CPlayer_GetCommunityPreferences_Response
	68, // 126: Player.SetCommunityPreferences:output_type -> CPlayer_SetCommunityPreferences_Response
	70, // 127: Player.GetNewSteamAnnouncementState:output_type -> CPlayer_GetNewSteamAnnouncementState_Response
	72, // 128: Player.UpdateSteamAnnouncementLastRead:output_type -> CPlayer_UpdateSteamAnnouncementLastRead_Response
	75, // 129: Player.GetPrivacySettings:output_type -> CPlayer_GetPrivacySettings_Response
	77, // 130: Player.GetDurationControl:output_type -> CPlayer_GetDurationControl_Response
	95, // 131: PlayerClient.NotifyLastPlayedTimes:output_type -> NoResponse
	95, // 132: PlayerClient.NotifyFriendNicknameChanged:output_type -> NoResponse
	95, // 133: PlayerClient.NotifyFriendEquippedProfileItemsChanged:output_type -> NoResponse
	95, // 134: PlayerClient.NotifyNewSteamAnnouncementState:output_type -> NoResponse
	95, // 135: PlayerClient.NotifyCommunityPreferencesChanged:output_type -> NoResponse
	95, // 136: PlayerClient.NotifyPerFriendPreferencesChanged:output_type -> NoResponse
	95, // 137: PlayerClient.NotifyPrivacyPrivacySettingsChanged:output_type -> NoResponse
	95, // [95:138] is the sub-list for method output_type
	52, // [52:95] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_steammessages_player_steamclient_proto_init() }
func file_steammessages_player_steamclient_proto_init() {
	if File_steammessages_player_steamclient_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_player_steamclient_proto_rawDesc), len(file_steammessages_player_steamclient_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   94,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_player_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_player_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_player_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_player_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_player_steamclient_proto = out.File
	file_steammessages_player_steamclient_proto_goTypes = nil
	file_steammessages_player_steamclient_proto_depIdxs = nil
}
