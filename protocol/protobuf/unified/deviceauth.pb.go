// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: steammessages_deviceauth.steamclient.proto

package unified

import (
	
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CDeviceAuth_GetOwnAuthorizedDevices_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeCanceled *bool                  `protobuf:"varint,2,opt,name=include_canceled,json=includeCanceled" json:"include_canceled,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) Reset() {
	*x = CDeviceAuth_GetOwnAuthorizedDevices_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetOwnAuthorizedDevices_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetOwnAuthorizedDevices_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetOwnAuthorizedDevices_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) GetIncludeCanceled() bool {
	if x != nil && x.IncludeCanceled != nil {
		return *x.IncludeCanceled
	}
	return false
}

type CDeviceAuth_GetOwnAuthorizedDevices_Response struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Devices       []*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response) Reset() {
	*x = CDeviceAuth_GetOwnAuthorizedDevices_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetOwnAuthorizedDevices_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetOwnAuthorizedDevices_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetOwnAuthorizedDevices_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response) GetDevices() []*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CDeviceAuth_AcceptAuthorizationRequest_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	AuthDeviceToken *uint64                `protobuf:"fixed64,2,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
	AuthCode        *uint64                `protobuf:"fixed64,3,opt,name=auth_code,json=authCode" json:"auth_code,omitempty"`
	FromSteamid     *uint64                `protobuf:"fixed64,4,opt,name=from_steamid,json=fromSteamid" json:"from_steamid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) Reset() {
	*x = CDeviceAuth_AcceptAuthorizationRequest_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AcceptAuthorizationRequest_Request) ProtoMessage() {}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AcceptAuthorizationRequest_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AcceptAuthorizationRequest_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) GetAuthCode() uint64 {
	if x != nil && x.AuthCode != nil {
		return *x.AuthCode
	}
	return 0
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) GetFromSteamid() uint64 {
	if x != nil && x.FromSteamid != nil {
		return *x.FromSteamid
	}
	return 0
}

type CDeviceAuth_AcceptAuthorizationRequest_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Response) Reset() {
	*x = CDeviceAuth_AcceptAuthorizationRequest_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AcceptAuthorizationRequest_Response) ProtoMessage() {}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AcceptAuthorizationRequest_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AcceptAuthorizationRequest_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{3}
}

type CDeviceAuth_AuthorizeRemoteDevice_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	AuthDeviceToken *uint64                `protobuf:"fixed64,2,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) Reset() {
	*x = CDeviceAuth_AuthorizeRemoteDevice_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AuthorizeRemoteDevice_Request) ProtoMessage() {}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AuthorizeRemoteDevice_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AuthorizeRemoteDevice_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

type CDeviceAuth_AuthorizeRemoteDevice_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Response) Reset() {
	*x = CDeviceAuth_AuthorizeRemoteDevice_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AuthorizeRemoteDevice_Response) ProtoMessage() {}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AuthorizeRemoteDevice_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AuthorizeRemoteDevice_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{5}
}

type CDeviceAuth_DeauthorizeRemoteDevice_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	AuthDeviceToken *uint64                `protobuf:"fixed64,2,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) Reset() {
	*x = CDeviceAuth_DeauthorizeRemoteDevice_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_DeauthorizeRemoteDevice_Request) ProtoMessage() {}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_DeauthorizeRemoteDevice_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_DeauthorizeRemoteDevice_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

type CDeviceAuth_DeauthorizeRemoteDevice_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Response) Reset() {
	*x = CDeviceAuth_DeauthorizeRemoteDevice_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_DeauthorizeRemoteDevice_Response) ProtoMessage() {}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_DeauthorizeRemoteDevice_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_DeauthorizeRemoteDevice_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{7}
}

type CDeviceAuth_GetUsedAuthorizedDevices_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Request) Reset() {
	*x = CDeviceAuth_GetUsedAuthorizedDevices_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetUsedAuthorizedDevices_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetUsedAuthorizedDevices_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetUsedAuthorizedDevices_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CDeviceAuth_GetUsedAuthorizedDevices_Response struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	Devices       []*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response) Reset() {
	*x = CDeviceAuth_GetUsedAuthorizedDevices_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetUsedAuthorizedDevices_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetUsedAuthorizedDevices_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetUsedAuthorizedDevices_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response) GetDevices() []*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CDeviceAuth_GetAuthorizedBorrowers_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeCanceled *bool                  `protobuf:"varint,2,opt,name=include_canceled,json=includeCanceled" json:"include_canceled,omitempty"`
	IncludePending  *bool                  `protobuf:"varint,3,opt,name=include_pending,json=includePending" json:"include_pending,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) Reset() {
	*x = CDeviceAuth_GetAuthorizedBorrowers_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedBorrowers_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedBorrowers_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedBorrowers_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) GetIncludeCanceled() bool {
	if x != nil && x.IncludeCanceled != nil {
		return *x.IncludeCanceled
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) GetIncludePending() bool {
	if x != nil && x.IncludePending != nil {
		return *x.IncludePending
	}
	return false
}

type CDeviceAuth_GetAuthorizedBorrowers_Response struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	Borrowers     []*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower `protobuf:"bytes,1,rep,name=borrowers" json:"borrowers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response) Reset() {
	*x = CDeviceAuth_GetAuthorizedBorrowers_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedBorrowers_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedBorrowers_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedBorrowers_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response) GetBorrowers() []*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower {
	if x != nil {
		return x.Borrowers
	}
	return nil
}

type CDeviceAuth_AddAuthorizedBorrowers_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	SteamidBorrower []uint64               `protobuf:"fixed64,2,rep,name=steamid_borrower,json=steamidBorrower" json:"steamid_borrower,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) Reset() {
	*x = CDeviceAuth_AddAuthorizedBorrowers_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AddAuthorizedBorrowers_Request) ProtoMessage() {}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AddAuthorizedBorrowers_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AddAuthorizedBorrowers_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) GetSteamidBorrower() []uint64 {
	if x != nil {
		return x.SteamidBorrower
	}
	return nil
}

type CDeviceAuth_AddAuthorizedBorrowers_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SecondsToWait *int32                 `protobuf:"varint,1,opt,name=seconds_to_wait,json=secondsToWait" json:"seconds_to_wait,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Response) Reset() {
	*x = CDeviceAuth_AddAuthorizedBorrowers_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AddAuthorizedBorrowers_Response) ProtoMessage() {}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AddAuthorizedBorrowers_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AddAuthorizedBorrowers_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Response) GetSecondsToWait() int32 {
	if x != nil && x.SecondsToWait != nil {
		return *x.SecondsToWait
	}
	return 0
}

type CDeviceAuth_RemoveAuthorizedBorrowers_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	SteamidBorrower []uint64               `protobuf:"fixed64,2,rep,name=steamid_borrower,json=steamidBorrower" json:"steamid_borrower,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) Reset() {
	*x = CDeviceAuth_RemoveAuthorizedBorrowers_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_RemoveAuthorizedBorrowers_Request) ProtoMessage() {}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_RemoveAuthorizedBorrowers_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_RemoveAuthorizedBorrowers_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) GetSteamidBorrower() []uint64 {
	if x != nil {
		return x.SteamidBorrower
	}
	return nil
}

type CDeviceAuth_RemoveAuthorizedBorrowers_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Response) Reset() {
	*x = CDeviceAuth_RemoveAuthorizedBorrowers_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_RemoveAuthorizedBorrowers_Response) ProtoMessage() {}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_RemoveAuthorizedBorrowers_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_RemoveAuthorizedBorrowers_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{15}
}

type CDeviceAuth_GetAuthorizedAsBorrower_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeCanceled *bool                  `protobuf:"varint,2,opt,name=include_canceled,json=includeCanceled" json:"include_canceled,omitempty"`
	IncludePending  *bool                  `protobuf:"varint,3,opt,name=include_pending,json=includePending" json:"include_pending,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) Reset() {
	*x = CDeviceAuth_GetAuthorizedAsBorrower_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedAsBorrower_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedAsBorrower_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedAsBorrower_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) GetIncludeCanceled() bool {
	if x != nil && x.IncludeCanceled != nil {
		return *x.IncludeCanceled
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) GetIncludePending() bool {
	if x != nil && x.IncludePending != nil {
		return *x.IncludePending
	}
	return false
}

type CDeviceAuth_GetAuthorizedAsBorrower_Response struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Lenders       []*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender `protobuf:"bytes,1,rep,name=lenders" json:"lenders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response) Reset() {
	*x = CDeviceAuth_GetAuthorizedAsBorrower_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedAsBorrower_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedAsBorrower_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedAsBorrower_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response) GetLenders() []*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender {
	if x != nil {
		return x.Lenders
	}
	return nil
}

type CDeviceAuth_GetExcludedGamesInLibrary_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Request) Reset() {
	*x = CDeviceAuth_GetExcludedGamesInLibrary_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetExcludedGamesInLibrary_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetExcludedGamesInLibrary_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetExcludedGamesInLibrary_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CDeviceAuth_GetExcludedGamesInLibrary_Response struct {
	state         protoimpl.MessageState                                         `protogen:"open.v1"`
	ExcludedGames []*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame `protobuf:"bytes,1,rep,name=excluded_games,json=excludedGames" json:"excluded_games,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response) Reset() {
	*x = CDeviceAuth_GetExcludedGamesInLibrary_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetExcludedGamesInLibrary_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetExcludedGamesInLibrary_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetExcludedGamesInLibrary_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response) GetExcludedGames() []*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame {
	if x != nil {
		return x.ExcludedGames
	}
	return nil
}

type CDeviceAuth_GetBorrowerPlayHistory_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Request) Reset() {
	*x = CDeviceAuth_GetBorrowerPlayHistory_Request{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetBorrowerPlayHistory_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetBorrowerPlayHistory_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetBorrowerPlayHistory_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CDeviceAuth_GetBorrowerPlayHistory_Response struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	LenderHistory []*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory `protobuf:"bytes,1,rep,name=lender_history,json=lenderHistory" json:"lender_history,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response) Reset() {
	*x = CDeviceAuth_GetBorrowerPlayHistory_Response{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetBorrowerPlayHistory_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetBorrowerPlayHistory_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetBorrowerPlayHistory_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response) GetLenderHistory() []*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory {
	if x != nil {
		return x.LenderHistory
	}
	return nil
}

type CDeviceAuth_GetOwnAuthorizedDevices_Response_Device struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AuthDeviceToken *uint64                `protobuf:"fixed64,1,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
	DeviceName      *string                `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	IsPending       *bool                  `protobuf:"varint,3,opt,name=is_pending,json=isPending" json:"is_pending,omitempty"`
	IsCanceled      *bool                  `protobuf:"varint,4,opt,name=is_canceled,json=isCanceled" json:"is_canceled,omitempty"`
	LastTimeUsed    *uint32                `protobuf:"varint,5,opt,name=last_time_used,json=lastTimeUsed" json:"last_time_used,omitempty"`
	LastBorrowerId  *uint64                `protobuf:"fixed64,6,opt,name=last_borrower_id,json=lastBorrowerId" json:"last_borrower_id,omitempty"`
	LastAppPlayed   *uint32                `protobuf:"varint,7,opt,name=last_app_played,json=lastAppPlayed" json:"last_app_played,omitempty"`
	IsLimited       *bool                  `protobuf:"varint,8,opt,name=is_limited,json=isLimited" json:"is_limited,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) Reset() {
	*x = CDeviceAuth_GetOwnAuthorizedDevices_Response_Device{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) ProtoMessage() {}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetOwnAuthorizedDevices_Response_Device.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetIsPending() bool {
	if x != nil && x.IsPending != nil {
		return *x.IsPending
	}
	return false
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetIsCanceled() bool {
	if x != nil && x.IsCanceled != nil {
		return *x.IsCanceled
	}
	return false
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetLastTimeUsed() uint32 {
	if x != nil && x.LastTimeUsed != nil {
		return *x.LastTimeUsed
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetLastBorrowerId() uint64 {
	if x != nil && x.LastBorrowerId != nil {
		return *x.LastBorrowerId
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetLastAppPlayed() uint32 {
	if x != nil && x.LastAppPlayed != nil {
		return *x.LastAppPlayed
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetIsLimited() bool {
	if x != nil && x.IsLimited != nil {
		return *x.IsLimited
	}
	return false
}

type CDeviceAuth_GetUsedAuthorizedDevices_Response_Device struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AuthDeviceToken *uint64                `protobuf:"fixed64,1,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
	DeviceName      *string                `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	OwnerSteamid    *uint64                `protobuf:"fixed64,3,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
	LastTimeUsed    *uint32                `protobuf:"varint,4,opt,name=last_time_used,json=lastTimeUsed" json:"last_time_used,omitempty"`
	LastAppPlayed   *uint32                `protobuf:"varint,5,opt,name=last_app_played,json=lastAppPlayed" json:"last_app_played,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) Reset() {
	*x = CDeviceAuth_GetUsedAuthorizedDevices_Response_Device{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) ProtoMessage() {}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetUsedAuthorizedDevices_Response_Device.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetLastTimeUsed() uint32 {
	if x != nil && x.LastTimeUsed != nil {
		return *x.LastTimeUsed
	}
	return 0
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetLastAppPlayed() uint32 {
	if x != nil && x.LastAppPlayed != nil {
		return *x.LastAppPlayed
	}
	return 0
}

type CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	IsPending     *bool                  `protobuf:"varint,2,opt,name=is_pending,json=isPending" json:"is_pending,omitempty"`
	IsCanceled    *bool                  `protobuf:"varint,3,opt,name=is_canceled,json=isCanceled" json:"is_canceled,omitempty"`
	TimeCreated   *uint32                `protobuf:"varint,4,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) Reset() {
	*x = CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) GetIsPending() bool {
	if x != nil && x.IsPending != nil {
		return *x.IsPending
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) GetIsCanceled() bool {
	if x != nil && x.IsCanceled != nil {
		return *x.IsCanceled
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

type CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	TimeCreated   *uint32                `protobuf:"varint,2,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	IsPending     *bool                  `protobuf:"varint,3,opt,name=is_pending,json=isPending" json:"is_pending,omitempty"`
	IsCanceled    *bool                  `protobuf:"varint,4,opt,name=is_canceled,json=isCanceled" json:"is_canceled,omitempty"`
	IsUsed        *bool                  `protobuf:"varint,5,opt,name=is_used,json=isUsed" json:"is_used,omitempty"`
	TimeRemoved   *uint32                `protobuf:"varint,6,opt,name=time_removed,json=timeRemoved" json:"time_removed,omitempty"`
	TimeFirst     *uint32                `protobuf:"varint,7,opt,name=time_first,json=timeFirst" json:"time_first,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) Reset() {
	*x = CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetIsPending() bool {
	if x != nil && x.IsPending != nil {
		return *x.IsPending
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetIsCanceled() bool {
	if x != nil && x.IsCanceled != nil {
		return *x.IsCanceled
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetIsUsed() bool {
	if x != nil && x.IsUsed != nil {
		return *x.IsUsed
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetTimeRemoved() uint32 {
	if x != nil && x.TimeRemoved != nil {
		return *x.TimeRemoved
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetTimeFirst() uint32 {
	if x != nil && x.TimeFirst != nil {
		return *x.TimeFirst
	}
	return 0
}

type CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	GameName        *string                `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	VacBanned       *bool                  `protobuf:"varint,3,opt,name=vac_banned,json=vacBanned" json:"vac_banned,omitempty"`
	PackageExcluded *bool                  `protobuf:"varint,4,opt,name=package_excluded,json=packageExcluded" json:"package_excluded,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) Reset() {
	*x = CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) ProtoMessage() {}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) GetVacBanned() bool {
	if x != nil && x.VacBanned != nil {
		return *x.VacBanned
	}
	return false
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) GetPackageExcluded() bool {
	if x != nil && x.PackageExcluded != nil {
		return *x.PackageExcluded
	}
	return false
}

type CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	TimeLast      *uint32                `protobuf:"varint,2,opt,name=time_last,json=timeLast" json:"time_last,omitempty"`
	TimeTotal     *uint32                `protobuf:"varint,3,opt,name=time_total,json=timeTotal" json:"time_total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) Reset() {
	*x = CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) ProtoMessage() {}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) GetTimeLast() uint32 {
	if x != nil && x.TimeLast != nil {
		return *x.TimeLast
	}
	return 0
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) GetTimeTotal() uint32 {
	if x != nil && x.TimeTotal != nil {
		return *x.TimeTotal
	}
	return 0
}

type CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	Steamid       *uint64                                                    `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	GameHistory   []*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory `protobuf:"bytes,2,rep,name=game_history,json=gameHistory" json:"game_history,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) Reset() {
	*x = CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory{}
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) ProtoMessage() {}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_deviceauth_steamclient_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) Descriptor() ([]byte, []int) {
	return file_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{21, 1}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) GetGameHistory() []*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory {
	if x != nil {
		return x.GameHistory
	}
	return nil
}

var File_steammessages_deviceauth_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_deviceauth_steamclient_proto_rawDesc = "" +
	"\n" +
	"*steammessages_deviceauth.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"r\n" +
	"+CDeviceAuth_GetOwnAuthorizedDevices_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12)\n" +
	"\x10include_canceled\x18\x02 \x01(\bR\x0fincludeCanceled\"\xad\x03\n" +
	",CDeviceAuth_GetOwnAuthorizedDevices_Response\x12N\n" +
	"\adevices\x18\x01 \x03(\v24.CDeviceAuth_GetOwnAuthorizedDevices_Response.DeviceR\adevices\x1a\xac\x02\n" +
	"\x06Device\x12*\n" +
	"\x11auth_device_token\x18\x01 \x01(\x06R\x0fauthDeviceToken\x12\x1f\n" +
	"\vdevice_name\x18\x02 \x01(\tR\n" +
	"deviceName\x12\x1d\n" +
	"\n" +
	"is_pending\x18\x03 \x01(\bR\tisPending\x12\x1f\n" +
	"\vis_canceled\x18\x04 \x01(\bR\n" +
	"isCanceled\x12$\n" +
	"\x0elast_time_used\x18\x05 \x01(\rR\flastTimeUsed\x12(\n" +
	"\x10last_borrower_id\x18\x06 \x01(\x06R\x0elastBorrowerId\x12&\n" +
	"\x0flast_app_played\x18\a \x01(\rR\rlastAppPlayed\x12\x1d\n" +
	"\n" +
	"is_limited\x18\b \x01(\bR\tisLimited\"\xb6\x01\n" +
	".CDeviceAuth_AcceptAuthorizationRequest_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12*\n" +
	"\x11auth_device_token\x18\x02 \x01(\x06R\x0fauthDeviceToken\x12\x1b\n" +
	"\tauth_code\x18\x03 \x01(\x06R\bauthCode\x12!\n" +
	"\ffrom_steamid\x18\x04 \x01(\x06R\vfromSteamid\"1\n" +
	"/CDeviceAuth_AcceptAuthorizationRequest_Response\"q\n" +
	")CDeviceAuth_AuthorizeRemoteDevice_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12*\n" +
	"\x11auth_device_token\x18\x02 \x01(\x06R\x0fauthDeviceToken\",\n" +
	"*CDeviceAuth_AuthorizeRemoteDevice_Response\"s\n" +
	"+CDeviceAuth_DeauthorizeRemoteDevice_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12*\n" +
	"\x11auth_device_token\x18\x02 \x01(\x06R\x0fauthDeviceToken\".\n" +
	",CDeviceAuth_DeauthorizeRemoteDevice_Response\"H\n" +
	",CDeviceAuth_GetUsedAuthorizedDevices_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\"\xcb\x02\n" +
	"-CDeviceAuth_GetUsedAuthorizedDevices_Response\x12O\n" +
	"\adevices\x18\x01 \x03(\v25.CDeviceAuth_GetUsedAuthorizedDevices_Response.DeviceR\adevices\x1a\xc8\x01\n" +
	"\x06Device\x12*\n" +
	"\x11auth_device_token\x18\x01 \x01(\x06R\x0fauthDeviceToken\x12\x1f\n" +
	"\vdevice_name\x18\x02 \x01(\tR\n" +
	"deviceName\x12#\n" +
	"\rowner_steamid\x18\x03 \x01(\x06R\fownerSteamid\x12$\n" +
	"\x0elast_time_used\x18\x04 \x01(\rR\flastTimeUsed\x12&\n" +
	"\x0flast_app_played\x18\x05 \x01(\rR\rlastAppPlayed\"\x9a\x01\n" +
	"*CDeviceAuth_GetAuthorizedBorrowers_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12)\n" +
	"\x10include_canceled\x18\x02 \x01(\bR\x0fincludeCanceled\x12'\n" +
	"\x0finclude_pending\x18\x03 \x01(\bR\x0eincludePending\"\x8c\x02\n" +
	"+CDeviceAuth_GetAuthorizedBorrowers_Response\x12S\n" +
	"\tborrowers\x18\x01 \x03(\v25.CDeviceAuth_GetAuthorizedBorrowers_Response.BorrowerR\tborrowers\x1a\x87\x01\n" +
	"\bBorrower\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x1d\n" +
	"\n" +
	"is_pending\x18\x02 \x01(\bR\tisPending\x12\x1f\n" +
	"\vis_canceled\x18\x03 \x01(\bR\n" +
	"isCanceled\x12!\n" +
	"\ftime_created\x18\x04 \x01(\rR\vtimeCreated\"q\n" +
	"*CDeviceAuth_AddAuthorizedBorrowers_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12)\n" +
	"\x10steamid_borrower\x18\x02 \x03(\x06R\x0fsteamidBorrower\"U\n" +
	"+CDeviceAuth_AddAuthorizedBorrowers_Response\x12&\n" +
	"\x0fseconds_to_wait\x18\x01 \x01(\x05R\rsecondsToWait\"t\n" +
	"-CDeviceAuth_RemoveAuthorizedBorrowers_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12)\n" +
	"\x10steamid_borrower\x18\x02 \x03(\x06R\x0fsteamidBorrower\"0\n" +
	".CDeviceAuth_RemoveAuthorizedBorrowers_Response\"\x9b\x01\n" +
	"+CDeviceAuth_GetAuthorizedAsBorrower_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12)\n" +
	"\x10include_canceled\x18\x02 \x01(\bR\x0fincludeCanceled\x12'\n" +
	"\x0finclude_pending\x18\x03 \x01(\bR\x0eincludePending\"\xe1\x02\n" +
	",CDeviceAuth_GetAuthorizedAsBorrower_Response\x12N\n" +
	"\alenders\x18\x01 \x03(\v24.CDeviceAuth_GetAuthorizedAsBorrower_Response.LenderR\alenders\x1a\xe0\x01\n" +
	"\x06Lender\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\ftime_created\x18\x02 \x01(\rR\vtimeCreated\x12\x1d\n" +
	"\n" +
	"is_pending\x18\x03 \x01(\bR\tisPending\x12\x1f\n" +
	"\vis_canceled\x18\x04 \x01(\bR\n" +
	"isCanceled\x12\x17\n" +
	"\ais_used\x18\x05 \x01(\bR\x06isUsed\x12!\n" +
	"\ftime_removed\x18\x06 \x01(\rR\vtimeRemoved\x12\x1d\n" +
	"\n" +
	"time_first\x18\a \x01(\rR\ttimeFirst\"I\n" +
	"-CDeviceAuth_GetExcludedGamesInLibrary_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\"\xa3\x02\n" +
	".CDeviceAuth_GetExcludedGamesInLibrary_Response\x12c\n" +
	"\x0eexcluded_games\x18\x01 \x03(\v2<.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGameR\rexcludedGames\x1a\x8b\x01\n" +
	"\fExcludedGame\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x1b\n" +
	"\tgame_name\x18\x02 \x01(\tR\bgameName\x12\x1d\n" +
	"\n" +
	"vac_banned\x18\x03 \x01(\bR\tvacBanned\x12)\n" +
	"\x10package_excluded\x18\x04 \x01(\bR\x0fpackageExcluded\"\\\n" +
	"*CDeviceAuth_GetBorrowerPlayHistory_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\"\xfa\x02\n" +
	"+CDeviceAuth_GetBorrowerPlayHistory_Response\x12a\n" +
	"\x0elender_history\x18\x01 \x03(\v2:.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistoryR\rlenderHistory\x1a_\n" +
	"\vGameHistory\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x1b\n" +
	"\ttime_last\x18\x02 \x01(\rR\btimeLast\x12\x1d\n" +
	"\n" +
	"time_total\x18\x03 \x01(\rR\ttimeTotal\x1a\x86\x01\n" +
	"\rLenderHistory\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12[\n" +
	"\fgame_history\x18\x02 \x03(\v28.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistoryR\vgameHistory2\xbd\n" +
	"\n" +
	"\n" +
	"DeviceAuth\x12v\n" +
	"\x17GetOwnAuthorizedDevices\x12,.CDeviceAuth_GetOwnAuthorizedDevices_Request\x1a-.CDeviceAuth_GetOwnAuthorizedDevices_Response\x12\x7f\n" +
	"\x1aAcceptAuthorizationRequest\x12/.CDeviceAuth_AcceptAuthorizationRequest_Request\x1a0.CDeviceAuth_AcceptAuthorizationRequest_Response\x12p\n" +
	"\x15AuthorizeRemoteDevice\x12*.CDeviceAuth_AuthorizeRemoteDevice_Request\x1a+.CDeviceAuth_AuthorizeRemoteDevice_Response\x12v\n" +
	"\x17DeauthorizeRemoteDevice\x12,.CDeviceAuth_DeauthorizeRemoteDevice_Request\x1a-.CDeviceAuth_DeauthorizeRemoteDevice_Response\x12y\n" +
	"\x18GetUsedAuthorizedDevices\x12-.CDeviceAuth_GetUsedAuthorizedDevices_Request\x1a..CDeviceAuth_GetUsedAuthorizedDevices_Response\x12s\n" +
	"\x16GetAuthorizedBorrowers\x12+.CDeviceAuth_GetAuthorizedBorrowers_Request\x1a,.CDeviceAuth_GetAuthorizedBorrowers_Response\x12s\n" +
	"\x16AddAuthorizedBorrowers\x12+.CDeviceAuth_AddAuthorizedBorrowers_Request\x1a,.CDeviceAuth_AddAuthorizedBorrowers_Response\x12|\n" +
	"\x19RemoveAuthorizedBorrowers\x12..CDeviceAuth_RemoveAuthorizedBorrowers_Request\x1a/.CDeviceAuth_RemoveAuthorizedBorrowers_Response\x12v\n" +
	"\x17GetAuthorizedAsBorrower\x12,.CDeviceAuth_GetAuthorizedAsBorrower_Request\x1a-.CDeviceAuth_GetAuthorizedAsBorrower_Response\x12|\n" +
	"\x19GetExcludedGamesInLibrary\x12..CDeviceAuth_GetExcludedGamesInLibrary_Request\x1a/.CDeviceAuth_GetExcludedGamesInLibrary_Response\x12s\n" +
	"\x16GetBorrowerPlayHistory\x12+.CDeviceAuth_GetBorrowerPlayHistory_Request\x1a,.CDeviceAuth_GetBorrowerPlayHistory_ResponseB5Z0github.com/koteesy/go-steam/v3/protocol/protobuf\x80\x01\x01"

var (
	file_steammessages_deviceauth_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_deviceauth_steamclient_proto_rawDescData []byte
)

func file_steammessages_deviceauth_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_deviceauth_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_deviceauth_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_deviceauth_steamclient_proto_rawDesc), len(file_steammessages_deviceauth_steamclient_proto_rawDesc)))
	})
	return file_steammessages_deviceauth_steamclient_proto_rawDescData
}

var file_steammessages_deviceauth_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_steammessages_deviceauth_steamclient_proto_goTypes = []any{
	(*CDeviceAuth_GetOwnAuthorizedDevices_Request)(nil),                 // 0: CDeviceAuth_GetOwnAuthorizedDevices_Request
	(*CDeviceAuth_GetOwnAuthorizedDevices_Response)(nil),                // 1: CDeviceAuth_GetOwnAuthorizedDevices_Response
	(*CDeviceAuth_AcceptAuthorizationRequest_Request)(nil),              // 2: CDeviceAuth_AcceptAuthorizationRequest_Request
	(*CDeviceAuth_AcceptAuthorizationRequest_Response)(nil),             // 3: CDeviceAuth_AcceptAuthorizationRequest_Response
	(*CDeviceAuth_AuthorizeRemoteDevice_Request)(nil),                   // 4: CDeviceAuth_AuthorizeRemoteDevice_Request
	(*CDeviceAuth_AuthorizeRemoteDevice_Response)(nil),                  // 5: CDeviceAuth_AuthorizeRemoteDevice_Response
	(*CDeviceAuth_DeauthorizeRemoteDevice_Request)(nil),                 // 6: CDeviceAuth_DeauthorizeRemoteDevice_Request
	(*CDeviceAuth_DeauthorizeRemoteDevice_Response)(nil),                // 7: CDeviceAuth_DeauthorizeRemoteDevice_Response
	(*CDeviceAuth_GetUsedAuthorizedDevices_Request)(nil),                // 8: CDeviceAuth_GetUsedAuthorizedDevices_Request
	(*CDeviceAuth_GetUsedAuthorizedDevices_Response)(nil),               // 9: CDeviceAuth_GetUsedAuthorizedDevices_Response
	(*CDeviceAuth_GetAuthorizedBorrowers_Request)(nil),                  // 10: CDeviceAuth_GetAuthorizedBorrowers_Request
	(*CDeviceAuth_GetAuthorizedBorrowers_Response)(nil),                 // 11: CDeviceAuth_GetAuthorizedBorrowers_Response
	(*CDeviceAuth_AddAuthorizedBorrowers_Request)(nil),                  // 12: CDeviceAuth_AddAuthorizedBorrowers_Request
	(*CDeviceAuth_AddAuthorizedBorrowers_Response)(nil),                 // 13: CDeviceAuth_AddAuthorizedBorrowers_Response
	(*CDeviceAuth_RemoveAuthorizedBorrowers_Request)(nil),               // 14: CDeviceAuth_RemoveAuthorizedBorrowers_Request
	(*CDeviceAuth_RemoveAuthorizedBorrowers_Response)(nil),              // 15: CDeviceAuth_RemoveAuthorizedBorrowers_Response
	(*CDeviceAuth_GetAuthorizedAsBorrower_Request)(nil),                 // 16: CDeviceAuth_GetAuthorizedAsBorrower_Request
	(*CDeviceAuth_GetAuthorizedAsBorrower_Response)(nil),                // 17: CDeviceAuth_GetAuthorizedAsBorrower_Response
	(*CDeviceAuth_GetExcludedGamesInLibrary_Request)(nil),               // 18: CDeviceAuth_GetExcludedGamesInLibrary_Request
	(*CDeviceAuth_GetExcludedGamesInLibrary_Response)(nil),              // 19: CDeviceAuth_GetExcludedGamesInLibrary_Response
	(*CDeviceAuth_GetBorrowerPlayHistory_Request)(nil),                  // 20: CDeviceAuth_GetBorrowerPlayHistory_Request
	(*CDeviceAuth_GetBorrowerPlayHistory_Response)(nil),                 // 21: CDeviceAuth_GetBorrowerPlayHistory_Response
	(*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device)(nil),         // 22: CDeviceAuth_GetOwnAuthorizedDevices_Response.Device
	(*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device)(nil),        // 23: CDeviceAuth_GetUsedAuthorizedDevices_Response.Device
	(*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower)(nil),        // 24: CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower
	(*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender)(nil),         // 25: CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender
	(*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame)(nil), // 26: CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame
	(*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory)(nil),     // 27: CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory
	(*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory)(nil),   // 28: CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory
}
var file_steammessages_deviceauth_steamclient_proto_depIdxs = []int32{
	22, // 0: CDeviceAuth_GetOwnAuthorizedDevices_Response.devices:type_name -> CDeviceAuth_GetOwnAuthorizedDevices_Response.Device
	23, // 1: CDeviceAuth_GetUsedAuthorizedDevices_Response.devices:type_name -> CDeviceAuth_GetUsedAuthorizedDevices_Response.Device
	24, // 2: CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers:type_name -> CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower
	25, // 3: CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders:type_name -> CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender
	26, // 4: CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games:type_name -> CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame
	28, // 5: CDeviceAuth_GetBorrowerPlayHistory_Response.lender_history:type_name -> CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory
	27, // 6: CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.game_history:type_name -> CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory
	0,  // 7: DeviceAuth.GetOwnAuthorizedDevices:input_type -> CDeviceAuth_GetOwnAuthorizedDevices_Request
	2,  // 8: DeviceAuth.AcceptAuthorizationRequest:input_type -> CDeviceAuth_AcceptAuthorizationRequest_Request
	4,  // 9: DeviceAuth.AuthorizeRemoteDevice:input_type -> CDeviceAuth_AuthorizeRemoteDevice_Request
	6,  // 10: DeviceAuth.DeauthorizeRemoteDevice:input_type -> CDeviceAuth_DeauthorizeRemoteDevice_Request
	8,  // 11: DeviceAuth.GetUsedAuthorizedDevices:input_type -> CDeviceAuth_GetUsedAuthorizedDevices_Request
	10, // 12: DeviceAuth.GetAuthorizedBorrowers:input_type -> CDeviceAuth_GetAuthorizedBorrowers_Request
	12, // 13: DeviceAuth.AddAuthorizedBorrowers:input_type -> CDeviceAuth_AddAuthorizedBorrowers_Request
	14, // 14: DeviceAuth.RemoveAuthorizedBorrowers:input_type -> CDeviceAuth_RemoveAuthorizedBorrowers_Request
	16, // 15: DeviceAuth.GetAuthorizedAsBorrower:input_type -> CDeviceAuth_GetAuthorizedAsBorrower_Request
	18, // 16: DeviceAuth.GetExcludedGamesInLibrary:input_type -> CDeviceAuth_GetExcludedGamesInLibrary_Request
	20, // 17: DeviceAuth.GetBorrowerPlayHistory:input_type -> CDeviceAuth_GetBorrowerPlayHistory_Request
	1,  // 18: DeviceAuth.GetOwnAuthorizedDevices:output_type -> CDeviceAuth_GetOwnAuthorizedDevices_Response
	3,  // 19: DeviceAuth.AcceptAuthorizationRequest:output_type -> CDeviceAuth_AcceptAuthorizationRequest_Response
	5,  // 20: DeviceAuth.AuthorizeRemoteDevice:output_type -> CDeviceAuth_AuthorizeRemoteDevice_Response
	7,  // 21: DeviceAuth.DeauthorizeRemoteDevice:output_type -> CDeviceAuth_DeauthorizeRemoteDevice_Response
	9,  // 22: DeviceAuth.GetUsedAuthorizedDevices:output_type -> CDeviceAuth_GetUsedAuthorizedDevices_Response
	11, // 23: DeviceAuth.GetAuthorizedBorrowers:output_type -> CDeviceAuth_GetAuthorizedBorrowers_Response
	13, // 24: DeviceAuth.AddAuthorizedBorrowers:output_type -> CDeviceAuth_AddAuthorizedBorrowers_Response
	15, // 25: DeviceAuth.RemoveAuthorizedBorrowers:output_type -> CDeviceAuth_RemoveAuthorizedBorrowers_Response
	17, // 26: DeviceAuth.GetAuthorizedAsBorrower:output_type -> CDeviceAuth_GetAuthorizedAsBorrower_Response
	19, // 27: DeviceAuth.GetExcludedGamesInLibrary:output_type -> CDeviceAuth_GetExcludedGamesInLibrary_Response
	21, // 28: DeviceAuth.GetBorrowerPlayHistory:output_type -> CDeviceAuth_GetBorrowerPlayHistory_Response
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steammessages_deviceauth_steamclient_proto_init() }
func file_steammessages_deviceauth_steamclient_proto_init() {
	if File_steammessages_deviceauth_steamclient_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_deviceauth_steamclient_proto_rawDesc), len(file_steammessages_deviceauth_steamclient_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_deviceauth_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_deviceauth_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_deviceauth_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_deviceauth_steamclient_proto = out.File
	file_steammessages_deviceauth_steamclient_proto_goTypes = nil
	file_steammessages_deviceauth_steamclient_proto_depIdxs = nil
}
