// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: steammessages_cloud.steamclient.proto

package unified

import (
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CCloud_GetUploadServerInfo_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetUploadServerInfo_Request) Reset() {
	*x = CCloud_GetUploadServerInfo_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetUploadServerInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetUploadServerInfo_Request) ProtoMessage() {}

func (x *CCloud_GetUploadServerInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetUploadServerInfo_Request.ProtoReflect.Descriptor instead.
func (*CCloud_GetUploadServerInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CCloud_GetUploadServerInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloud_GetUploadServerInfo_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerUrl     *string                `protobuf:"bytes,1,opt,name=server_url,json=serverUrl" json:"server_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetUploadServerInfo_Response) Reset() {
	*x = CCloud_GetUploadServerInfo_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetUploadServerInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetUploadServerInfo_Response) ProtoMessage() {}

func (x *CCloud_GetUploadServerInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetUploadServerInfo_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetUploadServerInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CCloud_GetUploadServerInfo_Response) GetServerUrl() string {
	if x != nil && x.ServerUrl != nil {
		return *x.ServerUrl
	}
	return ""
}

type CCloud_BeginHTTPUpload_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Appid                *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize             *uint32                `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Filename             *string                `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	FileSha              *string                `protobuf:"bytes,4,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	IsPublic             *bool                  `protobuf:"varint,5,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	PlatformsToSync      []string               `protobuf:"bytes,6,rep,name=platforms_to_sync,json=platformsToSync" json:"platforms_to_sync,omitempty"`
	RequestHeadersNames  []string               `protobuf:"bytes,7,rep,name=request_headers_names,json=requestHeadersNames" json:"request_headers_names,omitempty"`
	RequestHeadersValues []string               `protobuf:"bytes,8,rep,name=request_headers_values,json=requestHeadersValues" json:"request_headers_values,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CCloud_BeginHTTPUpload_Request) Reset() {
	*x = CCloud_BeginHTTPUpload_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_BeginHTTPUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginHTTPUpload_Request) ProtoMessage() {}

func (x *CCloud_BeginHTTPUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginHTTPUpload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_BeginHTTPUpload_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CCloud_BeginHTTPUpload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Request) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Request) GetFileSha() string {
	if x != nil && x.FileSha != nil {
		return *x.FileSha
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Request) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *CCloud_BeginHTTPUpload_Request) GetPlatformsToSync() []string {
	if x != nil {
		return x.PlatformsToSync
	}
	return nil
}

func (x *CCloud_BeginHTTPUpload_Request) GetRequestHeadersNames() []string {
	if x != nil {
		return x.RequestHeadersNames
	}
	return nil
}

func (x *CCloud_BeginHTTPUpload_Request) GetRequestHeadersValues() []string {
	if x != nil {
		return x.RequestHeadersValues
	}
	return nil
}

type CCloud_BeginHTTPUpload_Response struct {
	state          protoimpl.MessageState                         `protogen:"open.v1"`
	Ugcid          *uint64                                        `protobuf:"fixed64,1,opt,name=ugcid" json:"ugcid,omitempty"`
	Timestamp      *uint32                                        `protobuf:"fixed32,2,opt,name=timestamp" json:"timestamp,omitempty"`
	UrlHost        *string                                        `protobuf:"bytes,3,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath        *string                                        `protobuf:"bytes,4,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps       *bool                                          `protobuf:"varint,5,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	RequestHeaders []*CCloud_BeginHTTPUpload_Response_HTTPHeaders `protobuf:"bytes,6,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CCloud_BeginHTTPUpload_Response) Reset() {
	*x = CCloud_BeginHTTPUpload_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_BeginHTTPUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginHTTPUpload_Response) ProtoMessage() {}

func (x *CCloud_BeginHTTPUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginHTTPUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_BeginHTTPUpload_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CCloud_BeginHTTPUpload_Response) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Response) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Response) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Response) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Response) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *CCloud_BeginHTTPUpload_Response) GetRequestHeaders() []*CCloud_BeginHTTPUpload_Response_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

type CCloud_CommitHTTPUpload_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TransferSucceeded *bool                  `protobuf:"varint,1,opt,name=transfer_succeeded,json=transferSucceeded" json:"transfer_succeeded,omitempty"`
	Appid             *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	FileSha           *string                `protobuf:"bytes,3,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	Filename          *string                `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CCloud_CommitHTTPUpload_Request) Reset() {
	*x = CCloud_CommitHTTPUpload_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_CommitHTTPUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_CommitHTTPUpload_Request) ProtoMessage() {}

func (x *CCloud_CommitHTTPUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_CommitHTTPUpload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_CommitHTTPUpload_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CCloud_CommitHTTPUpload_Request) GetTransferSucceeded() bool {
	if x != nil && x.TransferSucceeded != nil {
		return *x.TransferSucceeded
	}
	return false
}

func (x *CCloud_CommitHTTPUpload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_CommitHTTPUpload_Request) GetFileSha() string {
	if x != nil && x.FileSha != nil {
		return *x.FileSha
	}
	return ""
}

func (x *CCloud_CommitHTTPUpload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

type CCloud_CommitHTTPUpload_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileCommitted *bool                  `protobuf:"varint,1,opt,name=file_committed,json=fileCommitted" json:"file_committed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_CommitHTTPUpload_Response) Reset() {
	*x = CCloud_CommitHTTPUpload_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_CommitHTTPUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_CommitHTTPUpload_Response) ProtoMessage() {}

func (x *CCloud_CommitHTTPUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_CommitHTTPUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_CommitHTTPUpload_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CCloud_CommitHTTPUpload_Response) GetFileCommitted() bool {
	if x != nil && x.FileCommitted != nil {
		return *x.FileCommitted
	}
	return false
}

type CCloud_GetFileDetails_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ugcid         *uint64                `protobuf:"varint,1,opt,name=ugcid" json:"ugcid,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetFileDetails_Request) Reset() {
	*x = CCloud_GetFileDetails_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetFileDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetFileDetails_Request) ProtoMessage() {}

func (x *CCloud_GetFileDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetFileDetails_Request.ProtoReflect.Descriptor instead.
func (*CCloud_GetFileDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CCloud_GetFileDetails_Request) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_GetFileDetails_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloud_UserFile struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Ugcid           *uint64                `protobuf:"varint,2,opt,name=ugcid" json:"ugcid,omitempty"`
	Filename        *string                `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	Timestamp       *uint64                `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	FileSize        *uint32                `protobuf:"varint,5,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Url             *string                `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	SteamidCreator  *uint64                `protobuf:"fixed64,7,opt,name=steamid_creator,json=steamidCreator" json:"steamid_creator,omitempty"`
	Flags           *uint32                `protobuf:"varint,8,opt,name=flags" json:"flags,omitempty"`
	PlatformsToSync []string               `protobuf:"bytes,9,rep,name=platforms_to_sync,json=platformsToSync" json:"platforms_to_sync,omitempty"`
	FileSha         *string                `protobuf:"bytes,10,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CCloud_UserFile) Reset() {
	*x = CCloud_UserFile{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_UserFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_UserFile) ProtoMessage() {}

func (x *CCloud_UserFile) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_UserFile.ProtoReflect.Descriptor instead.
func (*CCloud_UserFile) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CCloud_UserFile) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_UserFile) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_UserFile) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_UserFile) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCloud_UserFile) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_UserFile) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CCloud_UserFile) GetSteamidCreator() uint64 {
	if x != nil && x.SteamidCreator != nil {
		return *x.SteamidCreator
	}
	return 0
}

func (x *CCloud_UserFile) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CCloud_UserFile) GetPlatformsToSync() []string {
	if x != nil {
		return x.PlatformsToSync
	}
	return nil
}

func (x *CCloud_UserFile) GetFileSha() string {
	if x != nil && x.FileSha != nil {
		return *x.FileSha
	}
	return ""
}

type CCloud_GetFileDetails_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Details       *CCloud_UserFile       `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetFileDetails_Response) Reset() {
	*x = CCloud_GetFileDetails_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetFileDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetFileDetails_Response) ProtoMessage() {}

func (x *CCloud_GetFileDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetFileDetails_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetFileDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CCloud_GetFileDetails_Response) GetDetails() *CCloud_UserFile {
	if x != nil {
		return x.Details
	}
	return nil
}

type CCloud_EnumerateUserFiles_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ExtendedDetails *bool                  `protobuf:"varint,2,opt,name=extended_details,json=extendedDetails" json:"extended_details,omitempty"`
	Count           *uint32                `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	StartIndex      *uint32                `protobuf:"varint,4,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CCloud_EnumerateUserFiles_Request) Reset() {
	*x = CCloud_EnumerateUserFiles_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_EnumerateUserFiles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserFiles_Request) ProtoMessage() {}

func (x *CCloud_EnumerateUserFiles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserFiles_Request.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserFiles_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CCloud_EnumerateUserFiles_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_EnumerateUserFiles_Request) GetExtendedDetails() bool {
	if x != nil && x.ExtendedDetails != nil {
		return *x.ExtendedDetails
	}
	return false
}

func (x *CCloud_EnumerateUserFiles_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCloud_EnumerateUserFiles_Request) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

type CCloud_EnumerateUserFiles_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []*CCloud_UserFile     `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	TotalFiles    *uint32                `protobuf:"varint,2,opt,name=total_files,json=totalFiles" json:"total_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_EnumerateUserFiles_Response) Reset() {
	*x = CCloud_EnumerateUserFiles_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_EnumerateUserFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserFiles_Response) ProtoMessage() {}

func (x *CCloud_EnumerateUserFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserFiles_Response.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserFiles_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CCloud_EnumerateUserFiles_Response) GetFiles() []*CCloud_UserFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CCloud_EnumerateUserFiles_Response) GetTotalFiles() uint32 {
	if x != nil && x.TotalFiles != nil {
		return *x.TotalFiles
	}
	return 0
}

type CCloud_Delete_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      *string                `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_Delete_Request) Reset() {
	*x = CCloud_Delete_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_Delete_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_Delete_Request) ProtoMessage() {}

func (x *CCloud_Delete_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_Delete_Request.ProtoReflect.Descriptor instead.
func (*CCloud_Delete_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CCloud_Delete_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_Delete_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloud_Delete_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_Delete_Response) Reset() {
	*x = CCloud_Delete_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_Delete_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_Delete_Response) ProtoMessage() {}

func (x *CCloud_Delete_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_Delete_Response.ProtoReflect.Descriptor instead.
func (*CCloud_Delete_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{12}
}

type CCloud_GetClientEncryptionKey_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetClientEncryptionKey_Request) Reset() {
	*x = CCloud_GetClientEncryptionKey_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetClientEncryptionKey_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetClientEncryptionKey_Request) ProtoMessage() {}

func (x *CCloud_GetClientEncryptionKey_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetClientEncryptionKey_Request.ProtoReflect.Descriptor instead.
func (*CCloud_GetClientEncryptionKey_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{13}
}

type CCloud_GetClientEncryptionKey_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Crc           *int32                 `protobuf:"varint,2,opt,name=crc" json:"crc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetClientEncryptionKey_Response) Reset() {
	*x = CCloud_GetClientEncryptionKey_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetClientEncryptionKey_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetClientEncryptionKey_Response) ProtoMessage() {}

func (x *CCloud_GetClientEncryptionKey_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetClientEncryptionKey_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetClientEncryptionKey_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CCloud_GetClientEncryptionKey_Response) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CCloud_GetClientEncryptionKey_Response) GetCrc() int32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

type CCloud_CDNReport_Notification struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Steamid        *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Url            *string                `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Success        *bool                  `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	HttpStatusCode *uint32                `protobuf:"varint,4,opt,name=http_status_code,json=httpStatusCode" json:"http_status_code,omitempty"`
	ExpectedBytes  *uint64                `protobuf:"varint,5,opt,name=expected_bytes,json=expectedBytes" json:"expected_bytes,omitempty"`
	ReceivedBytes  *uint64                `protobuf:"varint,6,opt,name=received_bytes,json=receivedBytes" json:"received_bytes,omitempty"`
	Duration       *uint32                `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CCloud_CDNReport_Notification) Reset() {
	*x = CCloud_CDNReport_Notification{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_CDNReport_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_CDNReport_Notification) ProtoMessage() {}

func (x *CCloud_CDNReport_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_CDNReport_Notification.ProtoReflect.Descriptor instead.
func (*CCloud_CDNReport_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CCloud_CDNReport_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCloud_CDNReport_Notification) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CCloud_CDNReport_Notification) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CCloud_CDNReport_Notification) GetHttpStatusCode() uint32 {
	if x != nil && x.HttpStatusCode != nil {
		return *x.HttpStatusCode
	}
	return 0
}

func (x *CCloud_CDNReport_Notification) GetExpectedBytes() uint64 {
	if x != nil && x.ExpectedBytes != nil {
		return *x.ExpectedBytes
	}
	return 0
}

func (x *CCloud_CDNReport_Notification) GetReceivedBytes() uint64 {
	if x != nil && x.ReceivedBytes != nil {
		return *x.ReceivedBytes
	}
	return 0
}

func (x *CCloud_CDNReport_Notification) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CCloud_ExternalStorageTransferReport_Notification struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Host           *string                `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Path           *string                `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	IsUpload       *bool                  `protobuf:"varint,3,opt,name=is_upload,json=isUpload" json:"is_upload,omitempty"`
	Success        *bool                  `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	HttpStatusCode *uint32                `protobuf:"varint,5,opt,name=http_status_code,json=httpStatusCode" json:"http_status_code,omitempty"`
	BytesExpected  *uint64                `protobuf:"varint,6,opt,name=bytes_expected,json=bytesExpected" json:"bytes_expected,omitempty"`
	BytesActual    *uint64                `protobuf:"varint,7,opt,name=bytes_actual,json=bytesActual" json:"bytes_actual,omitempty"`
	DurationMs     *uint32                `protobuf:"varint,8,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Cellid         *uint32                `protobuf:"varint,9,opt,name=cellid" json:"cellid,omitempty"`
	Proxied        *bool                  `protobuf:"varint,10,opt,name=proxied" json:"proxied,omitempty"`
	Ipv6Local      *bool                  `protobuf:"varint,11,opt,name=ipv6_local,json=ipv6Local" json:"ipv6_local,omitempty"`
	Ipv6Remote     *bool                  `protobuf:"varint,12,opt,name=ipv6_remote,json=ipv6Remote" json:"ipv6_remote,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CCloud_ExternalStorageTransferReport_Notification) Reset() {
	*x = CCloud_ExternalStorageTransferReport_Notification{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ExternalStorageTransferReport_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ExternalStorageTransferReport_Notification) ProtoMessage() {}

func (x *CCloud_ExternalStorageTransferReport_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ExternalStorageTransferReport_Notification.ProtoReflect.Descriptor instead.
func (*CCloud_ExternalStorageTransferReport_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetIsUpload() bool {
	if x != nil && x.IsUpload != nil {
		return *x.IsUpload
	}
	return false
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetHttpStatusCode() uint32 {
	if x != nil && x.HttpStatusCode != nil {
		return *x.HttpStatusCode
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetBytesExpected() uint64 {
	if x != nil && x.BytesExpected != nil {
		return *x.BytesExpected
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetBytesActual() uint64 {
	if x != nil && x.BytesActual != nil {
		return *x.BytesActual
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetDurationMs() uint32 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetProxied() bool {
	if x != nil && x.Proxied != nil {
		return *x.Proxied
	}
	return false
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetIpv6Local() bool {
	if x != nil && x.Ipv6Local != nil {
		return *x.Ipv6Local
	}
	return false
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetIpv6Remote() bool {
	if x != nil && x.Ipv6Remote != nil {
		return *x.Ipv6Remote
	}
	return false
}

type CCloud_ClientBeginFileUpload_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize        *uint32                `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RawFileSize     *uint32                `protobuf:"varint,3,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	FileSha         []byte                 `protobuf:"bytes,4,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	TimeStamp       *uint64                `protobuf:"varint,5,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Filename        *string                `protobuf:"bytes,6,opt,name=filename" json:"filename,omitempty"`
	PlatformsToSync *uint32                `protobuf:"varint,7,opt,name=platforms_to_sync,json=platformsToSync,def=4294967295" json:"platforms_to_sync,omitempty"`
	CellId          *uint32                `protobuf:"varint,9,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	CanEncrypt      *bool                  `protobuf:"varint,10,opt,name=can_encrypt,json=canEncrypt" json:"can_encrypt,omitempty"`
	IsSharedFile    *bool                  `protobuf:"varint,11,opt,name=is_shared_file,json=isSharedFile" json:"is_shared_file,omitempty"`
	Realm           *uint32                `protobuf:"varint,12,opt,name=realm" json:"realm,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CCloud_ClientBeginFileUpload_Request fields.
const (
	Default_CCloud_ClientBeginFileUpload_Request_PlatformsToSync = uint32(4294967295)
)

func (x *CCloud_ClientBeginFileUpload_Request) Reset() {
	*x = CCloud_ClientBeginFileUpload_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientBeginFileUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientBeginFileUpload_Request) ProtoMessage() {}

func (x *CCloud_ClientBeginFileUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientBeginFileUpload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_ClientBeginFileUpload_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CCloud_ClientBeginFileUpload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetFileSha() []byte {
	if x != nil {
		return x.FileSha
	}
	return nil
}

func (x *CCloud_ClientBeginFileUpload_Request) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_ClientBeginFileUpload_Request) GetPlatformsToSync() uint32 {
	if x != nil && x.PlatformsToSync != nil {
		return *x.PlatformsToSync
	}
	return Default_CCloud_ClientBeginFileUpload_Request_PlatformsToSync
}

func (x *CCloud_ClientBeginFileUpload_Request) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetCanEncrypt() bool {
	if x != nil && x.CanEncrypt != nil {
		return *x.CanEncrypt
	}
	return false
}

func (x *CCloud_ClientBeginFileUpload_Request) GetIsSharedFile() bool {
	if x != nil && x.IsSharedFile != nil {
		return *x.IsSharedFile
	}
	return false
}

func (x *CCloud_ClientBeginFileUpload_Request) GetRealm() uint32 {
	if x != nil && x.Realm != nil {
		return *x.Realm
	}
	return 0
}

type ClientCloudFileUploadBlockDetails struct {
	state            protoimpl.MessageState                           `protogen:"open.v1"`
	UrlHost          *string                                          `protobuf:"bytes,1,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath          *string                                          `protobuf:"bytes,2,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps         *bool                                            `protobuf:"varint,3,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	HttpMethod       *int32                                           `protobuf:"varint,4,opt,name=http_method,json=httpMethod" json:"http_method,omitempty"`
	RequestHeaders   []*ClientCloudFileUploadBlockDetails_HTTPHeaders `protobuf:"bytes,5,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	BlockOffset      *uint64                                          `protobuf:"varint,6,opt,name=block_offset,json=blockOffset" json:"block_offset,omitempty"`
	BlockLength      *uint32                                          `protobuf:"varint,7,opt,name=block_length,json=blockLength" json:"block_length,omitempty"`
	ExplicitBodyData []byte                                           `protobuf:"bytes,8,opt,name=explicit_body_data,json=explicitBodyData" json:"explicit_body_data,omitempty"`
	MayParallelize   *bool                                            `protobuf:"varint,9,opt,name=may_parallelize,json=mayParallelize" json:"may_parallelize,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ClientCloudFileUploadBlockDetails) Reset() {
	*x = ClientCloudFileUploadBlockDetails{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientCloudFileUploadBlockDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCloudFileUploadBlockDetails) ProtoMessage() {}

func (x *ClientCloudFileUploadBlockDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCloudFileUploadBlockDetails.ProtoReflect.Descriptor instead.
func (*ClientCloudFileUploadBlockDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *ClientCloudFileUploadBlockDetails) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *ClientCloudFileUploadBlockDetails) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *ClientCloudFileUploadBlockDetails) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *ClientCloudFileUploadBlockDetails) GetHttpMethod() int32 {
	if x != nil && x.HttpMethod != nil {
		return *x.HttpMethod
	}
	return 0
}

func (x *ClientCloudFileUploadBlockDetails) GetRequestHeaders() []*ClientCloudFileUploadBlockDetails_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ClientCloudFileUploadBlockDetails) GetBlockOffset() uint64 {
	if x != nil && x.BlockOffset != nil {
		return *x.BlockOffset
	}
	return 0
}

func (x *ClientCloudFileUploadBlockDetails) GetBlockLength() uint32 {
	if x != nil && x.BlockLength != nil {
		return *x.BlockLength
	}
	return 0
}

func (x *ClientCloudFileUploadBlockDetails) GetExplicitBodyData() []byte {
	if x != nil {
		return x.ExplicitBodyData
	}
	return nil
}

func (x *ClientCloudFileUploadBlockDetails) GetMayParallelize() bool {
	if x != nil && x.MayParallelize != nil {
		return *x.MayParallelize
	}
	return false
}

type CCloud_ClientBeginFileUpload_Response struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	EncryptFile   *bool                                `protobuf:"varint,1,opt,name=encrypt_file,json=encryptFile" json:"encrypt_file,omitempty"`
	BlockRequests []*ClientCloudFileUploadBlockDetails `protobuf:"bytes,2,rep,name=block_requests,json=blockRequests" json:"block_requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_ClientBeginFileUpload_Response) Reset() {
	*x = CCloud_ClientBeginFileUpload_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientBeginFileUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientBeginFileUpload_Response) ProtoMessage() {}

func (x *CCloud_ClientBeginFileUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientBeginFileUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientBeginFileUpload_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CCloud_ClientBeginFileUpload_Response) GetEncryptFile() bool {
	if x != nil && x.EncryptFile != nil {
		return *x.EncryptFile
	}
	return false
}

func (x *CCloud_ClientBeginFileUpload_Response) GetBlockRequests() []*ClientCloudFileUploadBlockDetails {
	if x != nil {
		return x.BlockRequests
	}
	return nil
}

type CCloud_ClientCommitFileUpload_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TransferSucceeded *bool                  `protobuf:"varint,1,opt,name=transfer_succeeded,json=transferSucceeded" json:"transfer_succeeded,omitempty"`
	Appid             *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	FileSha           []byte                 `protobuf:"bytes,3,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	Filename          *string                `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CCloud_ClientCommitFileUpload_Request) Reset() {
	*x = CCloud_ClientCommitFileUpload_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientCommitFileUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientCommitFileUpload_Request) ProtoMessage() {}

func (x *CCloud_ClientCommitFileUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientCommitFileUpload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_ClientCommitFileUpload_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CCloud_ClientCommitFileUpload_Request) GetTransferSucceeded() bool {
	if x != nil && x.TransferSucceeded != nil {
		return *x.TransferSucceeded
	}
	return false
}

func (x *CCloud_ClientCommitFileUpload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientCommitFileUpload_Request) GetFileSha() []byte {
	if x != nil {
		return x.FileSha
	}
	return nil
}

func (x *CCloud_ClientCommitFileUpload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

type CCloud_ClientCommitFileUpload_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileCommitted *bool                  `protobuf:"varint,1,opt,name=file_committed,json=fileCommitted" json:"file_committed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_ClientCommitFileUpload_Response) Reset() {
	*x = CCloud_ClientCommitFileUpload_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientCommitFileUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientCommitFileUpload_Response) ProtoMessage() {}

func (x *CCloud_ClientCommitFileUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientCommitFileUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientCommitFileUpload_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CCloud_ClientCommitFileUpload_Response) GetFileCommitted() bool {
	if x != nil && x.FileCommitted != nil {
		return *x.FileCommitted
	}
	return false
}

type CCloud_ClientFileDownload_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Filename      *string                `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Realm         *uint32                `protobuf:"varint,3,opt,name=realm" json:"realm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_ClientFileDownload_Request) Reset() {
	*x = CCloud_ClientFileDownload_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientFileDownload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientFileDownload_Request) ProtoMessage() {}

func (x *CCloud_ClientFileDownload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientFileDownload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_ClientFileDownload_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CCloud_ClientFileDownload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Request) GetRealm() uint32 {
	if x != nil && x.Realm != nil {
		return *x.Realm
	}
	return 0
}

type CCloud_ClientFileDownload_Response struct {
	state            protoimpl.MessageState                            `protogen:"open.v1"`
	Appid            *uint32                                           `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize         *uint32                                           `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RawFileSize      *uint32                                           `protobuf:"varint,3,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	ShaFile          []byte                                            `protobuf:"bytes,4,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	TimeStamp        *uint64                                           `protobuf:"varint,5,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	IsExplicitDelete *bool                                             `protobuf:"varint,6,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
	UrlHost          *string                                           `protobuf:"bytes,7,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath          *string                                           `protobuf:"bytes,8,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps         *bool                                             `protobuf:"varint,9,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	RequestHeaders   []*CCloud_ClientFileDownload_Response_HTTPHeaders `protobuf:"bytes,10,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	Encrypted        *bool                                             `protobuf:"varint,11,opt,name=encrypted" json:"encrypted,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CCloud_ClientFileDownload_Response) Reset() {
	*x = CCloud_ClientFileDownload_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientFileDownload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientFileDownload_Response) ProtoMessage() {}

func (x *CCloud_ClientFileDownload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientFileDownload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientFileDownload_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CCloud_ClientFileDownload_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CCloud_ClientFileDownload_Response) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetIsExplicitDelete() bool {
	if x != nil && x.IsExplicitDelete != nil {
		return *x.IsExplicitDelete
	}
	return false
}

func (x *CCloud_ClientFileDownload_Response) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Response) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Response) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *CCloud_ClientFileDownload_Response) GetRequestHeaders() []*CCloud_ClientFileDownload_Response_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *CCloud_ClientFileDownload_Response) GetEncrypted() bool {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return false
}

type CCloud_ClientDeleteFile_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Appid            *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Filename         *string                `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	IsExplicitDelete *bool                  `protobuf:"varint,3,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CCloud_ClientDeleteFile_Request) Reset() {
	*x = CCloud_ClientDeleteFile_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientDeleteFile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientDeleteFile_Request) ProtoMessage() {}

func (x *CCloud_ClientDeleteFile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientDeleteFile_Request.ProtoReflect.Descriptor instead.
func (*CCloud_ClientDeleteFile_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CCloud_ClientDeleteFile_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientDeleteFile_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_ClientDeleteFile_Request) GetIsExplicitDelete() bool {
	if x != nil && x.IsExplicitDelete != nil {
		return *x.IsExplicitDelete
	}
	return false
}

type CCloud_ClientDeleteFile_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_ClientDeleteFile_Response) Reset() {
	*x = CCloud_ClientDeleteFile_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientDeleteFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientDeleteFile_Response) ProtoMessage() {}

func (x *CCloud_ClientDeleteFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientDeleteFile_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientDeleteFile_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{25}
}

type CCloud_ClientConflictResolution_Notification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ChoseLocalFiles *bool                  `protobuf:"varint,2,opt,name=chose_local_files,json=choseLocalFiles" json:"chose_local_files,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CCloud_ClientConflictResolution_Notification) Reset() {
	*x = CCloud_ClientConflictResolution_Notification{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientConflictResolution_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientConflictResolution_Notification) ProtoMessage() {}

func (x *CCloud_ClientConflictResolution_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientConflictResolution_Notification.ProtoReflect.Descriptor instead.
func (*CCloud_ClientConflictResolution_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CCloud_ClientConflictResolution_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientConflictResolution_Notification) GetChoseLocalFiles() bool {
	if x != nil && x.ChoseLocalFiles != nil {
		return *x.ChoseLocalFiles
	}
	return false
}

type CCloud_EnumerateUserApps_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_EnumerateUserApps_Request) Reset() {
	*x = CCloud_EnumerateUserApps_Request{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_EnumerateUserApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserApps_Request) ProtoMessage() {}

func (x *CCloud_EnumerateUserApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserApps_Request.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserApps_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{27}
}

type CCloud_EnumerateUserApps_Response struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Apps          []*CCloud_EnumerateUserApps_Response_Apps `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_EnumerateUserApps_Response) Reset() {
	*x = CCloud_EnumerateUserApps_Response{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_EnumerateUserApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserApps_Response) ProtoMessage() {}

func (x *CCloud_EnumerateUserApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserApps_Response.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserApps_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CCloud_EnumerateUserApps_Response) GetApps() []*CCloud_EnumerateUserApps_Response_Apps {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CCloud_BeginHTTPUpload_Response_HTTPHeaders struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) Reset() {
	*x = CCloud_BeginHTTPUpload_Response_HTTPHeaders{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginHTTPUpload_Response_HTTPHeaders) ProtoMessage() {}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginHTTPUpload_Response_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*CCloud_BeginHTTPUpload_Response_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ClientCloudFileUploadBlockDetails_HTTPHeaders struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) Reset() {
	*x = ClientCloudFileUploadBlockDetails_HTTPHeaders{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCloudFileUploadBlockDetails_HTTPHeaders) ProtoMessage() {}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCloudFileUploadBlockDetails_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*ClientCloudFileUploadBlockDetails_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCloud_ClientFileDownload_Response_HTTPHeaders struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) Reset() {
	*x = CCloud_ClientFileDownload_Response_HTTPHeaders{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientFileDownload_Response_HTTPHeaders) ProtoMessage() {}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientFileDownload_Response_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*CCloud_ClientFileDownload_Response_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{23, 0}
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCloud_EnumerateUserApps_Response_Apps struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Totalcount    *int32                 `protobuf:"varint,2,opt,name=totalcount" json:"totalcount,omitempty"`
	Totalsize     *int64                 `protobuf:"varint,3,opt,name=totalsize" json:"totalsize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_EnumerateUserApps_Response_Apps) Reset() {
	*x = CCloud_EnumerateUserApps_Response_Apps{}
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_EnumerateUserApps_Response_Apps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserApps_Response_Apps) ProtoMessage() {}

func (x *CCloud_EnumerateUserApps_Response_Apps) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamclient_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserApps_Response_Apps.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserApps_Response_Apps) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CCloud_EnumerateUserApps_Response_Apps) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_EnumerateUserApps_Response_Apps) GetTotalcount() int32 {
	if x != nil && x.Totalcount != nil {
		return *x.Totalcount
	}
	return 0
}

func (x *CCloud_EnumerateUserApps_Response_Apps) GetTotalsize() int64 {
	if x != nil && x.Totalsize != nil {
		return *x.Totalsize
	}
	return 0
}

var File_steammessages_cloud_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_cloud_steamclient_proto_rawDesc = "" +
	"\n" +
	"%steammessages_cloud.steamclient.proto\x1a,steammessages_unified_base.steamclient.proto\"k\n" +
	"\"CCloud_GetUploadServerInfo_Request\x12E\n" +
	"\x05appid\x18\x01 \x01(\rB/\x82\xb5\x18+App ID to which a file will be uploaded to.R\x05appid\"D\n" +
	"#CCloud_GetUploadServerInfo_Response\x12\x1d\n" +
	"\n" +
	"server_url\x18\x01 \x01(\tR\tserverUrl\"\x9d\a\n" +
	"\x1eCCloud_BeginHTTPUpload_Request\x12F\n" +
	"\x05appid\x18\x01 \x01(\rB0\x82\xb5\x18,App ID for which the file is being uploaded.R\x05appid\x12=\n" +
	"\tfile_size\x18\x02 \x01(\rB \x82\xb5\x18\x1cOriginal file size in bytes.R\bfileSize\x12G\n" +
	"\bfilename\x18\x03 \x01(\tB+\x82\xb5\x18'Name of the file to store in the cloud.R\bfilename\x12_\n" +
	"\bfile_sha\x18\x04 \x01(\tBD\x82\xb5\x18@Hex string (40 digits) representing the SHA1 digest of the file.R\afileSha\x12f\n" +
	"\tis_public\x18\x05 \x01(\bBI\x82\xb5\x18ETrue if the file should be marked public on the UFS, false otherwise.R\bisPublic\x12\xa8\x01\n" +
	"\x11platforms_to_sync\x18\x06 \x03(\tB|\x82\xb5\x18xArray of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android.R\x0fplatformsToSync\x12\x87\x01\n" +
	"\x15request_headers_names\x18\a \x03(\tBS\x82\xb5\x18ONames for headers you'll want to set on your upload request. May be left blank.R\x13requestHeadersNames\x12\xac\x01\n" +
	"\x16request_headers_values\x18\b \x03(\tBv\x82\xb5\x18rValues for headers you'll want to set on your upload request. The number of names must equal the number of values.R\x14requestHeadersValues\"\xe4\x04\n" +
	"\x1fCCloud_BeginHTTPUpload_Response\x126\n" +
	"\x05ugcid\x18\x01 \x01(\x06B \x82\xb5\x18\x1cUGC ID of the uploaded file.R\x05ugcid\x12;\n" +
	"\ttimestamp\x18\x02 \x01(\aB\x1d\x82\xb5\x18\x19Server timestamp of file.R\ttimestamp\x12a\n" +
	"\burl_host\x18\x03 \x01(\tBF\x82\xb5\x18BHost name of server to which file should be uploaded via HTTP PUT.R\aurlHost\x12X\n" +
	"\burl_path\x18\x04 \x01(\tB=\x82\xb5\x189Relative path on server to which file should be uploaded.R\aurlPath\x12H\n" +
	"\tuse_https\x18\x05 \x01(\bB+\x82\xb5\x18'If true, use https, otherwise use http.R\buseHttps\x12\x8b\x01\n" +
	"\x0frequest_headers\x18\x06 \x03(\v2,.CCloud_BeginHTTPUpload_Response.HTTPHeadersB4\x82\xb5\x180Name-value pairs to be sent in HTTP PUT request.R\x0erequestHeaders\x1a7\n" +
	"\vHTTPHeaders\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\xda\x04\n" +
	"\x1fCCloud_CommitHTTPUpload_Request\x12\xb7\x01\n" +
	"\x12transfer_succeeded\x18\x01 \x01(\bB\x87\x01\x82\xb5\x18\x82\x01True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred.R\x11transferSucceeded\x12\x7f\n" +
	"\x05appid\x18\x02 \x01(\rBi\x82\xb5\x18eApp ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload.R\x05appid\x12\x9e\x01\n" +
	"\bfile_sha\x18\x03 \x01(\tB\x82\x01\x82\xb5\x18~Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload.R\afileSha\x12[\n" +
	"\bfilename\x18\x04 \x01(\tB?\x82\xb5\x18;Filename as specified in the Cloud.BeginHTTPUpload request.R\bfilename\"\x8c\x01\n" +
	" CCloud_CommitHTTPUpload_Response\x12h\n" +
	"\x0efile_committed\x18\x01 \x01(\bBA\x82\xb5\x18=True if the file was successfully committed, false otherwise.R\rfileCommitted\"\x9a\x01\n" +
	"\x1dCCloud_GetFileDetails_Request\x12B\n" +
	"\x05ugcid\x18\x01 \x01(\x04B,\x82\xb5\x18(ID of the Cloud file to get details for.R\x05ugcid\x125\n" +
	"\x05appid\x18\x02 \x01(\rB\x1f\x82\xb5\x18\x1bApp ID the file belongs to.R\x05appid\"\xf1\x03\n" +
	"\x0fCCloud_UserFile\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x14\n" +
	"\x05ugcid\x18\x02 \x01(\x04R\x05ugcid\x12\x1a\n" +
	"\bfilename\x18\x03 \x01(\tR\bfilename\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\x12\x1b\n" +
	"\tfile_size\x18\x05 \x01(\rR\bfileSize\x12\x10\n" +
	"\x03url\x18\x06 \x01(\tR\x03url\x12'\n" +
	"\x0fsteamid_creator\x18\a \x01(\x06R\x0esteamidCreator\x12\x14\n" +
	"\x05flags\x18\b \x01(\rR\x05flags\x12\xa8\x01\n" +
	"\x11platforms_to_sync\x18\t \x03(\tB|\x82\xb5\x18xArray of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android.R\x0fplatformsToSync\x12_\n" +
	"\bfile_sha\x18\n" +
	" \x01(\tBD\x82\xb5\x18@Hex string (40 digits) representing the SHA1 digest of the file.R\afileSha\"L\n" +
	"\x1eCCloud_GetFileDetails_Response\x12*\n" +
	"\adetails\x18\x01 \x01(\v2\x10.CCloud_UserFileR\adetails\"\x95\x04\n" +
	"!CCloud_EnumerateUserFiles_Request\x12;\n" +
	"\x05appid\x18\x01 \x01(\rB%\x82\xb5\x18!App ID to enumerate the files of.R\x05appid\x12\xac\x01\n" +
	"\x10extended_details\x18\x02 \x01(\bB\x80\x01\x82\xb5\x18|(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found.R\x0fextendedDetails\x12\x83\x01\n" +
	"\x05count\x18\x03 \x01(\rBm\x82\xb5\x18i(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned.R\x05count\x12~\n" +
	"\vstart_index\x18\x04 \x01(\rB]\x82\xb5\x18Y(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list.R\n" +
	"startIndex\"m\n" +
	"\"CCloud_EnumerateUserFiles_Response\x12&\n" +
	"\x05files\x18\x01 \x03(\v2\x10.CCloud_UserFileR\x05files\x12\x1f\n" +
	"\vtotal_files\x18\x02 \x01(\rR\n" +
	"totalFiles\"j\n" +
	"\x15CCloud_Delete_Request\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x125\n" +
	"\x05appid\x18\x02 \x01(\rB\x1f\x82\xb5\x18\x1bApp ID the file belongs to.R\x05appid\"\x18\n" +
	"\x16CCloud_Delete_Response\"'\n" +
	"%CCloud_GetClientEncryptionKey_Request\"x\n" +
	"&CCloud_GetClientEncryptionKey_Response\x12,\n" +
	"\x03key\x18\x01 \x01(\fB\x1a\x82\xb5\x18\x16AES-256 encryption keyR\x03key\x12 \n" +
	"\x03crc\x18\x02 \x01(\x05B\x0e\x82\xb5\x18\n" +
	"CRC of keyR\x03crc\"\xf9\x01\n" +
	"\x1dCCloud_CDNReport_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12(\n" +
	"\x10http_status_code\x18\x04 \x01(\rR\x0ehttpStatusCode\x12%\n" +
	"\x0eexpected_bytes\x18\x05 \x01(\x04R\rexpectedBytes\x12%\n" +
	"\x0ereceived_bytes\x18\x06 \x01(\x04R\rreceivedBytes\x12\x1a\n" +
	"\bduration\x18\a \x01(\rR\bduration\"\x99\x03\n" +
	"1CCloud_ExternalStorageTransferReport_Notification\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x1b\n" +
	"\tis_upload\x18\x03 \x01(\bR\bisUpload\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12(\n" +
	"\x10http_status_code\x18\x05 \x01(\rR\x0ehttpStatusCode\x12%\n" +
	"\x0ebytes_expected\x18\x06 \x01(\x04R\rbytesExpected\x12!\n" +
	"\fbytes_actual\x18\a \x01(\x04R\vbytesActual\x12\x1f\n" +
	"\vduration_ms\x18\b \x01(\rR\n" +
	"durationMs\x12\x16\n" +
	"\x06cellid\x18\t \x01(\rR\x06cellid\x12\x18\n" +
	"\aproxied\x18\n" +
	" \x01(\bR\aproxied\x12\x1d\n" +
	"\n" +
	"ipv6_local\x18\v \x01(\bR\tipv6Local\x12\x1f\n" +
	"\vipv6_remote\x18\f \x01(\bR\n" +
	"ipv6Remote\"\xd2\x06\n" +
	"$CCloud_ClientBeginFileUpload_Request\x12F\n" +
	"\x05appid\x18\x01 \x01(\rB0\x82\xb5\x18,App ID for which the file is being uploaded.R\x05appid\x12N\n" +
	"\tfile_size\x18\x02 \x01(\rB1\x82\xb5\x18-file size as transmitted and stored in Cloud.R\bfileSize\x12[\n" +
	"\rraw_file_size\x18\x03 \x01(\rB7\x82\xb5\x183file size before any compression and/or encryption.R\vrawFileSize\x121\n" +
	"\bfile_sha\x18\x04 \x01(\fB\x16\x82\xb5\x18\x12SHA-1 of raw file.R\afileSha\x125\n" +
	"\n" +
	"time_stamp\x18\x05 \x01(\x04B\x16\x82\xb5\x18\x12Timestamp of file.R\ttimeStamp\x12G\n" +
	"\bfilename\x18\x06 \x01(\tB+\x82\xb5\x18'Name of the file to store in the cloud.R\bfilename\x126\n" +
	"\x11platforms_to_sync\x18\a \x01(\r:\n" +
	"4294967295R\x0fplatformsToSync\x12N\n" +
	"\acell_id\x18\t \x01(\rB5\x82\xb5\x181Client's cell ID so we can pick storage location.R\x06cellId\x12]\n" +
	"\vcan_encrypt\x18\n" +
	" \x01(\bB<\x82\xb5\x188if true, client can encrypt the file before uploading itR\n" +
	"canEncrypt\x12t\n" +
	"\x0eis_shared_file\x18\v \x01(\bBN\x82\xb5\x18Jif true, this is going to be UGC or a screenshot or some other shared fileR\fisSharedFile\x12%\n" +
	"\x05realm\x18\f \x01(\rB\x0f\x82\xb5\x18\vSteam RealmR\x05realm\"\xf3\a\n" +
	"!ClientCloudFileUploadBlockDetails\x12a\n" +
	"\burl_host\x18\x01 \x01(\tBF\x82\xb5\x18BHost name of server to which file should be uploaded via HTTP PUT.R\aurlHost\x12X\n" +
	"\burl_path\x18\x02 \x01(\tB=\x82\xb5\x189Relative path on server to which file should be uploaded.R\aurlPath\x12H\n" +
	"\tuse_https\x18\x03 \x01(\bB+\x82\xb5\x18'If true, use https, otherwise use http.R\buseHttps\x12G\n" +
	"\vhttp_method\x18\x04 \x01(\x05B&\x82\xb5\x18\"EHTTPMethod to use for this block.R\n" +
	"httpMethod\x12\x8d\x01\n" +
	"\x0frequest_headers\x18\x05 \x03(\v2..ClientCloudFileUploadBlockDetails.HTTPHeadersB4\x82\xb5\x180Name-value pairs to be sent in HTTP PUT request.R\x0erequestHeaders\x12E\n" +
	"\fblock_offset\x18\x06 \x01(\x04B\"\x82\xb5\x18\x1eoffset of file block to uploadR\vblockOffset\x12z\n" +
	"\fblock_length\x18\a \x01(\rBW\x82\xb5\x18Slength of file block to upload - if zero, no part of the file is part of this blockR\vblockLength\x12q\n" +
	"\x12explicit_body_data\x18\b \x01(\fBC\x82\xb5\x18?explicit body data to use, instead of file data, for this blockR\x10explicitBodyData\x12\x7f\n" +
	"\x0fmay_parallelize\x18\t \x01(\bBV\x82\xb5\x18Rif true, this request may be done in parallel with other similarly-marked requestsR\x0emayParallelize\x1a7\n" +
	"\vHTTPHeaders\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x89\x02\n" +
	"%CCloud_ClientBeginFileUpload_Response\x12h\n" +
	"\fencrypt_file\x18\x01 \x01(\bBE\x82\xb5\x18AIf true, the file should be encrypted by the client before uploadR\vencryptFile\x12v\n" +
	"\x0eblock_requests\x18\x02 \x03(\v2\".ClientCloudFileUploadBlockDetailsB+\x82\xb5\x18'HTTP requests to make to perform uploadR\rblockRequests\"\xf6\x03\n" +
	"%CCloud_ClientCommitFileUpload_Request\x12t\n" +
	"\x12transfer_succeeded\x18\x01 \x01(\bBE\x82\xb5\x18ATrue if all block uploads succeeded, false if any of them failed.R\x11transferSucceeded\x12\x7f\n" +
	"\x05appid\x18\x02 \x01(\rBi\x82\xb5\x18eApp ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload.R\x05appid\x12y\n" +
	"\bfile_sha\x18\x03 \x01(\fB^\x82\xb5\x18ZSHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload.R\afileSha\x12[\n" +
	"\bfilename\x18\x04 \x01(\tB?\x82\xb5\x18;Filename as specified in the Cloud.BeginFileUpload request.R\bfilename\"\x92\x01\n" +
	"&CCloud_ClientCommitFileUpload_Response\x12h\n" +
	"\x0efile_committed\x18\x01 \x01(\bBA\x82\xb5\x18=True if the file was successfully committed, false otherwise.R\rfileCommitted\"\xb8\x01\n" +
	"!CCloud_ClientFileDownload_Request\x125\n" +
	"\x05appid\x18\x01 \x01(\rB\x1f\x82\xb5\x18\x1bApp ID the file is part of.R\x05appid\x125\n" +
	"\bfilename\x18\x02 \x01(\tB\x19\x82\xb5\x18\x15Filename of the file.R\bfilename\x12%\n" +
	"\x05realm\x18\x03 \x01(\rB\x0f\x82\xb5\x18\vSteam RealmR\x05realm\"\x87\a\n" +
	"\"CCloud_ClientFileDownload_Response\x129\n" +
	"\x05appid\x18\x01 \x01(\rB#\x82\xb5\x18\x1fApplication the file belongs toR\x05appid\x12Q\n" +
	"\tfile_size\x18\x02 \x01(\rB4\x82\xb5\x180file size as transmitted and stored in the CloudR\bfileSize\x12T\n" +
	"\rraw_file_size\x18\x03 \x01(\rB0\x82\xb5\x18,file size when decompressed and/or decryptedR\vrawFileSize\x12*\n" +
	"\bsha_file\x18\x04 \x01(\fB\x0f\x82\xb5\x18\vSHA of fileR\ashaFile\x124\n" +
	"\n" +
	"time_stamp\x18\x05 \x01(\x04B\x15\x82\xb5\x18\x11Timestamp of fileR\ttimeStamp\x12\\\n" +
	"\x12is_explicit_delete\x18\x06 \x01(\bB.\x82\xb5\x18*True if this is an explicitly deleted fileR\x10isExplicitDelete\x128\n" +
	"\burl_host\x18\a \x01(\tB\x1d\x82\xb5\x18\x19Host to GET the file fromR\aurlHost\x12X\n" +
	"\burl_path\x18\b \x01(\tB=\x82\xb5\x189Path on that host to use, including URL parameters if anyR\aurlPath\x12A\n" +
	"\tuse_https\x18\t \x01(\bB$\x82\xb5\x18 If set, use HTTPS, else use HTTPR\buseHttps\x12\x8e\x01\n" +
	"\x0frequest_headers\x18\n" +
	" \x03(\v2/.CCloud_ClientFileDownload_Response.HTTPHeadersB4\x82\xb5\x180Name-value pairs to be sent in HTTP GET request.R\x0erequestHeaders\x12\x1c\n" +
	"\tencrypted\x18\v \x01(\bR\tencrypted\x1a7\n" +
	"\vHTTPHeaders\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x86\x02\n" +
	"\x1fCCloud_ClientDeleteFile_Request\x12E\n" +
	"\x05appid\x18\x01 \x01(\rB/\x82\xb5\x18+App ID for which the file is being deleted.R\x05appid\x121\n" +
	"\bfilename\x18\x02 \x01(\tB\x15\x82\xb5\x18\x11Filename of file.R\bfilename\x12i\n" +
	"\x12is_explicit_delete\x18\x03 \x01(\bB;\x82\xb5\x187If true, this is a 'delete'; if false, it is a 'forget'R\x10isExplicitDelete\"\"\n" +
	" CCloud_ClientDeleteFile_Response\"\xf9\x01\n" +
	",CCloud_ClientConflictResolution_Notification\x12E\n" +
	"\x05appid\x18\x01 \x01(\rB/\x82\xb5\x18+App ID for which the conflict was resolved.R\x05appid\x12\x81\x01\n" +
	"\x11chose_local_files\x18\x02 \x01(\bBU\x82\xb5\x18QDid the user choose to keep the files local to the machine they are on right now?R\x0fchoseLocalFiles\"\"\n" +
	" CCloud_EnumerateUserApps_Request\"\xbc\x01\n" +
	"!CCloud_EnumerateUserApps_Response\x12;\n" +
	"\x04apps\x18\x01 \x03(\v2'.CCloud_EnumerateUserApps_Response.AppsR\x04apps\x1aZ\n" +
	"\x04Apps\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x1e\n" +
	"\n" +
	"totalcount\x18\x02 \x01(\x05R\n" +
	"totalcount\x12\x1c\n" +
	"\ttotalsize\x18\x03 \x01(\x03R\ttotalsize2\xab\x12\n" +
	"\x05Cloud\x12\x9c\x01\n" +
	"\x13GetUploadServerInfo\x12#.CCloud_GetUploadServerInfo_Request\x1a$.CCloud_GetUploadServerInfo_Response\":\x82\xb5\x186Returns the URL of the proper cloud server for a user.\x12\xa8\x02\n" +
	"\x0fBeginHTTPUpload\x12\x1f.CCloud_BeginHTTPUpload_Request\x1a .CCloud_BeginHTTPUpload_Response\"\xd1\x01\x82\xb5\x18\xcc\x01Begins the process of uploading a file to Steam external storage services. File should be uploaded via HTTP PUT to the returned URL, after which the upload must be finalized by a call to CommitHTTPUpload.\x12\xad\x01\n" +
	"\x10CommitHTTPUpload\x12 .CCloud_CommitHTTPUpload_Request\x1a!.CCloud_CommitHTTPUpload_Response\"T\x82\xb5\x18PCommits a file upload initiated by BeginHTTPUpload and transferred via HTTP PUT.\x12w\n" +
	"\x0eGetFileDetails\x12\x1e.CCloud_GetFileDetails_Request\x1a\x1f.CCloud_GetFileDetails_Response\"$\x82\xb5\x18 Returns details on a Cloud file.\x12\xba\x01\n" +
	"\x12EnumerateUserFiles\x12\".CCloud_EnumerateUserFiles_Request\x1a#.CCloud_EnumerateUserFiles_Response\"[\x82\xb5\x18WEnumerates Cloud files for a user of a given app ID. Returns up to 500 files at a time.\x12d\n" +
	"\x06Delete\x12\x16.CCloud_Delete_Request\x1a\x17.CCloud_Delete_Response\")\x82\xb5\x18%Deletes a file from the user's cloud.\x12\x99\x01\n" +
	"\x16GetClientEncryptionKey\x12&.CCloud_GetClientEncryptionKey_Request\x1a'.CCloud_GetClientEncryptionKey_Response\".\x82\xb5\x18*Gets the user's Cloud file encryption key.\x12c\n" +
	"\tCDNReport\x12\x1e.CCloud_CDNReport_Notification\x1a\v.NoResponse\")\x82\xb5\x18%Reports the result of a CDN transfer.\x12\x9f\x01\n" +
	"\x1dExternalStorageTransferReport\x122.CCloud_ExternalStorageTransferReport_Notification\x1a\v.NoResponse\"=\x82\xb5\x189Reports the result of an external Cloud storage transfer.\x12\x88\x01\n" +
	"\x15ClientBeginFileUpload\x12%.CCloud_ClientBeginFileUpload_Request\x1a&.CCloud_ClientBeginFileUpload_Response\" \x82\xb5\x18\x1cInitiate an upload to Cloud.\x12\x9a\x01\n" +
	"\x16ClientCommitFileUpload\x12&.CCloud_ClientCommitFileUpload_Request\x1a'.CCloud_ClientCommitFileUpload_Response\"/\x82\xb5\x18+Commit the file upload or indicate failure.\x12|\n" +
	"\x12ClientFileDownload\x12\".CCloud_ClientFileDownload_Request\x1a#.CCloud_ClientFileDownload_Response\"\x1d\x82\xb5\x18\x19Initiate a file download.\x12u\n" +
	"\x10ClientDeleteFile\x12 .CCloud_ClientDeleteFile_Request\x1a!.CCloud_ClientDeleteFile_Response\"\x1c\x82\xb5\x18\x18Delete or forget a file.\x12\x8e\x01\n" +
	"\x18ClientConflictResolution\x12-.CCloud_ClientConflictResolution_Notification\x1a\v.NoResponse\"6\x82\xb5\x182User has picked a resolution for a Cloud conflict.\x12\x8f\x01\n" +
	"\x11EnumerateUserApps\x12!.CCloud_EnumerateUserApps_Request\x1a\".CCloud_EnumerateUserApps_Response\"3\x82\xb5\x18/Enumerates apps stroing cloud files for a user.\x1a)\x82\xb5\x18%A service for Steam Cloud operations.B\x03\x80\x01\x01"

var (
	file_steammessages_cloud_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_cloud_steamclient_proto_rawDescData []byte
)

func file_steammessages_cloud_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_cloud_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_cloud_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_cloud_steamclient_proto_rawDesc), len(file_steammessages_cloud_steamclient_proto_rawDesc)))
	})
	return file_steammessages_cloud_steamclient_proto_rawDescData
}

var file_steammessages_cloud_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_steammessages_cloud_steamclient_proto_goTypes = []any{
	(*CCloud_GetUploadServerInfo_Request)(nil),                      // 0: CCloud_GetUploadServerInfo_Request
	(*CCloud_GetUploadServerInfo_Response)(nil),                     // 1: CCloud_GetUploadServerInfo_Response
	(*CCloud_BeginHTTPUpload_Request)(nil),                          // 2: CCloud_BeginHTTPUpload_Request
	(*CCloud_BeginHTTPUpload_Response)(nil),                         // 3: CCloud_BeginHTTPUpload_Response
	(*CCloud_CommitHTTPUpload_Request)(nil),                         // 4: CCloud_CommitHTTPUpload_Request
	(*CCloud_CommitHTTPUpload_Response)(nil),                        // 5: CCloud_CommitHTTPUpload_Response
	(*CCloud_GetFileDetails_Request)(nil),                           // 6: CCloud_GetFileDetails_Request
	(*CCloud_UserFile)(nil),                                         // 7: CCloud_UserFile
	(*CCloud_GetFileDetails_Response)(nil),                          // 8: CCloud_GetFileDetails_Response
	(*CCloud_EnumerateUserFiles_Request)(nil),                       // 9: CCloud_EnumerateUserFiles_Request
	(*CCloud_EnumerateUserFiles_Response)(nil),                      // 10: CCloud_EnumerateUserFiles_Response
	(*CCloud_Delete_Request)(nil),                                   // 11: CCloud_Delete_Request
	(*CCloud_Delete_Response)(nil),                                  // 12: CCloud_Delete_Response
	(*CCloud_GetClientEncryptionKey_Request)(nil),                   // 13: CCloud_GetClientEncryptionKey_Request
	(*CCloud_GetClientEncryptionKey_Response)(nil),                  // 14: CCloud_GetClientEncryptionKey_Response
	(*CCloud_CDNReport_Notification)(nil),                           // 15: CCloud_CDNReport_Notification
	(*CCloud_ExternalStorageTransferReport_Notification)(nil),       // 16: CCloud_ExternalStorageTransferReport_Notification
	(*CCloud_ClientBeginFileUpload_Request)(nil),                    // 17: CCloud_ClientBeginFileUpload_Request
	(*ClientCloudFileUploadBlockDetails)(nil),                       // 18: ClientCloudFileUploadBlockDetails
	(*CCloud_ClientBeginFileUpload_Response)(nil),                   // 19: CCloud_ClientBeginFileUpload_Response
	(*CCloud_ClientCommitFileUpload_Request)(nil),                   // 20: CCloud_ClientCommitFileUpload_Request
	(*CCloud_ClientCommitFileUpload_Response)(nil),                  // 21: CCloud_ClientCommitFileUpload_Response
	(*CCloud_ClientFileDownload_Request)(nil),                       // 22: CCloud_ClientFileDownload_Request
	(*CCloud_ClientFileDownload_Response)(nil),                      // 23: CCloud_ClientFileDownload_Response
	(*CCloud_ClientDeleteFile_Request)(nil),                         // 24: CCloud_ClientDeleteFile_Request
	(*CCloud_ClientDeleteFile_Response)(nil),                        // 25: CCloud_ClientDeleteFile_Response
	(*CCloud_ClientConflictResolution_Notification)(nil),            // 26: CCloud_ClientConflictResolution_Notification
	(*CCloud_EnumerateUserApps_Request)(nil),                        // 27: CCloud_EnumerateUserApps_Request
	(*CCloud_EnumerateUserApps_Response)(nil),                       // 28: CCloud_EnumerateUserApps_Response
	(*CCloud_BeginHTTPUpload_Response_HTTPHeaders)(nil),             // 29: CCloud_BeginHTTPUpload_Response.HTTPHeaders
	(*ClientCloudFileUploadBlockDetails_HTTPHeaders)(nil),           // 30: ClientCloudFileUploadBlockDetails.HTTPHeaders
	(*CCloud_ClientFileDownload_Response_HTTPHeaders)(nil),          // 31: CCloud_ClientFileDownload_Response.HTTPHeaders
	(*CCloud_EnumerateUserApps_Response_Apps)(nil),                  // 32: CCloud_EnumerateUserApps_Response.Apps
	(*NoResponse)(nil), // 33: NoResponse
}
var file_steammessages_cloud_steamclient_proto_depIdxs = []int32{
	29, // 0: CCloud_BeginHTTPUpload_Response.request_headers:type_name -> CCloud_BeginHTTPUpload_Response.HTTPHeaders
	7,  // 1: CCloud_GetFileDetails_Response.details:type_name -> CCloud_UserFile
	7,  // 2: CCloud_EnumerateUserFiles_Response.files:type_name -> CCloud_UserFile
	30, // 3: ClientCloudFileUploadBlockDetails.request_headers:type_name -> ClientCloudFileUploadBlockDetails.HTTPHeaders
	18, // 4: CCloud_ClientBeginFileUpload_Response.block_requests:type_name -> ClientCloudFileUploadBlockDetails
	31, // 5: CCloud_ClientFileDownload_Response.request_headers:type_name -> CCloud_ClientFileDownload_Response.HTTPHeaders
	32, // 6: CCloud_EnumerateUserApps_Response.apps:type_name -> CCloud_EnumerateUserApps_Response.Apps
	0,  // 7: Cloud.GetUploadServerInfo:input_type -> CCloud_GetUploadServerInfo_Request
	2,  // 8: Cloud.BeginHTTPUpload:input_type -> CCloud_BeginHTTPUpload_Request
	4,  // 9: Cloud.CommitHTTPUpload:input_type -> CCloud_CommitHTTPUpload_Request
	6,  // 10: Cloud.GetFileDetails:input_type -> CCloud_GetFileDetails_Request
	9,  // 11: Cloud.EnumerateUserFiles:input_type -> CCloud_EnumerateUserFiles_Request
	11, // 12: Cloud.Delete:input_type -> CCloud_Delete_Request
	13, // 13: Cloud.GetClientEncryptionKey:input_type -> CCloud_GetClientEncryptionKey_Request
	15, // 14: Cloud.CDNReport:input_type -> CCloud_CDNReport_Notification
	16, // 15: Cloud.ExternalStorageTransferReport:input_type -> CCloud_ExternalStorageTransferReport_Notification
	17, // 16: Cloud.ClientBeginFileUpload:input_type -> CCloud_ClientBeginFileUpload_Request
	20, // 17: Cloud.ClientCommitFileUpload:input_type -> CCloud_ClientCommitFileUpload_Request
	22, // 18: Cloud.ClientFileDownload:input_type -> CCloud_ClientFileDownload_Request
	24, // 19: Cloud.ClientDeleteFile:input_type -> CCloud_ClientDeleteFile_Request
	26, // 20: Cloud.ClientConflictResolution:input_type -> CCloud_ClientConflictResolution_Notification
	27, // 21: Cloud.EnumerateUserApps:input_type -> CCloud_EnumerateUserApps_Request
	1,  // 22: Cloud.GetUploadServerInfo:output_type -> CCloud_GetUploadServerInfo_Response
	3,  // 23: Cloud.BeginHTTPUpload:output_type -> CCloud_BeginHTTPUpload_Response
	5,  // 24: Cloud.CommitHTTPUpload:output_type -> CCloud_CommitHTTPUpload_Response
	8,  // 25: Cloud.GetFileDetails:output_type -> CCloud_GetFileDetails_Response
	10, // 26: Cloud.EnumerateUserFiles:output_type -> CCloud_EnumerateUserFiles_Response
	12, // 27: Cloud.Delete:output_type -> CCloud_Delete_Response
	14, // 28: Cloud.GetClientEncryptionKey:output_type -> CCloud_GetClientEncryptionKey_Response
	33, // 29: Cloud.CDNReport:output_type -> NoResponse
	33, // 30: Cloud.ExternalStorageTransferReport:output_type -> NoResponse
	19, // 31: Cloud.ClientBeginFileUpload:output_type -> CCloud_ClientBeginFileUpload_Response
	21, // 32: Cloud.ClientCommitFileUpload:output_type -> CCloud_ClientCommitFileUpload_Response
	23, // 33: Cloud.ClientFileDownload:output_type -> CCloud_ClientFileDownload_Response
	25, // 34: Cloud.ClientDeleteFile:output_type -> CCloud_ClientDeleteFile_Response
	33, // 35: Cloud.ClientConflictResolution:output_type -> NoResponse
	28, // 36: Cloud.EnumerateUserApps:output_type -> CCloud_EnumerateUserApps_Response
	22, // [22:37] is the sub-list for method output_type
	7,  // [7:22] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steammessages_cloud_steamclient_proto_init() }
func file_steammessages_cloud_steamclient_proto_init() {
	if File_steammessages_cloud_steamclient_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_cloud_steamclient_proto_rawDesc), len(file_steammessages_cloud_steamclient_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_cloud_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_cloud_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_cloud_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_cloud_steamclient_proto = out.File
	file_steammessages_cloud_steamclient_proto_goTypes = nil
	file_steammessages_cloud_steamclient_proto_depIdxs = nil
}
