// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: steammessages_clientserver_login.proto

package protobuf

import (
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgClientHeartBeat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientHeartBeat) Reset() {
	*x = CMsgClientHeartBeat{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientHeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientHeartBeat) ProtoMessage() {}

func (x *CMsgClientHeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientHeartBeat.ProtoReflect.Descriptor instead.
func (*CMsgClientHeartBeat) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{0}
}

type CMsgClientServerTimestampRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ClientRequestTimestamp *uint64                `protobuf:"varint,1,opt,name=client_request_timestamp,json=clientRequestTimestamp" json:"client_request_timestamp,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgClientServerTimestampRequest) Reset() {
	*x = CMsgClientServerTimestampRequest{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientServerTimestampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServerTimestampRequest) ProtoMessage() {}

func (x *CMsgClientServerTimestampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServerTimestampRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientServerTimestampRequest) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientServerTimestampRequest) GetClientRequestTimestamp() uint64 {
	if x != nil && x.ClientRequestTimestamp != nil {
		return *x.ClientRequestTimestamp
	}
	return 0
}

type CMsgClientServerTimestampResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ClientRequestTimestamp *uint64                `protobuf:"varint,1,opt,name=client_request_timestamp,json=clientRequestTimestamp" json:"client_request_timestamp,omitempty"`
	ServerTimestampMs      *uint64                `protobuf:"varint,2,opt,name=server_timestamp_ms,json=serverTimestampMs" json:"server_timestamp_ms,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgClientServerTimestampResponse) Reset() {
	*x = CMsgClientServerTimestampResponse{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientServerTimestampResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServerTimestampResponse) ProtoMessage() {}

func (x *CMsgClientServerTimestampResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServerTimestampResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientServerTimestampResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientServerTimestampResponse) GetClientRequestTimestamp() uint64 {
	if x != nil && x.ClientRequestTimestamp != nil {
		return *x.ClientRequestTimestamp
	}
	return 0
}

func (x *CMsgClientServerTimestampResponse) GetServerTimestampMs() uint64 {
	if x != nil && x.ServerTimestampMs != nil {
		return *x.ServerTimestampMs
	}
	return 0
}

type CMsgClientSecret struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *uint32                `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Deviceid      *uint32                `protobuf:"varint,3,opt,name=deviceid" json:"deviceid,omitempty"`
	Nonce         *uint64                `protobuf:"fixed64,4,opt,name=nonce" json:"nonce,omitempty"`
	Hmac          []byte                 `protobuf:"bytes,5,opt,name=hmac" json:"hmac,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientSecret) Reset() {
	*x = CMsgClientSecret{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSecret) ProtoMessage() {}

func (x *CMsgClientSecret) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSecret.ProtoReflect.Descriptor instead.
func (*CMsgClientSecret) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientSecret) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgClientSecret) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientSecret) GetDeviceid() uint32 {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return 0
}

func (x *CMsgClientSecret) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *CMsgClientSecret) GetHmac() []byte {
	if x != nil {
		return x.Hmac
	}
	return nil
}

type CMsgClientLogon struct {
	state                             protoimpl.MessageState                  `protogen:"open.v1"`
	ProtocolVersion                   *uint32                                 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	DeprecatedObfustucatedPrivateIp   *uint32                                 `protobuf:"varint,2,opt,name=deprecated_obfustucated_private_ip,json=deprecatedObfustucatedPrivateIp" json:"deprecated_obfustucated_private_ip,omitempty"`
	CellId                            *uint32                                 `protobuf:"varint,3,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	LastSessionId                     *uint32                                 `protobuf:"varint,4,opt,name=last_session_id,json=lastSessionId" json:"last_session_id,omitempty"`
	ClientPackageVersion              *uint32                                 `protobuf:"varint,5,opt,name=client_package_version,json=clientPackageVersion" json:"client_package_version,omitempty"`
	ClientLanguage                    *string                                 `protobuf:"bytes,6,opt,name=client_language,json=clientLanguage" json:"client_language,omitempty"`
	ClientOsType                      *uint32                                 `protobuf:"varint,7,opt,name=client_os_type,json=clientOsType" json:"client_os_type,omitempty"`
	ShouldRememberPassword            *bool                                   `protobuf:"varint,8,opt,name=should_remember_password,json=shouldRememberPassword,def=0" json:"should_remember_password,omitempty"`
	WineVersion                       *string                                 `protobuf:"bytes,9,opt,name=wine_version,json=wineVersion" json:"wine_version,omitempty"`
	Deprecated_10                     *uint32                                 `protobuf:"varint,10,opt,name=deprecated_10,json=deprecated10" json:"deprecated_10,omitempty"`
	ObfuscatedPrivateIp               *CMsgIPAddress `protobuf:"bytes,11,opt,name=obfuscated_private_ip,json=obfuscatedPrivateIp" json:"obfuscated_private_ip,omitempty"`
	DeprecatedPublicIp                *uint32                                 `protobuf:"varint,20,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	QosLevel                          *uint32                                 `protobuf:"varint,21,opt,name=qos_level,json=qosLevel" json:"qos_level,omitempty"`
	ClientSuppliedSteamId             *uint64                                 `protobuf:"fixed64,22,opt,name=client_supplied_steam_id,json=clientSuppliedSteamId" json:"client_supplied_steam_id,omitempty"`
	PublicIp                          *CMsgIPAddress `protobuf:"bytes,23,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	MachineId                         []byte                                  `protobuf:"bytes,30,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	LauncherType                      *uint32                                 `protobuf:"varint,31,opt,name=launcher_type,json=launcherType,def=0" json:"launcher_type,omitempty"`
	UiMode                            *uint32                                 `protobuf:"varint,32,opt,name=ui_mode,json=uiMode,def=0" json:"ui_mode,omitempty"`
	ChatMode                          *uint32                                 `protobuf:"varint,33,opt,name=chat_mode,json=chatMode,def=0" json:"chat_mode,omitempty"`
	Steam2AuthTicket                  []byte                                  `protobuf:"bytes,41,opt,name=steam2_auth_ticket,json=steam2AuthTicket" json:"steam2_auth_ticket,omitempty"`
	EmailAddress                      *string                                 `protobuf:"bytes,42,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	Rtime32AccountCreation            *uint32                                 `protobuf:"fixed32,43,opt,name=rtime32_account_creation,json=rtime32AccountCreation" json:"rtime32_account_creation,omitempty"`
	AccountName                       *string                                 `protobuf:"bytes,50,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	Password                          *string                                 `protobuf:"bytes,51,opt,name=password" json:"password,omitempty"`
	GameServerToken                   *string                                 `protobuf:"bytes,52,opt,name=game_server_token,json=gameServerToken" json:"game_server_token,omitempty"`
	LoginKey                          *string                                 `protobuf:"bytes,60,opt,name=login_key,json=loginKey" json:"login_key,omitempty"`
	WasConvertedDeprecatedMsg         *bool                                   `protobuf:"varint,70,opt,name=was_converted_deprecated_msg,json=wasConvertedDeprecatedMsg,def=0" json:"was_converted_deprecated_msg,omitempty"`
	AnonUserTargetAccountName         *string                                 `protobuf:"bytes,80,opt,name=anon_user_target_account_name,json=anonUserTargetAccountName" json:"anon_user_target_account_name,omitempty"`
	ResolvedUserSteamId               *uint64                                 `protobuf:"fixed64,81,opt,name=resolved_user_steam_id,json=resolvedUserSteamId" json:"resolved_user_steam_id,omitempty"`
	EresultSentryfile                 *int32                                  `protobuf:"varint,82,opt,name=eresult_sentryfile,json=eresultSentryfile" json:"eresult_sentryfile,omitempty"`
	ShaSentryfile                     []byte                                  `protobuf:"bytes,83,opt,name=sha_sentryfile,json=shaSentryfile" json:"sha_sentryfile,omitempty"`
	AuthCode                          *string                                 `protobuf:"bytes,84,opt,name=auth_code,json=authCode" json:"auth_code,omitempty"`
	OtpType                           *int32                                  `protobuf:"varint,85,opt,name=otp_type,json=otpType" json:"otp_type,omitempty"`
	OtpValue                          *uint32                                 `protobuf:"varint,86,opt,name=otp_value,json=otpValue" json:"otp_value,omitempty"`
	OtpIdentifier                     *string                                 `protobuf:"bytes,87,opt,name=otp_identifier,json=otpIdentifier" json:"otp_identifier,omitempty"`
	Steam2TicketRequest               *bool                                   `protobuf:"varint,88,opt,name=steam2_ticket_request,json=steam2TicketRequest" json:"steam2_ticket_request,omitempty"`
	SonyPsnTicket                     []byte                                  `protobuf:"bytes,90,opt,name=sony_psn_ticket,json=sonyPsnTicket" json:"sony_psn_ticket,omitempty"`
	SonyPsnServiceId                  *string                                 `protobuf:"bytes,91,opt,name=sony_psn_service_id,json=sonyPsnServiceId" json:"sony_psn_service_id,omitempty"`
	CreateNewPsnLinkedAccountIfNeeded *bool                                   `protobuf:"varint,92,opt,name=create_new_psn_linked_account_if_needed,json=createNewPsnLinkedAccountIfNeeded,def=0" json:"create_new_psn_linked_account_if_needed,omitempty"`
	SonyPsnName                       *string                                 `protobuf:"bytes,93,opt,name=sony_psn_name,json=sonyPsnName" json:"sony_psn_name,omitempty"`
	GameServerAppId                   *int32                                  `protobuf:"varint,94,opt,name=game_server_app_id,json=gameServerAppId" json:"game_server_app_id,omitempty"`
	SteamguardDontRememberComputer    *bool                                   `protobuf:"varint,95,opt,name=steamguard_dont_remember_computer,json=steamguardDontRememberComputer" json:"steamguard_dont_remember_computer,omitempty"`
	MachineName                       *string                                 `protobuf:"bytes,96,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	MachineNameUserchosen             *string                                 `protobuf:"bytes,97,opt,name=machine_name_userchosen,json=machineNameUserchosen" json:"machine_name_userchosen,omitempty"`
	CountryOverride                   *string                                 `protobuf:"bytes,98,opt,name=country_override,json=countryOverride" json:"country_override,omitempty"`
	IsSteamBox                        *bool                                   `protobuf:"varint,99,opt,name=is_steam_box,json=isSteamBox" json:"is_steam_box,omitempty"`
	ClientInstanceId                  *uint64                                 `protobuf:"varint,100,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
	TwoFactorCode                     *string                                 `protobuf:"bytes,101,opt,name=two_factor_code,json=twoFactorCode" json:"two_factor_code,omitempty"`
	SupportsRateLimitResponse         *bool                                   `protobuf:"varint,102,opt,name=supports_rate_limit_response,json=supportsRateLimitResponse" json:"supports_rate_limit_response,omitempty"`
	WebLogonNonce                     *string                                 `protobuf:"bytes,103,opt,name=web_logon_nonce,json=webLogonNonce" json:"web_logon_nonce,omitempty"`
	PriorityReason                    *int32                                  `protobuf:"varint,104,opt,name=priority_reason,json=priorityReason" json:"priority_reason,omitempty"`
	EmbeddedClientSecret              *CMsgClientSecret                       `protobuf:"bytes,105,opt,name=embedded_client_secret,json=embeddedClientSecret" json:"embedded_client_secret,omitempty"`
	DisablePartnerAutogrants          *bool                                   `protobuf:"varint,106,opt,name=disable_partner_autogrants,json=disablePartnerAutogrants" json:"disable_partner_autogrants,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

// Default values for CMsgClientLogon fields.
const (
	Default_CMsgClientLogon_ShouldRememberPassword            = bool(false)
	Default_CMsgClientLogon_LauncherType                      = uint32(0)
	Default_CMsgClientLogon_UiMode                            = uint32(0)
	Default_CMsgClientLogon_ChatMode                          = uint32(0)
	Default_CMsgClientLogon_WasConvertedDeprecatedMsg         = bool(false)
	Default_CMsgClientLogon_CreateNewPsnLinkedAccountIfNeeded = bool(false)
)

func (x *CMsgClientLogon) Reset() {
	*x = CMsgClientLogon{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLogon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLogon) ProtoMessage() {}

func (x *CMsgClientLogon) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLogon.ProtoReflect.Descriptor instead.
func (*CMsgClientLogon) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientLogon) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgClientLogon) GetDeprecatedObfustucatedPrivateIp() uint32 {
	if x != nil && x.DeprecatedObfustucatedPrivateIp != nil {
		return *x.DeprecatedObfustucatedPrivateIp
	}
	return 0
}

func (x *CMsgClientLogon) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientLogon) GetLastSessionId() uint32 {
	if x != nil && x.LastSessionId != nil {
		return *x.LastSessionId
	}
	return 0
}

func (x *CMsgClientLogon) GetClientPackageVersion() uint32 {
	if x != nil && x.ClientPackageVersion != nil {
		return *x.ClientPackageVersion
	}
	return 0
}

func (x *CMsgClientLogon) GetClientLanguage() string {
	if x != nil && x.ClientLanguage != nil {
		return *x.ClientLanguage
	}
	return ""
}

func (x *CMsgClientLogon) GetClientOsType() uint32 {
	if x != nil && x.ClientOsType != nil {
		return *x.ClientOsType
	}
	return 0
}

func (x *CMsgClientLogon) GetShouldRememberPassword() bool {
	if x != nil && x.ShouldRememberPassword != nil {
		return *x.ShouldRememberPassword
	}
	return Default_CMsgClientLogon_ShouldRememberPassword
}

func (x *CMsgClientLogon) GetWineVersion() string {
	if x != nil && x.WineVersion != nil {
		return *x.WineVersion
	}
	return ""
}

func (x *CMsgClientLogon) GetDeprecated_10() uint32 {
	if x != nil && x.Deprecated_10 != nil {
		return *x.Deprecated_10
	}
	return 0
}

func (x *CMsgClientLogon) GetObfuscatedPrivateIp() *CMsgIPAddress {
	if x != nil {
		return x.ObfuscatedPrivateIp
	}
	return nil
}

func (x *CMsgClientLogon) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgClientLogon) GetQosLevel() uint32 {
	if x != nil && x.QosLevel != nil {
		return *x.QosLevel
	}
	return 0
}

func (x *CMsgClientLogon) GetClientSuppliedSteamId() uint64 {
	if x != nil && x.ClientSuppliedSteamId != nil {
		return *x.ClientSuppliedSteamId
	}
	return 0
}

func (x *CMsgClientLogon) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

func (x *CMsgClientLogon) GetMachineId() []byte {
	if x != nil {
		return x.MachineId
	}
	return nil
}

func (x *CMsgClientLogon) GetLauncherType() uint32 {
	if x != nil && x.LauncherType != nil {
		return *x.LauncherType
	}
	return Default_CMsgClientLogon_LauncherType
}

func (x *CMsgClientLogon) GetUiMode() uint32 {
	if x != nil && x.UiMode != nil {
		return *x.UiMode
	}
	return Default_CMsgClientLogon_UiMode
}

func (x *CMsgClientLogon) GetChatMode() uint32 {
	if x != nil && x.ChatMode != nil {
		return *x.ChatMode
	}
	return Default_CMsgClientLogon_ChatMode
}

func (x *CMsgClientLogon) GetSteam2AuthTicket() []byte {
	if x != nil {
		return x.Steam2AuthTicket
	}
	return nil
}

func (x *CMsgClientLogon) GetEmailAddress() string {
	if x != nil && x.EmailAddress != nil {
		return *x.EmailAddress
	}
	return ""
}

func (x *CMsgClientLogon) GetRtime32AccountCreation() uint32 {
	if x != nil && x.Rtime32AccountCreation != nil {
		return *x.Rtime32AccountCreation
	}
	return 0
}

func (x *CMsgClientLogon) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CMsgClientLogon) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CMsgClientLogon) GetGameServerToken() string {
	if x != nil && x.GameServerToken != nil {
		return *x.GameServerToken
	}
	return ""
}

func (x *CMsgClientLogon) GetLoginKey() string {
	if x != nil && x.LoginKey != nil {
		return *x.LoginKey
	}
	return ""
}

func (x *CMsgClientLogon) GetWasConvertedDeprecatedMsg() bool {
	if x != nil && x.WasConvertedDeprecatedMsg != nil {
		return *x.WasConvertedDeprecatedMsg
	}
	return Default_CMsgClientLogon_WasConvertedDeprecatedMsg
}

func (x *CMsgClientLogon) GetAnonUserTargetAccountName() string {
	if x != nil && x.AnonUserTargetAccountName != nil {
		return *x.AnonUserTargetAccountName
	}
	return ""
}

func (x *CMsgClientLogon) GetResolvedUserSteamId() uint64 {
	if x != nil && x.ResolvedUserSteamId != nil {
		return *x.ResolvedUserSteamId
	}
	return 0
}

func (x *CMsgClientLogon) GetEresultSentryfile() int32 {
	if x != nil && x.EresultSentryfile != nil {
		return *x.EresultSentryfile
	}
	return 0
}

func (x *CMsgClientLogon) GetShaSentryfile() []byte {
	if x != nil {
		return x.ShaSentryfile
	}
	return nil
}

func (x *CMsgClientLogon) GetAuthCode() string {
	if x != nil && x.AuthCode != nil {
		return *x.AuthCode
	}
	return ""
}

func (x *CMsgClientLogon) GetOtpType() int32 {
	if x != nil && x.OtpType != nil {
		return *x.OtpType
	}
	return 0
}

func (x *CMsgClientLogon) GetOtpValue() uint32 {
	if x != nil && x.OtpValue != nil {
		return *x.OtpValue
	}
	return 0
}

func (x *CMsgClientLogon) GetOtpIdentifier() string {
	if x != nil && x.OtpIdentifier != nil {
		return *x.OtpIdentifier
	}
	return ""
}

func (x *CMsgClientLogon) GetSteam2TicketRequest() bool {
	if x != nil && x.Steam2TicketRequest != nil {
		return *x.Steam2TicketRequest
	}
	return false
}

func (x *CMsgClientLogon) GetSonyPsnTicket() []byte {
	if x != nil {
		return x.SonyPsnTicket
	}
	return nil
}

func (x *CMsgClientLogon) GetSonyPsnServiceId() string {
	if x != nil && x.SonyPsnServiceId != nil {
		return *x.SonyPsnServiceId
	}
	return ""
}

func (x *CMsgClientLogon) GetCreateNewPsnLinkedAccountIfNeeded() bool {
	if x != nil && x.CreateNewPsnLinkedAccountIfNeeded != nil {
		return *x.CreateNewPsnLinkedAccountIfNeeded
	}
	return Default_CMsgClientLogon_CreateNewPsnLinkedAccountIfNeeded
}

func (x *CMsgClientLogon) GetSonyPsnName() string {
	if x != nil && x.SonyPsnName != nil {
		return *x.SonyPsnName
	}
	return ""
}

func (x *CMsgClientLogon) GetGameServerAppId() int32 {
	if x != nil && x.GameServerAppId != nil {
		return *x.GameServerAppId
	}
	return 0
}

func (x *CMsgClientLogon) GetSteamguardDontRememberComputer() bool {
	if x != nil && x.SteamguardDontRememberComputer != nil {
		return *x.SteamguardDontRememberComputer
	}
	return false
}

func (x *CMsgClientLogon) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

func (x *CMsgClientLogon) GetMachineNameUserchosen() string {
	if x != nil && x.MachineNameUserchosen != nil {
		return *x.MachineNameUserchosen
	}
	return ""
}

func (x *CMsgClientLogon) GetCountryOverride() string {
	if x != nil && x.CountryOverride != nil {
		return *x.CountryOverride
	}
	return ""
}

func (x *CMsgClientLogon) GetIsSteamBox() bool {
	if x != nil && x.IsSteamBox != nil {
		return *x.IsSteamBox
	}
	return false
}

func (x *CMsgClientLogon) GetClientInstanceId() uint64 {
	if x != nil && x.ClientInstanceId != nil {
		return *x.ClientInstanceId
	}
	return 0
}

func (x *CMsgClientLogon) GetTwoFactorCode() string {
	if x != nil && x.TwoFactorCode != nil {
		return *x.TwoFactorCode
	}
	return ""
}

func (x *CMsgClientLogon) GetSupportsRateLimitResponse() bool {
	if x != nil && x.SupportsRateLimitResponse != nil {
		return *x.SupportsRateLimitResponse
	}
	return false
}

func (x *CMsgClientLogon) GetWebLogonNonce() string {
	if x != nil && x.WebLogonNonce != nil {
		return *x.WebLogonNonce
	}
	return ""
}

func (x *CMsgClientLogon) GetPriorityReason() int32 {
	if x != nil && x.PriorityReason != nil {
		return *x.PriorityReason
	}
	return 0
}

func (x *CMsgClientLogon) GetEmbeddedClientSecret() *CMsgClientSecret {
	if x != nil {
		return x.EmbeddedClientSecret
	}
	return nil
}

func (x *CMsgClientLogon) GetDisablePartnerAutogrants() bool {
	if x != nil && x.DisablePartnerAutogrants != nil {
		return *x.DisablePartnerAutogrants
	}
	return false
}

type CMsgClientLogonResponse struct {
	state                       protoimpl.MessageState                  `protogen:"open.v1"`
	Eresult                     *int32                                  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	OutOfGameHeartbeatSeconds   *int32                                  `protobuf:"varint,2,opt,name=out_of_game_heartbeat_seconds,json=outOfGameHeartbeatSeconds" json:"out_of_game_heartbeat_seconds,omitempty"`
	InGameHeartbeatSeconds      *int32                                  `protobuf:"varint,3,opt,name=in_game_heartbeat_seconds,json=inGameHeartbeatSeconds" json:"in_game_heartbeat_seconds,omitempty"`
	DeprecatedPublicIp          *uint32                                 `protobuf:"varint,4,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Rtime32ServerTime           *uint32                                 `protobuf:"fixed32,5,opt,name=rtime32_server_time,json=rtime32ServerTime" json:"rtime32_server_time,omitempty"`
	AccountFlags                *uint32                                 `protobuf:"varint,6,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	CellId                      *uint32                                 `protobuf:"varint,7,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	EmailDomain                 *string                                 `protobuf:"bytes,8,opt,name=email_domain,json=emailDomain" json:"email_domain,omitempty"`
	Steam2Ticket                []byte                                  `protobuf:"bytes,9,opt,name=steam2_ticket,json=steam2Ticket" json:"steam2_ticket,omitempty"`
	EresultExtended             *int32                                  `protobuf:"varint,10,opt,name=eresult_extended,json=eresultExtended" json:"eresult_extended,omitempty"`
	WebapiAuthenticateUserNonce *string                                 `protobuf:"bytes,11,opt,name=webapi_authenticate_user_nonce,json=webapiAuthenticateUserNonce" json:"webapi_authenticate_user_nonce,omitempty"`
	CellIdPingThreshold         *uint32                                 `protobuf:"varint,12,opt,name=cell_id_ping_threshold,json=cellIdPingThreshold" json:"cell_id_ping_threshold,omitempty"`
	DeprecatedUsePics           *bool                                   `protobuf:"varint,13,opt,name=deprecated_use_pics,json=deprecatedUsePics" json:"deprecated_use_pics,omitempty"`
	VanityUrl                   *string                                 `protobuf:"bytes,14,opt,name=vanity_url,json=vanityUrl" json:"vanity_url,omitempty"`
	PublicIp                    *CMsgIPAddress `protobuf:"bytes,15,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	ClientSuppliedSteamid       *uint64                                 `protobuf:"fixed64,20,opt,name=client_supplied_steamid,json=clientSuppliedSteamid" json:"client_supplied_steamid,omitempty"`
	IpCountryCode               *string                                 `protobuf:"bytes,21,opt,name=ip_country_code,json=ipCountryCode" json:"ip_country_code,omitempty"`
	ParentalSettings            []byte                                  `protobuf:"bytes,22,opt,name=parental_settings,json=parentalSettings" json:"parental_settings,omitempty"`
	ParentalSettingSignature    []byte                                  `protobuf:"bytes,23,opt,name=parental_setting_signature,json=parentalSettingSignature" json:"parental_setting_signature,omitempty"`
	CountLoginfailuresToMigrate *int32                                  `protobuf:"varint,24,opt,name=count_loginfailures_to_migrate,json=countLoginfailuresToMigrate" json:"count_loginfailures_to_migrate,omitempty"`
	CountDisconnectsToMigrate   *int32                                  `protobuf:"varint,25,opt,name=count_disconnects_to_migrate,json=countDisconnectsToMigrate" json:"count_disconnects_to_migrate,omitempty"`
	OgsDataReportTimeWindow     *int32                                  `protobuf:"varint,26,opt,name=ogs_data_report_time_window,json=ogsDataReportTimeWindow" json:"ogs_data_report_time_window,omitempty"`
	ClientInstanceId            *uint64                                 `protobuf:"varint,27,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
	ForceClientUpdateCheck      *bool                                   `protobuf:"varint,28,opt,name=force_client_update_check,json=forceClientUpdateCheck" json:"force_client_update_check,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

// Default values for CMsgClientLogonResponse fields.
const (
	Default_CMsgClientLogonResponse_Eresult = int32(2)
)

func (x *CMsgClientLogonResponse) Reset() {
	*x = CMsgClientLogonResponse{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLogonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLogonResponse) ProtoMessage() {}

func (x *CMsgClientLogonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLogonResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientLogonResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgClientLogonResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLogonResponse_Eresult
}

func (x *CMsgClientLogonResponse) GetOutOfGameHeartbeatSeconds() int32 {
	if x != nil && x.OutOfGameHeartbeatSeconds != nil {
		return *x.OutOfGameHeartbeatSeconds
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetInGameHeartbeatSeconds() int32 {
	if x != nil && x.InGameHeartbeatSeconds != nil {
		return *x.InGameHeartbeatSeconds
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetRtime32ServerTime() uint32 {
	if x != nil && x.Rtime32ServerTime != nil {
		return *x.Rtime32ServerTime
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetAccountFlags() uint32 {
	if x != nil && x.AccountFlags != nil {
		return *x.AccountFlags
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetEmailDomain() string {
	if x != nil && x.EmailDomain != nil {
		return *x.EmailDomain
	}
	return ""
}

func (x *CMsgClientLogonResponse) GetSteam2Ticket() []byte {
	if x != nil {
		return x.Steam2Ticket
	}
	return nil
}

func (x *CMsgClientLogonResponse) GetEresultExtended() int32 {
	if x != nil && x.EresultExtended != nil {
		return *x.EresultExtended
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetWebapiAuthenticateUserNonce() string {
	if x != nil && x.WebapiAuthenticateUserNonce != nil {
		return *x.WebapiAuthenticateUserNonce
	}
	return ""
}

func (x *CMsgClientLogonResponse) GetCellIdPingThreshold() uint32 {
	if x != nil && x.CellIdPingThreshold != nil {
		return *x.CellIdPingThreshold
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetDeprecatedUsePics() bool {
	if x != nil && x.DeprecatedUsePics != nil {
		return *x.DeprecatedUsePics
	}
	return false
}

func (x *CMsgClientLogonResponse) GetVanityUrl() string {
	if x != nil && x.VanityUrl != nil {
		return *x.VanityUrl
	}
	return ""
}

func (x *CMsgClientLogonResponse) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

func (x *CMsgClientLogonResponse) GetClientSuppliedSteamid() uint64 {
	if x != nil && x.ClientSuppliedSteamid != nil {
		return *x.ClientSuppliedSteamid
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetIpCountryCode() string {
	if x != nil && x.IpCountryCode != nil {
		return *x.IpCountryCode
	}
	return ""
}

func (x *CMsgClientLogonResponse) GetParentalSettings() []byte {
	if x != nil {
		return x.ParentalSettings
	}
	return nil
}

func (x *CMsgClientLogonResponse) GetParentalSettingSignature() []byte {
	if x != nil {
		return x.ParentalSettingSignature
	}
	return nil
}

func (x *CMsgClientLogonResponse) GetCountLoginfailuresToMigrate() int32 {
	if x != nil && x.CountLoginfailuresToMigrate != nil {
		return *x.CountLoginfailuresToMigrate
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetCountDisconnectsToMigrate() int32 {
	if x != nil && x.CountDisconnectsToMigrate != nil {
		return *x.CountDisconnectsToMigrate
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetOgsDataReportTimeWindow() int32 {
	if x != nil && x.OgsDataReportTimeWindow != nil {
		return *x.OgsDataReportTimeWindow
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetClientInstanceId() uint64 {
	if x != nil && x.ClientInstanceId != nil {
		return *x.ClientInstanceId
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetForceClientUpdateCheck() bool {
	if x != nil && x.ForceClientUpdateCheck != nil {
		return *x.ForceClientUpdateCheck
	}
	return false
}

type CMsgClientRequestWebAPIAuthenticateUserNonce struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokenType     *int32                 `protobuf:"varint,1,opt,name=token_type,json=tokenType,def=-1" json:"token_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientRequestWebAPIAuthenticateUserNonce fields.
const (
	Default_CMsgClientRequestWebAPIAuthenticateUserNonce_TokenType = int32(-1)
)

func (x *CMsgClientRequestWebAPIAuthenticateUserNonce) Reset() {
	*x = CMsgClientRequestWebAPIAuthenticateUserNonce{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestWebAPIAuthenticateUserNonce) ProtoMessage() {}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonce) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestWebAPIAuthenticateUserNonce.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestWebAPIAuthenticateUserNonce) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonce) GetTokenType() int32 {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return Default_CMsgClientRequestWebAPIAuthenticateUserNonce_TokenType
}

type CMsgClientRequestWebAPIAuthenticateUserNonceResponse struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Eresult                     *int32                 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	WebapiAuthenticateUserNonce *string                `protobuf:"bytes,11,opt,name=webapi_authenticate_user_nonce,json=webapiAuthenticateUserNonce" json:"webapi_authenticate_user_nonce,omitempty"`
	TokenType                   *int32                 `protobuf:"varint,3,opt,name=token_type,json=tokenType,def=-1" json:"token_type,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

// Default values for CMsgClientRequestWebAPIAuthenticateUserNonceResponse fields.
const (
	Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_Eresult   = int32(2)
	Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_TokenType = int32(-1)
)

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) Reset() {
	*x = CMsgClientRequestWebAPIAuthenticateUserNonceResponse{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestWebAPIAuthenticateUserNonceResponse) ProtoMessage() {}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestWebAPIAuthenticateUserNonceResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestWebAPIAuthenticateUserNonceResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_Eresult
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) GetWebapiAuthenticateUserNonce() string {
	if x != nil && x.WebapiAuthenticateUserNonce != nil {
		return *x.WebapiAuthenticateUserNonce
	}
	return ""
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) GetTokenType() int32 {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_TokenType
}

type CMsgClientLogOff struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientLogOff) Reset() {
	*x = CMsgClientLogOff{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLogOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLogOff) ProtoMessage() {}

func (x *CMsgClientLogOff) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLogOff.ProtoReflect.Descriptor instead.
func (*CMsgClientLogOff) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{8}
}

type CMsgClientLoggedOff struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *int32                 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientLoggedOff fields.
const (
	Default_CMsgClientLoggedOff_Eresult = int32(2)
)

func (x *CMsgClientLoggedOff) Reset() {
	*x = CMsgClientLoggedOff{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLoggedOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLoggedOff) ProtoMessage() {}

func (x *CMsgClientLoggedOff) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLoggedOff.ProtoReflect.Descriptor instead.
func (*CMsgClientLoggedOff) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgClientLoggedOff) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLoggedOff_Eresult
}

type CMsgClientNewLoginKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UniqueId      *uint32                `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	LoginKey      *string                `protobuf:"bytes,2,opt,name=login_key,json=loginKey" json:"login_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientNewLoginKey) Reset() {
	*x = CMsgClientNewLoginKey{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientNewLoginKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNewLoginKey) ProtoMessage() {}

func (x *CMsgClientNewLoginKey) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNewLoginKey.ProtoReflect.Descriptor instead.
func (*CMsgClientNewLoginKey) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientNewLoginKey) GetUniqueId() uint32 {
	if x != nil && x.UniqueId != nil {
		return *x.UniqueId
	}
	return 0
}

func (x *CMsgClientNewLoginKey) GetLoginKey() string {
	if x != nil && x.LoginKey != nil {
		return *x.LoginKey
	}
	return ""
}

type CMsgClientNewLoginKeyAccepted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UniqueId      *uint32                `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientNewLoginKeyAccepted) Reset() {
	*x = CMsgClientNewLoginKeyAccepted{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientNewLoginKeyAccepted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNewLoginKeyAccepted) ProtoMessage() {}

func (x *CMsgClientNewLoginKeyAccepted) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNewLoginKeyAccepted.ProtoReflect.Descriptor instead.
func (*CMsgClientNewLoginKeyAccepted) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgClientNewLoginKeyAccepted) GetUniqueId() uint32 {
	if x != nil && x.UniqueId != nil {
		return *x.UniqueId
	}
	return 0
}

type CMsgClientAccountInfo struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	PersonaName                     *string                `protobuf:"bytes,1,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	IpCountry                       *string                `protobuf:"bytes,2,opt,name=ip_country,json=ipCountry" json:"ip_country,omitempty"`
	CountAuthedComputers            *int32                 `protobuf:"varint,5,opt,name=count_authed_computers,json=countAuthedComputers" json:"count_authed_computers,omitempty"`
	AccountFlags                    *uint32                `protobuf:"varint,7,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	FacebookId                      *uint64                `protobuf:"varint,8,opt,name=facebook_id,json=facebookId" json:"facebook_id,omitempty"`
	FacebookName                    *string                `protobuf:"bytes,9,opt,name=facebook_name,json=facebookName" json:"facebook_name,omitempty"`
	SteamguardNotifyNewmachines     *bool                  `protobuf:"varint,14,opt,name=steamguard_notify_newmachines,json=steamguardNotifyNewmachines" json:"steamguard_notify_newmachines,omitempty"`
	SteamguardMachineNameUserChosen *string                `protobuf:"bytes,15,opt,name=steamguard_machine_name_user_chosen,json=steamguardMachineNameUserChosen" json:"steamguard_machine_name_user_chosen,omitempty"`
	IsPhoneVerified                 *bool                  `protobuf:"varint,16,opt,name=is_phone_verified,json=isPhoneVerified" json:"is_phone_verified,omitempty"`
	TwoFactorState                  *uint32                `protobuf:"varint,17,opt,name=two_factor_state,json=twoFactorState" json:"two_factor_state,omitempty"`
	IsPhoneIdentifying              *bool                  `protobuf:"varint,18,opt,name=is_phone_identifying,json=isPhoneIdentifying" json:"is_phone_identifying,omitempty"`
	IsPhoneNeedingReverify          *bool                  `protobuf:"varint,19,opt,name=is_phone_needing_reverify,json=isPhoneNeedingReverify" json:"is_phone_needing_reverify,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *CMsgClientAccountInfo) Reset() {
	*x = CMsgClientAccountInfo{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAccountInfo) ProtoMessage() {}

func (x *CMsgClientAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAccountInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientAccountInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientAccountInfo) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgClientAccountInfo) GetIpCountry() string {
	if x != nil && x.IpCountry != nil {
		return *x.IpCountry
	}
	return ""
}

func (x *CMsgClientAccountInfo) GetCountAuthedComputers() int32 {
	if x != nil && x.CountAuthedComputers != nil {
		return *x.CountAuthedComputers
	}
	return 0
}

func (x *CMsgClientAccountInfo) GetAccountFlags() uint32 {
	if x != nil && x.AccountFlags != nil {
		return *x.AccountFlags
	}
	return 0
}

func (x *CMsgClientAccountInfo) GetFacebookId() uint64 {
	if x != nil && x.FacebookId != nil {
		return *x.FacebookId
	}
	return 0
}

func (x *CMsgClientAccountInfo) GetFacebookName() string {
	if x != nil && x.FacebookName != nil {
		return *x.FacebookName
	}
	return ""
}

func (x *CMsgClientAccountInfo) GetSteamguardNotifyNewmachines() bool {
	if x != nil && x.SteamguardNotifyNewmachines != nil {
		return *x.SteamguardNotifyNewmachines
	}
	return false
}

func (x *CMsgClientAccountInfo) GetSteamguardMachineNameUserChosen() string {
	if x != nil && x.SteamguardMachineNameUserChosen != nil {
		return *x.SteamguardMachineNameUserChosen
	}
	return ""
}

func (x *CMsgClientAccountInfo) GetIsPhoneVerified() bool {
	if x != nil && x.IsPhoneVerified != nil {
		return *x.IsPhoneVerified
	}
	return false
}

func (x *CMsgClientAccountInfo) GetTwoFactorState() uint32 {
	if x != nil && x.TwoFactorState != nil {
		return *x.TwoFactorState
	}
	return 0
}

func (x *CMsgClientAccountInfo) GetIsPhoneIdentifying() bool {
	if x != nil && x.IsPhoneIdentifying != nil {
		return *x.IsPhoneIdentifying
	}
	return false
}

func (x *CMsgClientAccountInfo) GetIsPhoneNeedingReverify() bool {
	if x != nil && x.IsPhoneNeedingReverify != nil {
		return *x.IsPhoneNeedingReverify
	}
	return false
}

type CMsgClientChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientChallengeRequest) Reset() {
	*x = CMsgClientChallengeRequest{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChallengeRequest) ProtoMessage() {}

func (x *CMsgClientChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChallengeRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientChallengeRequest) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgClientChallengeRequest) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CMsgClientChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Challenge     *uint64                `protobuf:"fixed64,1,opt,name=challenge" json:"challenge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientChallengeResponse) Reset() {
	*x = CMsgClientChallengeResponse{}
	mi := &file_steammessages_clientserver_login_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChallengeResponse) ProtoMessage() {}

func (x *CMsgClientChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_login_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChallengeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientChallengeResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_login_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgClientChallengeResponse) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

var File_steammessages_clientserver_login_proto protoreflect.FileDescriptor

const file_steammessages_clientserver_login_proto_rawDesc = "" +
	"\n" +
	"&steammessages_clientserver_login.proto\x1a\x18steammessages_base.proto\"\x15\n" +
	"\x13CMsgClientHeartBeat\"\\\n" +
	" CMsgClientServerTimestampRequest\x128\n" +
	"\x18client_request_timestamp\x18\x01 \x01(\x04R\x16clientRequestTimestamp\"\x8d\x01\n" +
	"!CMsgClientServerTimestampResponse\x128\n" +
	"\x18client_request_timestamp\x18\x01 \x01(\x04R\x16clientRequestTimestamp\x12.\n" +
	"\x13server_timestamp_ms\x18\x02 \x01(\x04R\x11serverTimestampMs\"\x88\x01\n" +
	"\x10CMsgClientSecret\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x1a\n" +
	"\bdeviceid\x18\x03 \x01(\rR\bdeviceid\x12\x14\n" +
	"\x05nonce\x18\x04 \x01(\x06R\x05nonce\x12\x12\n" +
	"\x04hmac\x18\x05 \x01(\fR\x04hmac\"\x93\x13\n" +
	"\x0fCMsgClientLogon\x12)\n" +
	"\x10protocol_version\x18\x01 \x01(\rR\x0fprotocolVersion\x12K\n" +
	"\"deprecated_obfustucated_private_ip\x18\x02 \x01(\rR\x1fdeprecatedObfustucatedPrivateIp\x12\x17\n" +
	"\acell_id\x18\x03 \x01(\rR\x06cellId\x12&\n" +
	"\x0flast_session_id\x18\x04 \x01(\rR\rlastSessionId\x124\n" +
	"\x16client_package_version\x18\x05 \x01(\rR\x14clientPackageVersion\x12'\n" +
	"\x0fclient_language\x18\x06 \x01(\tR\x0eclientLanguage\x12$\n" +
	"\x0eclient_os_type\x18\a \x01(\rR\fclientOsType\x12?\n" +
	"\x18should_remember_password\x18\b \x01(\b:\x05falseR\x16shouldRememberPassword\x12!\n" +
	"\fwine_version\x18\t \x01(\tR\vwineVersion\x12#\n" +
	"\rdeprecated_10\x18\n" +
	" \x01(\rR\fdeprecated10\x12B\n" +
	"\x15obfuscated_private_ip\x18\v \x01(\v2\x0e.CMsgIPAddressR\x13obfuscatedPrivateIp\x120\n" +
	"\x14deprecated_public_ip\x18\x14 \x01(\rR\x12deprecatedPublicIp\x12\x1b\n" +
	"\tqos_level\x18\x15 \x01(\rR\bqosLevel\x127\n" +
	"\x18client_supplied_steam_id\x18\x16 \x01(\x06R\x15clientSuppliedSteamId\x12+\n" +
	"\tpublic_ip\x18\x17 \x01(\v2\x0e.CMsgIPAddressR\bpublicIp\x12\x1d\n" +
	"\n" +
	"machine_id\x18\x1e \x01(\fR\tmachineId\x12&\n" +
	"\rlauncher_type\x18\x1f \x01(\r:\x010R\flauncherType\x12\x1a\n" +
	"\aui_mode\x18  \x01(\r:\x010R\x06uiMode\x12\x1e\n" +
	"\tchat_mode\x18! \x01(\r:\x010R\bchatMode\x12,\n" +
	"\x12steam2_auth_ticket\x18) \x01(\fR\x10steam2AuthTicket\x12#\n" +
	"\remail_address\x18* \x01(\tR\femailAddress\x128\n" +
	"\x18rtime32_account_creation\x18+ \x01(\aR\x16rtime32AccountCreation\x12!\n" +
	"\faccount_name\x182 \x01(\tR\vaccountName\x12\x1a\n" +
	"\bpassword\x183 \x01(\tR\bpassword\x12*\n" +
	"\x11game_server_token\x184 \x01(\tR\x0fgameServerToken\x12\x1b\n" +
	"\tlogin_key\x18< \x01(\tR\bloginKey\x12F\n" +
	"\x1cwas_converted_deprecated_msg\x18F \x01(\b:\x05falseR\x19wasConvertedDeprecatedMsg\x12@\n" +
	"\x1danon_user_target_account_name\x18P \x01(\tR\x19anonUserTargetAccountName\x123\n" +
	"\x16resolved_user_steam_id\x18Q \x01(\x06R\x13resolvedUserSteamId\x12-\n" +
	"\x12eresult_sentryfile\x18R \x01(\x05R\x11eresultSentryfile\x12%\n" +
	"\x0esha_sentryfile\x18S \x01(\fR\rshaSentryfile\x12\x1b\n" +
	"\tauth_code\x18T \x01(\tR\bauthCode\x12\x19\n" +
	"\botp_type\x18U \x01(\x05R\aotpType\x12\x1b\n" +
	"\totp_value\x18V \x01(\rR\botpValue\x12%\n" +
	"\x0eotp_identifier\x18W \x01(\tR\rotpIdentifier\x122\n" +
	"\x15steam2_ticket_request\x18X \x01(\bR\x13steam2TicketRequest\x12&\n" +
	"\x0fsony_psn_ticket\x18Z \x01(\fR\rsonyPsnTicket\x12-\n" +
	"\x13sony_psn_service_id\x18[ \x01(\tR\x10sonyPsnServiceId\x12Y\n" +
	"'create_new_psn_linked_account_if_needed\x18\\ \x01(\b:\x05falseR!createNewPsnLinkedAccountIfNeeded\x12\"\n" +
	"\rsony_psn_name\x18] \x01(\tR\vsonyPsnName\x12+\n" +
	"\x12game_server_app_id\x18^ \x01(\x05R\x0fgameServerAppId\x12I\n" +
	"!steamguard_dont_remember_computer\x18_ \x01(\bR\x1esteamguardDontRememberComputer\x12!\n" +
	"\fmachine_name\x18` \x01(\tR\vmachineName\x126\n" +
	"\x17machine_name_userchosen\x18a \x01(\tR\x15machineNameUserchosen\x12)\n" +
	"\x10country_override\x18b \x01(\tR\x0fcountryOverride\x12 \n" +
	"\fis_steam_box\x18c \x01(\bR\n" +
	"isSteamBox\x12,\n" +
	"\x12client_instance_id\x18d \x01(\x04R\x10clientInstanceId\x12&\n" +
	"\x0ftwo_factor_code\x18e \x01(\tR\rtwoFactorCode\x12?\n" +
	"\x1csupports_rate_limit_response\x18f \x01(\bR\x19supportsRateLimitResponse\x12&\n" +
	"\x0fweb_logon_nonce\x18g \x01(\tR\rwebLogonNonce\x12'\n" +
	"\x0fpriority_reason\x18h \x01(\x05R\x0epriorityReason\x12G\n" +
	"\x16embedded_client_secret\x18i \x01(\v2\x11.CMsgClientSecretR\x14embeddedClientSecret\x12<\n" +
	"\x1adisable_partner_autogrants\x18j \x01(\bR\x18disablePartnerAutogrants\"\xb4\t\n" +
	"\x17CMsgClientLogonResponse\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\x05:\x012R\aeresult\x12@\n" +
	"\x1dout_of_game_heartbeat_seconds\x18\x02 \x01(\x05R\x19outOfGameHeartbeatSeconds\x129\n" +
	"\x19in_game_heartbeat_seconds\x18\x03 \x01(\x05R\x16inGameHeartbeatSeconds\x120\n" +
	"\x14deprecated_public_ip\x18\x04 \x01(\rR\x12deprecatedPublicIp\x12.\n" +
	"\x13rtime32_server_time\x18\x05 \x01(\aR\x11rtime32ServerTime\x12#\n" +
	"\raccount_flags\x18\x06 \x01(\rR\faccountFlags\x12\x17\n" +
	"\acell_id\x18\a \x01(\rR\x06cellId\x12!\n" +
	"\femail_domain\x18\b \x01(\tR\vemailDomain\x12#\n" +
	"\rsteam2_ticket\x18\t \x01(\fR\fsteam2Ticket\x12)\n" +
	"\x10eresult_extended\x18\n" +
	" \x01(\x05R\x0feresultExtended\x12C\n" +
	"\x1ewebapi_authenticate_user_nonce\x18\v \x01(\tR\x1bwebapiAuthenticateUserNonce\x123\n" +
	"\x16cell_id_ping_threshold\x18\f \x01(\rR\x13cellIdPingThreshold\x12.\n" +
	"\x13deprecated_use_pics\x18\r \x01(\bR\x11deprecatedUsePics\x12\x1d\n" +
	"\n" +
	"vanity_url\x18\x0e \x01(\tR\tvanityUrl\x12+\n" +
	"\tpublic_ip\x18\x0f \x01(\v2\x0e.CMsgIPAddressR\bpublicIp\x126\n" +
	"\x17client_supplied_steamid\x18\x14 \x01(\x06R\x15clientSuppliedSteamid\x12&\n" +
	"\x0fip_country_code\x18\x15 \x01(\tR\ripCountryCode\x12+\n" +
	"\x11parental_settings\x18\x16 \x01(\fR\x10parentalSettings\x12<\n" +
	"\x1aparental_setting_signature\x18\x17 \x01(\fR\x18parentalSettingSignature\x12C\n" +
	"\x1ecount_loginfailures_to_migrate\x18\x18 \x01(\x05R\x1bcountLoginfailuresToMigrate\x12?\n" +
	"\x1ccount_disconnects_to_migrate\x18\x19 \x01(\x05R\x19countDisconnectsToMigrate\x12<\n" +
	"\x1bogs_data_report_time_window\x18\x1a \x01(\x05R\x17ogsDataReportTimeWindow\x12,\n" +
	"\x12client_instance_id\x18\x1b \x01(\x04R\x10clientInstanceId\x129\n" +
	"\x19force_client_update_check\x18\x1c \x01(\bR\x16forceClientUpdateCheck\"Q\n" +
	",CMsgClientRequestWebAPIAuthenticateUserNonce\x12!\n" +
	"\n" +
	"token_type\x18\x01 \x01(\x05:\x02-1R\ttokenType\"\xbb\x01\n" +
	"4CMsgClientRequestWebAPIAuthenticateUserNonceResponse\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\x05:\x012R\aeresult\x12C\n" +
	"\x1ewebapi_authenticate_user_nonce\x18\v \x01(\tR\x1bwebapiAuthenticateUserNonce\x12!\n" +
	"\n" +
	"token_type\x18\x03 \x01(\x05:\x02-1R\ttokenType\"\x12\n" +
	"\x10CMsgClientLogOff\"2\n" +
	"\x13CMsgClientLoggedOff\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\x05:\x012R\aeresult\"Q\n" +
	"\x15CMsgClientNewLoginKey\x12\x1b\n" +
	"\tunique_id\x18\x01 \x01(\rR\buniqueId\x12\x1b\n" +
	"\tlogin_key\x18\x02 \x01(\tR\bloginKey\"<\n" +
	"\x1dCMsgClientNewLoginKeyAccepted\x12\x1b\n" +
	"\tunique_id\x18\x01 \x01(\rR\buniqueId\"\xcf\x04\n" +
	"\x15CMsgClientAccountInfo\x12!\n" +
	"\fpersona_name\x18\x01 \x01(\tR\vpersonaName\x12\x1d\n" +
	"\n" +
	"ip_country\x18\x02 \x01(\tR\tipCountry\x124\n" +
	"\x16count_authed_computers\x18\x05 \x01(\x05R\x14countAuthedComputers\x12#\n" +
	"\raccount_flags\x18\a \x01(\rR\faccountFlags\x12\x1f\n" +
	"\vfacebook_id\x18\b \x01(\x04R\n" +
	"facebookId\x12#\n" +
	"\rfacebook_name\x18\t \x01(\tR\ffacebookName\x12B\n" +
	"\x1dsteamguard_notify_newmachines\x18\x0e \x01(\bR\x1bsteamguardNotifyNewmachines\x12L\n" +
	"#steamguard_machine_name_user_chosen\x18\x0f \x01(\tR\x1fsteamguardMachineNameUserChosen\x12*\n" +
	"\x11is_phone_verified\x18\x10 \x01(\bR\x0fisPhoneVerified\x12(\n" +
	"\x10two_factor_state\x18\x11 \x01(\rR\x0etwoFactorState\x120\n" +
	"\x14is_phone_identifying\x18\x12 \x01(\bR\x12isPhoneIdentifying\x129\n" +
	"\x19is_phone_needing_reverify\x18\x13 \x01(\bR\x16isPhoneNeedingReverify\"6\n" +
	"\x1aCMsgClientChallengeRequest\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\";\n" +
	"\x1bCMsgClientChallengeResponse\x12\x1c\n" +
	"\tchallenge\x18\x01 \x01(\x06R\tchallengeB\x05H\x01\x80\x01\x00"

var (
	file_steammessages_clientserver_login_proto_rawDescOnce sync.Once
	file_steammessages_clientserver_login_proto_rawDescData []byte
)

func file_steammessages_clientserver_login_proto_rawDescGZIP() []byte {
	file_steammessages_clientserver_login_proto_rawDescOnce.Do(func() {
		file_steammessages_clientserver_login_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_clientserver_login_proto_rawDesc), len(file_steammessages_clientserver_login_proto_rawDesc)))
	})
	return file_steammessages_clientserver_login_proto_rawDescData
}

var file_steammessages_clientserver_login_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_steammessages_clientserver_login_proto_goTypes = []any{
	(*CMsgClientHeartBeat)(nil),                                  // 0: CMsgClientHeartBeat
	(*CMsgClientServerTimestampRequest)(nil),                     // 1: CMsgClientServerTimestampRequest
	(*CMsgClientServerTimestampResponse)(nil),                    // 2: CMsgClientServerTimestampResponse
	(*CMsgClientSecret)(nil),                                     // 3: CMsgClientSecret
	(*CMsgClientLogon)(nil),                                      // 4: CMsgClientLogon
	(*CMsgClientLogonResponse)(nil),                              // 5: CMsgClientLogonResponse
	(*CMsgClientRequestWebAPIAuthenticateUserNonce)(nil),         // 6: CMsgClientRequestWebAPIAuthenticateUserNonce
	(*CMsgClientRequestWebAPIAuthenticateUserNonceResponse)(nil), // 7: CMsgClientRequestWebAPIAuthenticateUserNonceResponse
	(*CMsgClientLogOff)(nil),                                     // 8: CMsgClientLogOff
	(*CMsgClientLoggedOff)(nil),                                  // 9: CMsgClientLoggedOff
	(*CMsgClientNewLoginKey)(nil),                                // 10: CMsgClientNewLoginKey
	(*CMsgClientNewLoginKeyAccepted)(nil),                        // 11: CMsgClientNewLoginKeyAccepted
	(*CMsgClientAccountInfo)(nil),                                // 12: CMsgClientAccountInfo
	(*CMsgClientChallengeRequest)(nil),                           // 13: CMsgClientChallengeRequest
	(*CMsgClientChallengeResponse)(nil),                          // 14: CMsgClientChallengeResponse
	(*CMsgIPAddress)(nil),               // 15: CMsgIPAddress
}
var file_steammessages_clientserver_login_proto_depIdxs = []int32{
	15, // 0: CMsgClientLogon.obfuscated_private_ip:type_name -> CMsgIPAddress
	15, // 1: CMsgClientLogon.public_ip:type_name -> CMsgIPAddress
	3,  // 2: CMsgClientLogon.embedded_client_secret:type_name -> CMsgClientSecret
	15, // 3: CMsgClientLogonResponse.public_ip:type_name -> CMsgIPAddress
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_steammessages_clientserver_login_proto_init() }
func file_steammessages_clientserver_login_proto_init() {
	if File_steammessages_clientserver_login_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_clientserver_login_proto_rawDesc), len(file_steammessages_clientserver_login_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_clientserver_login_proto_goTypes,
		DependencyIndexes: file_steammessages_clientserver_login_proto_depIdxs,
		MessageInfos:      file_steammessages_clientserver_login_proto_msgTypes,
	}.Build()
	File_steammessages_clientserver_login_proto = out.File
	file_steammessages_clientserver_login_proto_goTypes = nil
	file_steammessages_clientserver_login_proto_depIdxs = nil
}
