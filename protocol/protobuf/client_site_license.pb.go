// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: steammessages_sitelicenseclient.proto

package protobuf

import (
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgClientSiteInfo struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SiteId                 *uint64                `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	SiteName               *string                `protobuf:"bytes,2,opt,name=site_name,json=siteName" json:"site_name,omitempty"`
	AllowCachedCredentials *bool                  `protobuf:"varint,3,opt,name=allow_cached_credentials,json=allowCachedCredentials" json:"allow_cached_credentials,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgClientSiteInfo) Reset() {
	*x = CMsgClientSiteInfo{}
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSiteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSiteInfo) ProtoMessage() {}

func (x *CMsgClientSiteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSiteInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientSiteInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_sitelicenseclient_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientSiteInfo) GetSiteId() uint64 {
	if x != nil && x.SiteId != nil {
		return *x.SiteId
	}
	return 0
}

func (x *CMsgClientSiteInfo) GetSiteName() string {
	if x != nil && x.SiteName != nil {
		return *x.SiteName
	}
	return ""
}

func (x *CMsgClientSiteInfo) GetAllowCachedCredentials() bool {
	if x != nil && x.AllowCachedCredentials != nil {
		return *x.AllowCachedCredentials
	}
	return false
}

type CMsgClientSiteLicenseCheckout struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientSiteLicenseCheckout) Reset() {
	*x = CMsgClientSiteLicenseCheckout{}
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSiteLicenseCheckout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSiteLicenseCheckout) ProtoMessage() {}

func (x *CMsgClientSiteLicenseCheckout) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSiteLicenseCheckout.ProtoReflect.Descriptor instead.
func (*CMsgClientSiteLicenseCheckout) Descriptor() ([]byte, []int) {
	return file_steammessages_sitelicenseclient_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientSiteLicenseCheckout) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgClientSiteLicenseCheckoutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *int32                 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientSiteLicenseCheckoutResponse fields.
const (
	Default_CMsgClientSiteLicenseCheckoutResponse_Eresult = int32(2)
)

func (x *CMsgClientSiteLicenseCheckoutResponse) Reset() {
	*x = CMsgClientSiteLicenseCheckoutResponse{}
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSiteLicenseCheckoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSiteLicenseCheckoutResponse) ProtoMessage() {}

func (x *CMsgClientSiteLicenseCheckoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSiteLicenseCheckoutResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientSiteLicenseCheckoutResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_sitelicenseclient_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientSiteLicenseCheckoutResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientSiteLicenseCheckoutResponse_Eresult
}

type CMsgClientSiteLicenseGetAvailableSeats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientSiteLicenseGetAvailableSeats) Reset() {
	*x = CMsgClientSiteLicenseGetAvailableSeats{}
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSiteLicenseGetAvailableSeats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSiteLicenseGetAvailableSeats) ProtoMessage() {}

func (x *CMsgClientSiteLicenseGetAvailableSeats) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSiteLicenseGetAvailableSeats.ProtoReflect.Descriptor instead.
func (*CMsgClientSiteLicenseGetAvailableSeats) Descriptor() ([]byte, []int) {
	return file_steammessages_sitelicenseclient_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientSiteLicenseGetAvailableSeats) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgClientSiteLicenseGetAvailableSeatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *int32                 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Seats         *uint32                `protobuf:"varint,2,opt,name=seats" json:"seats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientSiteLicenseGetAvailableSeatsResponse fields.
const (
	Default_CMsgClientSiteLicenseGetAvailableSeatsResponse_Eresult = int32(2)
)

func (x *CMsgClientSiteLicenseGetAvailableSeatsResponse) Reset() {
	*x = CMsgClientSiteLicenseGetAvailableSeatsResponse{}
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSiteLicenseGetAvailableSeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSiteLicenseGetAvailableSeatsResponse) ProtoMessage() {}

func (x *CMsgClientSiteLicenseGetAvailableSeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSiteLicenseGetAvailableSeatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientSiteLicenseGetAvailableSeatsResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_sitelicenseclient_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientSiteLicenseGetAvailableSeatsResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientSiteLicenseGetAvailableSeatsResponse_Eresult
}

func (x *CMsgClientSiteLicenseGetAvailableSeatsResponse) GetSeats() uint32 {
	if x != nil && x.Seats != nil {
		return *x.Seats
	}
	return 0
}

type CMsgClientSiteLicenseGetContentCacheInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientSiteLicenseGetContentCacheInfo) Reset() {
	*x = CMsgClientSiteLicenseGetContentCacheInfo{}
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSiteLicenseGetContentCacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSiteLicenseGetContentCacheInfo) ProtoMessage() {}

func (x *CMsgClientSiteLicenseGetContentCacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSiteLicenseGetContentCacheInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientSiteLicenseGetContentCacheInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_sitelicenseclient_proto_rawDescGZIP(), []int{5}
}

type CMsgClientSiteLicenseGetContentCacheInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UseCache      *bool                  `protobuf:"varint,1,opt,name=use_cache,json=useCache" json:"use_cache,omitempty"`
	Ipv4Address   *uint32                `protobuf:"varint,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	PortNumber    *uint32                `protobuf:"varint,3,opt,name=port_number,json=portNumber" json:"port_number,omitempty"`
	P2PGroup      *uint32                `protobuf:"varint,4,opt,name=p2p_group,json=p2pGroup" json:"p2p_group,omitempty"`
	IpAddress     *string                `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientSiteLicenseGetContentCacheInfoResponse) Reset() {
	*x = CMsgClientSiteLicenseGetContentCacheInfoResponse{}
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSiteLicenseGetContentCacheInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSiteLicenseGetContentCacheInfoResponse) ProtoMessage() {}

func (x *CMsgClientSiteLicenseGetContentCacheInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_sitelicenseclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSiteLicenseGetContentCacheInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientSiteLicenseGetContentCacheInfoResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_sitelicenseclient_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgClientSiteLicenseGetContentCacheInfoResponse) GetUseCache() bool {
	if x != nil && x.UseCache != nil {
		return *x.UseCache
	}
	return false
}

func (x *CMsgClientSiteLicenseGetContentCacheInfoResponse) GetIpv4Address() uint32 {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return 0
}

func (x *CMsgClientSiteLicenseGetContentCacheInfoResponse) GetPortNumber() uint32 {
	if x != nil && x.PortNumber != nil {
		return *x.PortNumber
	}
	return 0
}

func (x *CMsgClientSiteLicenseGetContentCacheInfoResponse) GetP2PGroup() uint32 {
	if x != nil && x.P2PGroup != nil {
		return *x.P2PGroup
	}
	return 0
}

func (x *CMsgClientSiteLicenseGetContentCacheInfoResponse) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

var File_steammessages_sitelicenseclient_proto protoreflect.FileDescriptor

const file_steammessages_sitelicenseclient_proto_rawDesc = "" +
	"\n" +
	"%steammessages_sitelicenseclient.proto\x1a\x18steammessages_base.proto\"\x84\x01\n" +
	"\x12CMsgClientSiteInfo\x12\x17\n" +
	"\asite_id\x18\x01 \x01(\x04R\x06siteId\x12\x1b\n" +
	"\tsite_name\x18\x02 \x01(\tR\bsiteName\x128\n" +
	"\x18allow_cached_credentials\x18\x03 \x01(\bR\x16allowCachedCredentials\"5\n" +
	"\x1dCMsgClientSiteLicenseCheckout\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"D\n" +
	"%CMsgClientSiteLicenseCheckoutResponse\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\x05:\x012R\aeresult\">\n" +
	"&CMsgClientSiteLicenseGetAvailableSeats\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"c\n" +
	".CMsgClientSiteLicenseGetAvailableSeatsResponse\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\x05:\x012R\aeresult\x12\x14\n" +
	"\x05seats\x18\x02 \x01(\rR\x05seats\"*\n" +
	"(CMsgClientSiteLicenseGetContentCacheInfo\"\xcf\x01\n" +
	"0CMsgClientSiteLicenseGetContentCacheInfoResponse\x12\x1b\n" +
	"\tuse_cache\x18\x01 \x01(\bR\buseCache\x12!\n" +
	"\fipv4_address\x18\x02 \x01(\rR\vipv4Address\x12\x1f\n" +
	"\vport_number\x18\x03 \x01(\rR\n" +
	"portNumber\x12\x1b\n" +
	"\tp2p_group\x18\x04 \x01(\rR\bp2pGroup\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x05 \x01(\tR\tipAddressB\x05H\x01\x80\x01\x00"

var (
	file_steammessages_sitelicenseclient_proto_rawDescOnce sync.Once
	file_steammessages_sitelicenseclient_proto_rawDescData []byte
)

func file_steammessages_sitelicenseclient_proto_rawDescGZIP() []byte {
	file_steammessages_sitelicenseclient_proto_rawDescOnce.Do(func() {
		file_steammessages_sitelicenseclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_sitelicenseclient_proto_rawDesc), len(file_steammessages_sitelicenseclient_proto_rawDesc)))
	})
	return file_steammessages_sitelicenseclient_proto_rawDescData
}

var file_steammessages_sitelicenseclient_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_steammessages_sitelicenseclient_proto_goTypes = []any{
	(*CMsgClientSiteInfo)(nil),                               // 0: CMsgClientSiteInfo
	(*CMsgClientSiteLicenseCheckout)(nil),                    // 1: CMsgClientSiteLicenseCheckout
	(*CMsgClientSiteLicenseCheckoutResponse)(nil),            // 2: CMsgClientSiteLicenseCheckoutResponse
	(*CMsgClientSiteLicenseGetAvailableSeats)(nil),           // 3: CMsgClientSiteLicenseGetAvailableSeats
	(*CMsgClientSiteLicenseGetAvailableSeatsResponse)(nil),   // 4: CMsgClientSiteLicenseGetAvailableSeatsResponse
	(*CMsgClientSiteLicenseGetContentCacheInfo)(nil),         // 5: CMsgClientSiteLicenseGetContentCacheInfo
	(*CMsgClientSiteLicenseGetContentCacheInfoResponse)(nil), // 6: CMsgClientSiteLicenseGetContentCacheInfoResponse
}
var file_steammessages_sitelicenseclient_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_steammessages_sitelicenseclient_proto_init() }
func file_steammessages_sitelicenseclient_proto_init() {
	if File_steammessages_sitelicenseclient_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_sitelicenseclient_proto_rawDesc), len(file_steammessages_sitelicenseclient_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_sitelicenseclient_proto_goTypes,
		DependencyIndexes: file_steammessages_sitelicenseclient_proto_depIdxs,
		MessageInfos:      file_steammessages_sitelicenseclient_proto_msgTypes,
	}.Build()
	File_steammessages_sitelicenseclient_proto = out.File
	file_steammessages_sitelicenseclient_proto_goTypes = nil
	file_steammessages_sitelicenseclient_proto_depIdxs = nil
}
