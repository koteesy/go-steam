// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: steammessages_clientserver.proto

package protobuf

import (
	
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgClientRegisterAuthTicketWithCM struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ProtocolVersion  *uint32                `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Ticket           []byte                 `protobuf:"bytes,3,opt,name=ticket" json:"ticket,omitempty"`
	ClientInstanceId *uint64                `protobuf:"varint,4,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgClientRegisterAuthTicketWithCM) Reset() {
	*x = CMsgClientRegisterAuthTicketWithCM{}
	mi := &file_steammessages_clientserver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientRegisterAuthTicketWithCM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRegisterAuthTicketWithCM) ProtoMessage() {}

func (x *CMsgClientRegisterAuthTicketWithCM) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRegisterAuthTicketWithCM.ProtoReflect.Descriptor instead.
func (*CMsgClientRegisterAuthTicketWithCM) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientRegisterAuthTicketWithCM) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgClientRegisterAuthTicketWithCM) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *CMsgClientRegisterAuthTicketWithCM) GetClientInstanceId() uint64 {
	if x != nil && x.ClientInstanceId != nil {
		return *x.ClientInstanceId
	}
	return 0
}

type CMsgClientTicketAuthComplete struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SteamId              *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	GameId               *uint64                `protobuf:"fixed64,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Estate               *uint32                `protobuf:"varint,3,opt,name=estate" json:"estate,omitempty"`
	EauthSessionResponse *uint32                `protobuf:"varint,4,opt,name=eauth_session_response,json=eauthSessionResponse" json:"eauth_session_response,omitempty"`
	DEPRECATEDTicket     []byte                 `protobuf:"bytes,5,opt,name=DEPRECATED_ticket,json=DEPRECATEDTicket" json:"DEPRECATED_ticket,omitempty"`
	TicketCrc            *uint32                `protobuf:"varint,6,opt,name=ticket_crc,json=ticketCrc" json:"ticket_crc,omitempty"`
	TicketSequence       *uint32                `protobuf:"varint,7,opt,name=ticket_sequence,json=ticketSequence" json:"ticket_sequence,omitempty"`
	OwnerSteamId         *uint64                `protobuf:"fixed64,8,opt,name=owner_steam_id,json=ownerSteamId" json:"owner_steam_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgClientTicketAuthComplete) Reset() {
	*x = CMsgClientTicketAuthComplete{}
	mi := &file_steammessages_clientserver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientTicketAuthComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientTicketAuthComplete) ProtoMessage() {}

func (x *CMsgClientTicketAuthComplete) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientTicketAuthComplete.ProtoReflect.Descriptor instead.
func (*CMsgClientTicketAuthComplete) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientTicketAuthComplete) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetEstate() uint32 {
	if x != nil && x.Estate != nil {
		return *x.Estate
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetEauthSessionResponse() uint32 {
	if x != nil && x.EauthSessionResponse != nil {
		return *x.EauthSessionResponse
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetDEPRECATEDTicket() []byte {
	if x != nil {
		return x.DEPRECATEDTicket
	}
	return nil
}

func (x *CMsgClientTicketAuthComplete) GetTicketCrc() uint32 {
	if x != nil && x.TicketCrc != nil {
		return *x.TicketCrc
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetTicketSequence() uint32 {
	if x != nil && x.TicketSequence != nil {
		return *x.TicketSequence
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetOwnerSteamId() uint64 {
	if x != nil && x.OwnerSteamId != nil {
		return *x.OwnerSteamId
	}
	return 0
}

type CMsgClientP2PConnectionInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SteamIdDest           *uint64                `protobuf:"fixed64,1,opt,name=steam_id_dest,json=steamIdDest" json:"steam_id_dest,omitempty"`
	SteamIdSrc            *uint64                `protobuf:"fixed64,2,opt,name=steam_id_src,json=steamIdSrc" json:"steam_id_src,omitempty"`
	AppId                 *uint32                `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Candidate             []byte                 `protobuf:"bytes,4,opt,name=candidate" json:"candidate,omitempty"`
	LegacyConnectionIdSrc *uint64                `protobuf:"fixed64,5,opt,name=legacy_connection_id_src,json=legacyConnectionIdSrc" json:"legacy_connection_id_src,omitempty"`
	Rendezvous            []byte                 `protobuf:"bytes,6,opt,name=rendezvous" json:"rendezvous,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgClientP2PConnectionInfo) Reset() {
	*x = CMsgClientP2PConnectionInfo{}
	mi := &file_steammessages_clientserver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientP2PConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientP2PConnectionInfo) ProtoMessage() {}

func (x *CMsgClientP2PConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientP2PConnectionInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientP2PConnectionInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientP2PConnectionInfo) GetSteamIdDest() uint64 {
	if x != nil && x.SteamIdDest != nil {
		return *x.SteamIdDest
	}
	return 0
}

func (x *CMsgClientP2PConnectionInfo) GetSteamIdSrc() uint64 {
	if x != nil && x.SteamIdSrc != nil {
		return *x.SteamIdSrc
	}
	return 0
}

func (x *CMsgClientP2PConnectionInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientP2PConnectionInfo) GetCandidate() []byte {
	if x != nil {
		return x.Candidate
	}
	return nil
}

func (x *CMsgClientP2PConnectionInfo) GetLegacyConnectionIdSrc() uint64 {
	if x != nil && x.LegacyConnectionIdSrc != nil {
		return *x.LegacyConnectionIdSrc
	}
	return 0
}

func (x *CMsgClientP2PConnectionInfo) GetRendezvous() []byte {
	if x != nil {
		return x.Rendezvous
	}
	return nil
}

type CMsgClientP2PConnectionFailInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SteamIdDest      *uint64                `protobuf:"fixed64,1,opt,name=steam_id_dest,json=steamIdDest" json:"steam_id_dest,omitempty"`
	SteamIdSrc       *uint64                `protobuf:"fixed64,2,opt,name=steam_id_src,json=steamIdSrc" json:"steam_id_src,omitempty"`
	AppId            *uint32                `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Ep2PSessionError *uint32                `protobuf:"varint,4,opt,name=ep2p_session_error,json=ep2pSessionError" json:"ep2p_session_error,omitempty"`
	ConnectionIdDest *uint64                `protobuf:"fixed64,5,opt,name=connection_id_dest,json=connectionIdDest" json:"connection_id_dest,omitempty"`
	CloseReason      *uint32                `protobuf:"varint,7,opt,name=close_reason,json=closeReason" json:"close_reason,omitempty"`
	CloseMessage     *string                `protobuf:"bytes,8,opt,name=close_message,json=closeMessage" json:"close_message,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgClientP2PConnectionFailInfo) Reset() {
	*x = CMsgClientP2PConnectionFailInfo{}
	mi := &file_steammessages_clientserver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientP2PConnectionFailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientP2PConnectionFailInfo) ProtoMessage() {}

func (x *CMsgClientP2PConnectionFailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientP2PConnectionFailInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientP2PConnectionFailInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientP2PConnectionFailInfo) GetSteamIdDest() uint64 {
	if x != nil && x.SteamIdDest != nil {
		return *x.SteamIdDest
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetSteamIdSrc() uint64 {
	if x != nil && x.SteamIdSrc != nil {
		return *x.SteamIdSrc
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetEp2PSessionError() uint32 {
	if x != nil && x.Ep2PSessionError != nil {
		return *x.Ep2PSessionError
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetConnectionIdDest() uint64 {
	if x != nil && x.ConnectionIdDest != nil {
		return *x.ConnectionIdDest
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetCloseReason() uint32 {
	if x != nil && x.CloseReason != nil {
		return *x.CloseReason
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetCloseMessage() string {
	if x != nil && x.CloseMessage != nil {
		return *x.CloseMessage
	}
	return ""
}

type CMsgClientNetworkingCertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyData       []byte                 `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	AppId         *uint32                `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientNetworkingCertRequest) Reset() {
	*x = CMsgClientNetworkingCertRequest{}
	mi := &file_steammessages_clientserver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientNetworkingCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNetworkingCertRequest) ProtoMessage() {}

func (x *CMsgClientNetworkingCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNetworkingCertRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientNetworkingCertRequest) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientNetworkingCertRequest) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CMsgClientNetworkingCertRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientNetworkingCertReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cert          []byte                 `protobuf:"bytes,4,opt,name=cert" json:"cert,omitempty"`
	CaKeyId       *uint64                `protobuf:"fixed64,5,opt,name=ca_key_id,json=caKeyId" json:"ca_key_id,omitempty"`
	CaSignature   []byte                 `protobuf:"bytes,6,opt,name=ca_signature,json=caSignature" json:"ca_signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientNetworkingCertReply) Reset() {
	*x = CMsgClientNetworkingCertReply{}
	mi := &file_steammessages_clientserver_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientNetworkingCertReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNetworkingCertReply) ProtoMessage() {}

func (x *CMsgClientNetworkingCertReply) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNetworkingCertReply.ProtoReflect.Descriptor instead.
func (*CMsgClientNetworkingCertReply) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgClientNetworkingCertReply) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgClientNetworkingCertReply) GetCaKeyId() uint64 {
	if x != nil && x.CaKeyId != nil {
		return *x.CaKeyId
	}
	return 0
}

func (x *CMsgClientNetworkingCertReply) GetCaSignature() []byte {
	if x != nil {
		return x.CaSignature
	}
	return nil
}

type CMsgClientNetworkingMobileCertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientNetworkingMobileCertRequest) Reset() {
	*x = CMsgClientNetworkingMobileCertRequest{}
	mi := &file_steammessages_clientserver_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientNetworkingMobileCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNetworkingMobileCertRequest) ProtoMessage() {}

func (x *CMsgClientNetworkingMobileCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNetworkingMobileCertRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientNetworkingMobileCertRequest) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgClientNetworkingMobileCertRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientNetworkingMobileCertReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncodedCert   *string                `protobuf:"bytes,1,opt,name=encoded_cert,json=encodedCert" json:"encoded_cert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientNetworkingMobileCertReply) Reset() {
	*x = CMsgClientNetworkingMobileCertReply{}
	mi := &file_steammessages_clientserver_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientNetworkingMobileCertReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNetworkingMobileCertReply) ProtoMessage() {}

func (x *CMsgClientNetworkingMobileCertReply) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNetworkingMobileCertReply.ProtoReflect.Descriptor instead.
func (*CMsgClientNetworkingMobileCertReply) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgClientNetworkingMobileCertReply) GetEncodedCert() string {
	if x != nil && x.EncodedCert != nil {
		return *x.EncodedCert
	}
	return ""
}

type CMsgClientGetAppOwnershipTicket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientGetAppOwnershipTicket) Reset() {
	*x = CMsgClientGetAppOwnershipTicket{}
	mi := &file_steammessages_clientserver_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientGetAppOwnershipTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetAppOwnershipTicket) ProtoMessage() {}

func (x *CMsgClientGetAppOwnershipTicket) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetAppOwnershipTicket.ProtoReflect.Descriptor instead.
func (*CMsgClientGetAppOwnershipTicket) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgClientGetAppOwnershipTicket) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientGetAppOwnershipTicketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *uint32                `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	AppId         *uint32                `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Ticket        []byte                 `protobuf:"bytes,3,opt,name=ticket" json:"ticket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientGetAppOwnershipTicketResponse fields.
const (
	Default_CMsgClientGetAppOwnershipTicketResponse_Eresult = uint32(2)
)

func (x *CMsgClientGetAppOwnershipTicketResponse) Reset() {
	*x = CMsgClientGetAppOwnershipTicketResponse{}
	mi := &file_steammessages_clientserver_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientGetAppOwnershipTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetAppOwnershipTicketResponse) ProtoMessage() {}

func (x *CMsgClientGetAppOwnershipTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetAppOwnershipTicketResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientGetAppOwnershipTicketResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgClientGetAppOwnershipTicketResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientGetAppOwnershipTicketResponse_Eresult
}

func (x *CMsgClientGetAppOwnershipTicketResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientGetAppOwnershipTicketResponse) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type CMsgClientSessionToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         *uint64                `protobuf:"varint,1,opt,name=token" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientSessionToken) Reset() {
	*x = CMsgClientSessionToken{}
	mi := &file_steammessages_clientserver_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSessionToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSessionToken) ProtoMessage() {}

func (x *CMsgClientSessionToken) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSessionToken.ProtoReflect.Descriptor instead.
func (*CMsgClientSessionToken) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientSessionToken) GetToken() uint64 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

type CMsgClientGameConnectTokens struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MaxTokensToKeep *uint32                `protobuf:"varint,1,opt,name=max_tokens_to_keep,json=maxTokensToKeep,def=10" json:"max_tokens_to_keep,omitempty"`
	Tokens          [][]byte               `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgClientGameConnectTokens fields.
const (
	Default_CMsgClientGameConnectTokens_MaxTokensToKeep = uint32(10)
)

func (x *CMsgClientGameConnectTokens) Reset() {
	*x = CMsgClientGameConnectTokens{}
	mi := &file_steammessages_clientserver_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientGameConnectTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGameConnectTokens) ProtoMessage() {}

func (x *CMsgClientGameConnectTokens) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGameConnectTokens.ProtoReflect.Descriptor instead.
func (*CMsgClientGameConnectTokens) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgClientGameConnectTokens) GetMaxTokensToKeep() uint32 {
	if x != nil && x.MaxTokensToKeep != nil {
		return *x.MaxTokensToKeep
	}
	return Default_CMsgClientGameConnectTokens_MaxTokensToKeep
}

func (x *CMsgClientGameConnectTokens) GetTokens() [][]byte {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CMsgClientGamesPlayed struct {
	state                  protoimpl.MessageState              `protogen:"open.v1"`
	GamesPlayed            []*CMsgClientGamesPlayed_GamePlayed `protobuf:"bytes,1,rep,name=games_played,json=gamesPlayed" json:"games_played,omitempty"`
	ClientOsType           *uint32                             `protobuf:"varint,2,opt,name=client_os_type,json=clientOsType" json:"client_os_type,omitempty"`
	CloudGamingPlatform    *uint32                             `protobuf:"varint,3,opt,name=cloud_gaming_platform,json=cloudGamingPlatform" json:"cloud_gaming_platform,omitempty"`
	RecentReauthentication *bool                               `protobuf:"varint,4,opt,name=recent_reauthentication,json=recentReauthentication" json:"recent_reauthentication,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgClientGamesPlayed) Reset() {
	*x = CMsgClientGamesPlayed{}
	mi := &file_steammessages_clientserver_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientGamesPlayed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGamesPlayed) ProtoMessage() {}

func (x *CMsgClientGamesPlayed) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGamesPlayed.ProtoReflect.Descriptor instead.
func (*CMsgClientGamesPlayed) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientGamesPlayed) GetGamesPlayed() []*CMsgClientGamesPlayed_GamePlayed {
	if x != nil {
		return x.GamesPlayed
	}
	return nil
}

func (x *CMsgClientGamesPlayed) GetClientOsType() uint32 {
	if x != nil && x.ClientOsType != nil {
		return *x.ClientOsType
	}
	return 0
}

func (x *CMsgClientGamesPlayed) GetCloudGamingPlatform() uint32 {
	if x != nil && x.CloudGamingPlatform != nil {
		return *x.CloudGamingPlatform
	}
	return 0
}

func (x *CMsgClientGamesPlayed) GetRecentReauthentication() bool {
	if x != nil && x.RecentReauthentication != nil {
		return *x.RecentReauthentication
	}
	return false
}

type CMsgGSApprove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	OwnerSteamId  *uint64                `protobuf:"fixed64,2,opt,name=owner_steam_id,json=ownerSteamId" json:"owner_steam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGSApprove) Reset() {
	*x = CMsgGSApprove{}
	mi := &file_steammessages_clientserver_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSApprove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSApprove) ProtoMessage() {}

func (x *CMsgGSApprove) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSApprove.ProtoReflect.Descriptor instead.
func (*CMsgGSApprove) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgGSApprove) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSApprove) GetOwnerSteamId() uint64 {
	if x != nil && x.OwnerSteamId != nil {
		return *x.OwnerSteamId
	}
	return 0
}

type CMsgGSDeny struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	EdenyReason   *int32                 `protobuf:"varint,2,opt,name=edeny_reason,json=edenyReason" json:"edeny_reason,omitempty"`
	DenyString    *string                `protobuf:"bytes,3,opt,name=deny_string,json=denyString" json:"deny_string,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGSDeny) Reset() {
	*x = CMsgGSDeny{}
	mi := &file_steammessages_clientserver_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSDeny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSDeny) ProtoMessage() {}

func (x *CMsgGSDeny) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSDeny.ProtoReflect.Descriptor instead.
func (*CMsgGSDeny) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgGSDeny) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSDeny) GetEdenyReason() int32 {
	if x != nil && x.EdenyReason != nil {
		return *x.EdenyReason
	}
	return 0
}

func (x *CMsgGSDeny) GetDenyString() string {
	if x != nil && x.DenyString != nil {
		return *x.DenyString
	}
	return ""
}

type CMsgGSKick struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	EdenyReason   *int32                 `protobuf:"varint,2,opt,name=edeny_reason,json=edenyReason" json:"edeny_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGSKick) Reset() {
	*x = CMsgGSKick{}
	mi := &file_steammessages_clientserver_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSKick) ProtoMessage() {}

func (x *CMsgGSKick) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSKick.ProtoReflect.Descriptor instead.
func (*CMsgGSKick) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgGSKick) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSKick) GetEdenyReason() int32 {
	if x != nil && x.EdenyReason != nil {
		return *x.EdenyReason
	}
	return 0
}

type CMsgClientAuthList struct {
	state                    protoimpl.MessageState                     `protogen:"open.v1"`
	TokensLeft               *uint32                                    `protobuf:"varint,1,opt,name=tokens_left,json=tokensLeft" json:"tokens_left,omitempty"`
	LastRequestSeq           *uint32                                    `protobuf:"varint,2,opt,name=last_request_seq,json=lastRequestSeq" json:"last_request_seq,omitempty"`
	LastRequestSeqFromServer *uint32                                    `protobuf:"varint,3,opt,name=last_request_seq_from_server,json=lastRequestSeqFromServer" json:"last_request_seq_from_server,omitempty"`
	Tickets                  []*CMsgAuthTicket `protobuf:"bytes,4,rep,name=tickets" json:"tickets,omitempty"`
	AppIds                   []uint32                                   `protobuf:"varint,5,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
	MessageSequence          *uint32                                    `protobuf:"varint,6,opt,name=message_sequence,json=messageSequence" json:"message_sequence,omitempty"`
	Filtered                 *bool                                      `protobuf:"varint,7,opt,name=filtered" json:"filtered,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CMsgClientAuthList) Reset() {
	*x = CMsgClientAuthList{}
	mi := &file_steammessages_clientserver_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAuthList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAuthList) ProtoMessage() {}

func (x *CMsgClientAuthList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAuthList.ProtoReflect.Descriptor instead.
func (*CMsgClientAuthList) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgClientAuthList) GetTokensLeft() uint32 {
	if x != nil && x.TokensLeft != nil {
		return *x.TokensLeft
	}
	return 0
}

func (x *CMsgClientAuthList) GetLastRequestSeq() uint32 {
	if x != nil && x.LastRequestSeq != nil {
		return *x.LastRequestSeq
	}
	return 0
}

func (x *CMsgClientAuthList) GetLastRequestSeqFromServer() uint32 {
	if x != nil && x.LastRequestSeqFromServer != nil {
		return *x.LastRequestSeqFromServer
	}
	return 0
}

func (x *CMsgClientAuthList) GetTickets() []*CMsgAuthTicket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *CMsgClientAuthList) GetAppIds() []uint32 {
	if x != nil {
		return x.AppIds
	}
	return nil
}

func (x *CMsgClientAuthList) GetMessageSequence() uint32 {
	if x != nil && x.MessageSequence != nil {
		return *x.MessageSequence
	}
	return 0
}

func (x *CMsgClientAuthList) GetFiltered() bool {
	if x != nil && x.Filtered != nil {
		return *x.Filtered
	}
	return false
}

type CMsgClientAuthListAck struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TicketCrc       []uint32               `protobuf:"varint,1,rep,name=ticket_crc,json=ticketCrc" json:"ticket_crc,omitempty"`
	AppIds          []uint32               `protobuf:"varint,2,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
	MessageSequence *uint32                `protobuf:"varint,3,opt,name=message_sequence,json=messageSequence" json:"message_sequence,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientAuthListAck) Reset() {
	*x = CMsgClientAuthListAck{}
	mi := &file_steammessages_clientserver_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAuthListAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAuthListAck) ProtoMessage() {}

func (x *CMsgClientAuthListAck) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAuthListAck.ProtoReflect.Descriptor instead.
func (*CMsgClientAuthListAck) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgClientAuthListAck) GetTicketCrc() []uint32 {
	if x != nil {
		return x.TicketCrc
	}
	return nil
}

func (x *CMsgClientAuthListAck) GetAppIds() []uint32 {
	if x != nil {
		return x.AppIds
	}
	return nil
}

func (x *CMsgClientAuthListAck) GetMessageSequence() uint32 {
	if x != nil && x.MessageSequence != nil {
		return *x.MessageSequence
	}
	return 0
}

type CMsgClientLicenseList struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Eresult       *int32                           `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Licenses      []*CMsgClientLicenseList_License `protobuf:"bytes,2,rep,name=licenses" json:"licenses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientLicenseList fields.
const (
	Default_CMsgClientLicenseList_Eresult = int32(2)
)

func (x *CMsgClientLicenseList) Reset() {
	*x = CMsgClientLicenseList{}
	mi := &file_steammessages_clientserver_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLicenseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLicenseList) ProtoMessage() {}

func (x *CMsgClientLicenseList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLicenseList.ProtoReflect.Descriptor instead.
func (*CMsgClientLicenseList) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgClientLicenseList) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLicenseList_Eresult
}

func (x *CMsgClientLicenseList) GetLicenses() []*CMsgClientLicenseList_License {
	if x != nil {
		return x.Licenses
	}
	return nil
}

type CMsgClientIsLimitedAccount struct {
	state                                   protoimpl.MessageState `protogen:"open.v1"`
	BisLimitedAccount                       *bool                  `protobuf:"varint,1,opt,name=bis_limited_account,json=bisLimitedAccount" json:"bis_limited_account,omitempty"`
	BisCommunityBanned                      *bool                  `protobuf:"varint,2,opt,name=bis_community_banned,json=bisCommunityBanned" json:"bis_community_banned,omitempty"`
	BisLockedAccount                        *bool                  `protobuf:"varint,3,opt,name=bis_locked_account,json=bisLockedAccount" json:"bis_locked_account,omitempty"`
	BisLimitedAccountAllowedToInviteFriends *bool                  `protobuf:"varint,4,opt,name=bis_limited_account_allowed_to_invite_friends,json=bisLimitedAccountAllowedToInviteFriends" json:"bis_limited_account_allowed_to_invite_friends,omitempty"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *CMsgClientIsLimitedAccount) Reset() {
	*x = CMsgClientIsLimitedAccount{}
	mi := &file_steammessages_clientserver_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientIsLimitedAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientIsLimitedAccount) ProtoMessage() {}

func (x *CMsgClientIsLimitedAccount) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientIsLimitedAccount.ProtoReflect.Descriptor instead.
func (*CMsgClientIsLimitedAccount) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgClientIsLimitedAccount) GetBisLimitedAccount() bool {
	if x != nil && x.BisLimitedAccount != nil {
		return *x.BisLimitedAccount
	}
	return false
}

func (x *CMsgClientIsLimitedAccount) GetBisCommunityBanned() bool {
	if x != nil && x.BisCommunityBanned != nil {
		return *x.BisCommunityBanned
	}
	return false
}

func (x *CMsgClientIsLimitedAccount) GetBisLockedAccount() bool {
	if x != nil && x.BisLockedAccount != nil {
		return *x.BisLockedAccount
	}
	return false
}

func (x *CMsgClientIsLimitedAccount) GetBisLimitedAccountAllowedToInviteFriends() bool {
	if x != nil && x.BisLimitedAccountAllowedToInviteFriends != nil {
		return *x.BisLimitedAccountAllowedToInviteFriends
	}
	return false
}

type CMsgClientRequestedClientStats struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	StatsToSend   []*CMsgClientRequestedClientStats_StatsToSend `protobuf:"bytes,1,rep,name=stats_to_send,json=statsToSend" json:"stats_to_send,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientRequestedClientStats) Reset() {
	*x = CMsgClientRequestedClientStats{}
	mi := &file_steammessages_clientserver_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientRequestedClientStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestedClientStats) ProtoMessage() {}

func (x *CMsgClientRequestedClientStats) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestedClientStats.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestedClientStats) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgClientRequestedClientStats) GetStatsToSend() []*CMsgClientRequestedClientStats_StatsToSend {
	if x != nil {
		return x.StatsToSend
	}
	return nil
}

type CMsgClientStat2 struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	StatDetail    []*CMsgClientStat2_StatDetail `protobuf:"bytes,1,rep,name=stat_detail,json=statDetail" json:"stat_detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientStat2) Reset() {
	*x = CMsgClientStat2{}
	mi := &file_steammessages_clientserver_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientStat2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStat2) ProtoMessage() {}

func (x *CMsgClientStat2) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStat2.ProtoReflect.Descriptor instead.
func (*CMsgClientStat2) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgClientStat2) GetStatDetail() []*CMsgClientStat2_StatDetail {
	if x != nil {
		return x.StatDetail
	}
	return nil
}

type CMsgClientInviteToGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamIdDest   *uint64                `protobuf:"fixed64,1,opt,name=steam_id_dest,json=steamIdDest" json:"steam_id_dest,omitempty"`
	SteamIdSrc    *uint64                `protobuf:"fixed64,2,opt,name=steam_id_src,json=steamIdSrc" json:"steam_id_src,omitempty"`
	ConnectString *string                `protobuf:"bytes,3,opt,name=connect_string,json=connectString" json:"connect_string,omitempty"`
	RemotePlay    *string                `protobuf:"bytes,4,opt,name=remote_play,json=remotePlay" json:"remote_play,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientInviteToGame) Reset() {
	*x = CMsgClientInviteToGame{}
	mi := &file_steammessages_clientserver_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientInviteToGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientInviteToGame) ProtoMessage() {}

func (x *CMsgClientInviteToGame) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientInviteToGame.ProtoReflect.Descriptor instead.
func (*CMsgClientInviteToGame) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgClientInviteToGame) GetSteamIdDest() uint64 {
	if x != nil && x.SteamIdDest != nil {
		return *x.SteamIdDest
	}
	return 0
}

func (x *CMsgClientInviteToGame) GetSteamIdSrc() uint64 {
	if x != nil && x.SteamIdSrc != nil {
		return *x.SteamIdSrc
	}
	return 0
}

func (x *CMsgClientInviteToGame) GetConnectString() string {
	if x != nil && x.ConnectString != nil {
		return *x.ConnectString
	}
	return ""
}

func (x *CMsgClientInviteToGame) GetRemotePlay() string {
	if x != nil && x.RemotePlay != nil {
		return *x.RemotePlay
	}
	return ""
}

type CMsgClientChatInvite struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SteamIdInvited    *uint64                `protobuf:"fixed64,1,opt,name=steam_id_invited,json=steamIdInvited" json:"steam_id_invited,omitempty"`
	SteamIdChat       *uint64                `protobuf:"fixed64,2,opt,name=steam_id_chat,json=steamIdChat" json:"steam_id_chat,omitempty"`
	SteamIdPatron     *uint64                `protobuf:"fixed64,3,opt,name=steam_id_patron,json=steamIdPatron" json:"steam_id_patron,omitempty"`
	ChatroomType      *int32                 `protobuf:"varint,4,opt,name=chatroom_type,json=chatroomType" json:"chatroom_type,omitempty"`
	SteamIdFriendChat *uint64                `protobuf:"fixed64,5,opt,name=steam_id_friend_chat,json=steamIdFriendChat" json:"steam_id_friend_chat,omitempty"`
	ChatName          *string                `protobuf:"bytes,6,opt,name=chat_name,json=chatName" json:"chat_name,omitempty"`
	GameId            *uint64                `protobuf:"fixed64,7,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgClientChatInvite) Reset() {
	*x = CMsgClientChatInvite{}
	mi := &file_steammessages_clientserver_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChatInvite) ProtoMessage() {}

func (x *CMsgClientChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChatInvite.ProtoReflect.Descriptor instead.
func (*CMsgClientChatInvite) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgClientChatInvite) GetSteamIdInvited() uint64 {
	if x != nil && x.SteamIdInvited != nil {
		return *x.SteamIdInvited
	}
	return 0
}

func (x *CMsgClientChatInvite) GetSteamIdChat() uint64 {
	if x != nil && x.SteamIdChat != nil {
		return *x.SteamIdChat
	}
	return 0
}

func (x *CMsgClientChatInvite) GetSteamIdPatron() uint64 {
	if x != nil && x.SteamIdPatron != nil {
		return *x.SteamIdPatron
	}
	return 0
}

func (x *CMsgClientChatInvite) GetChatroomType() int32 {
	if x != nil && x.ChatroomType != nil {
		return *x.ChatroomType
	}
	return 0
}

func (x *CMsgClientChatInvite) GetSteamIdFriendChat() uint64 {
	if x != nil && x.SteamIdFriendChat != nil {
		return *x.SteamIdFriendChat
	}
	return 0
}

func (x *CMsgClientChatInvite) GetChatName() string {
	if x != nil && x.ChatName != nil {
		return *x.ChatName
	}
	return ""
}

func (x *CMsgClientChatInvite) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CMsgClientConnectionStats struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	StatsLogon    *CMsgClientConnectionStats_Stats_Logon `protobuf:"bytes,1,opt,name=stats_logon,json=statsLogon" json:"stats_logon,omitempty"`
	StatsVconn    *CMsgClientConnectionStats_Stats_VConn `protobuf:"bytes,2,opt,name=stats_vconn,json=statsVconn" json:"stats_vconn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientConnectionStats) Reset() {
	*x = CMsgClientConnectionStats{}
	mi := &file_steammessages_clientserver_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientConnectionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStats) ProtoMessage() {}

func (x *CMsgClientConnectionStats) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStats.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStats) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgClientConnectionStats) GetStatsLogon() *CMsgClientConnectionStats_Stats_Logon {
	if x != nil {
		return x.StatsLogon
	}
	return nil
}

func (x *CMsgClientConnectionStats) GetStatsVconn() *CMsgClientConnectionStats_Stats_VConn {
	if x != nil {
		return x.StatsVconn
	}
	return nil
}

type CMsgClientServersAvailable struct {
	state                     protoimpl.MessageState                               `protogen:"open.v1"`
	ServerTypesAvailable      []*CMsgClientServersAvailable_Server_Types_Available `protobuf:"bytes,1,rep,name=server_types_available,json=serverTypesAvailable" json:"server_types_available,omitempty"`
	ServerTypeForAuthServices *uint32                                              `protobuf:"varint,2,opt,name=server_type_for_auth_services,json=serverTypeForAuthServices" json:"server_type_for_auth_services,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CMsgClientServersAvailable) Reset() {
	*x = CMsgClientServersAvailable{}
	mi := &file_steammessages_clientserver_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientServersAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServersAvailable) ProtoMessage() {}

func (x *CMsgClientServersAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServersAvailable.ProtoReflect.Descriptor instead.
func (*CMsgClientServersAvailable) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgClientServersAvailable) GetServerTypesAvailable() []*CMsgClientServersAvailable_Server_Types_Available {
	if x != nil {
		return x.ServerTypesAvailable
	}
	return nil
}

func (x *CMsgClientServersAvailable) GetServerTypeForAuthServices() uint32 {
	if x != nil && x.ServerTypeForAuthServices != nil {
		return *x.ServerTypeForAuthServices
	}
	return 0
}

type CMsgClientReportOverlayDetourFailure struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FailureStrings []string               `protobuf:"bytes,1,rep,name=failure_strings,json=failureStrings" json:"failure_strings,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientReportOverlayDetourFailure) Reset() {
	*x = CMsgClientReportOverlayDetourFailure{}
	mi := &file_steammessages_clientserver_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientReportOverlayDetourFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientReportOverlayDetourFailure) ProtoMessage() {}

func (x *CMsgClientReportOverlayDetourFailure) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientReportOverlayDetourFailure.ProtoReflect.Descriptor instead.
func (*CMsgClientReportOverlayDetourFailure) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgClientReportOverlayDetourFailure) GetFailureStrings() []string {
	if x != nil {
		return x.FailureStrings
	}
	return nil
}

type CMsgClientRequestEncryptedAppTicket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Userdata      []byte                 `protobuf:"bytes,2,opt,name=userdata" json:"userdata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientRequestEncryptedAppTicket) Reset() {
	*x = CMsgClientRequestEncryptedAppTicket{}
	mi := &file_steammessages_clientserver_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientRequestEncryptedAppTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestEncryptedAppTicket) ProtoMessage() {}

func (x *CMsgClientRequestEncryptedAppTicket) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestEncryptedAppTicket.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestEncryptedAppTicket) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgClientRequestEncryptedAppTicket) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientRequestEncryptedAppTicket) GetUserdata() []byte {
	if x != nil {
		return x.Userdata
	}
	return nil
}

type CMsgClientRequestEncryptedAppTicketResponse struct {
	state              protoimpl.MessageState                         `protogen:"open.v1"`
	AppId              *uint32                                        `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Eresult            *int32                                         `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	EncryptedAppTicket *EncryptedAppTicket `protobuf:"bytes,3,opt,name=encrypted_app_ticket,json=encryptedAppTicket" json:"encrypted_app_ticket,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgClientRequestEncryptedAppTicketResponse fields.
const (
	Default_CMsgClientRequestEncryptedAppTicketResponse_Eresult = int32(2)
)

func (x *CMsgClientRequestEncryptedAppTicketResponse) Reset() {
	*x = CMsgClientRequestEncryptedAppTicketResponse{}
	mi := &file_steammessages_clientserver_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientRequestEncryptedAppTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestEncryptedAppTicketResponse) ProtoMessage() {}

func (x *CMsgClientRequestEncryptedAppTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestEncryptedAppTicketResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestEncryptedAppTicketResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgClientRequestEncryptedAppTicketResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientRequestEncryptedAppTicketResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientRequestEncryptedAppTicketResponse_Eresult
}

func (x *CMsgClientRequestEncryptedAppTicketResponse) GetEncryptedAppTicket() *EncryptedAppTicket {
	if x != nil {
		return x.EncryptedAppTicket
	}
	return nil
}

type CMsgClientWalletInfoUpdate struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	HasWallet        *bool                  `protobuf:"varint,1,opt,name=has_wallet,json=hasWallet" json:"has_wallet,omitempty"`
	Balance          *int32                 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	Currency         *int32                 `protobuf:"varint,3,opt,name=currency" json:"currency,omitempty"`
	BalanceDelayed   *int32                 `protobuf:"varint,4,opt,name=balance_delayed,json=balanceDelayed" json:"balance_delayed,omitempty"`
	Balance64        *int64                 `protobuf:"varint,5,opt,name=balance64" json:"balance64,omitempty"`
	Balance64Delayed *int64                 `protobuf:"varint,6,opt,name=balance64_delayed,json=balance64Delayed" json:"balance64_delayed,omitempty"`
	Realm            *int32                 `protobuf:"varint,7,opt,name=realm" json:"realm,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgClientWalletInfoUpdate) Reset() {
	*x = CMsgClientWalletInfoUpdate{}
	mi := &file_steammessages_clientserver_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientWalletInfoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWalletInfoUpdate) ProtoMessage() {}

func (x *CMsgClientWalletInfoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWalletInfoUpdate.ProtoReflect.Descriptor instead.
func (*CMsgClientWalletInfoUpdate) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgClientWalletInfoUpdate) GetHasWallet() bool {
	if x != nil && x.HasWallet != nil {
		return *x.HasWallet
	}
	return false
}

func (x *CMsgClientWalletInfoUpdate) GetBalance() int32 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *CMsgClientWalletInfoUpdate) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *CMsgClientWalletInfoUpdate) GetBalanceDelayed() int32 {
	if x != nil && x.BalanceDelayed != nil {
		return *x.BalanceDelayed
	}
	return 0
}

func (x *CMsgClientWalletInfoUpdate) GetBalance64() int64 {
	if x != nil && x.Balance64 != nil {
		return *x.Balance64
	}
	return 0
}

func (x *CMsgClientWalletInfoUpdate) GetBalance64Delayed() int64 {
	if x != nil && x.Balance64Delayed != nil {
		return *x.Balance64Delayed
	}
	return 0
}

func (x *CMsgClientWalletInfoUpdate) GetRealm() int32 {
	if x != nil && x.Realm != nil {
		return *x.Realm
	}
	return 0
}

type CMsgClientAMGetClanOfficers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamidClan   *uint64                `protobuf:"fixed64,1,opt,name=steamid_clan,json=steamidClan" json:"steamid_clan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientAMGetClanOfficers) Reset() {
	*x = CMsgClientAMGetClanOfficers{}
	mi := &file_steammessages_clientserver_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAMGetClanOfficers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetClanOfficers) ProtoMessage() {}

func (x *CMsgClientAMGetClanOfficers) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetClanOfficers.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetClanOfficers) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgClientAMGetClanOfficers) GetSteamidClan() uint64 {
	if x != nil && x.SteamidClan != nil {
		return *x.SteamidClan
	}
	return 0
}

type CMsgClientAMGetClanOfficersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *int32                 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	SteamidClan   *uint64                `protobuf:"fixed64,2,opt,name=steamid_clan,json=steamidClan" json:"steamid_clan,omitempty"`
	OfficerCount  *int32                 `protobuf:"varint,3,opt,name=officer_count,json=officerCount" json:"officer_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientAMGetClanOfficersResponse fields.
const (
	Default_CMsgClientAMGetClanOfficersResponse_Eresult = int32(2)
)

func (x *CMsgClientAMGetClanOfficersResponse) Reset() {
	*x = CMsgClientAMGetClanOfficersResponse{}
	mi := &file_steammessages_clientserver_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAMGetClanOfficersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetClanOfficersResponse) ProtoMessage() {}

func (x *CMsgClientAMGetClanOfficersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetClanOfficersResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetClanOfficersResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgClientAMGetClanOfficersResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientAMGetClanOfficersResponse_Eresult
}

func (x *CMsgClientAMGetClanOfficersResponse) GetSteamidClan() uint64 {
	if x != nil && x.SteamidClan != nil {
		return *x.SteamidClan
	}
	return 0
}

func (x *CMsgClientAMGetClanOfficersResponse) GetOfficerCount() int32 {
	if x != nil && x.OfficerCount != nil {
		return *x.OfficerCount
	}
	return 0
}

type CMsgClientAMGetPersonaNameHistory struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	IdCount       *int32                                          `protobuf:"varint,1,opt,name=id_count,json=idCount" json:"id_count,omitempty"`
	Ids           []*CMsgClientAMGetPersonaNameHistory_IdInstance `protobuf:"bytes,2,rep,name=Ids" json:"Ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientAMGetPersonaNameHistory) Reset() {
	*x = CMsgClientAMGetPersonaNameHistory{}
	mi := &file_steammessages_clientserver_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAMGetPersonaNameHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistory) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistory) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistory.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistory) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgClientAMGetPersonaNameHistory) GetIdCount() int32 {
	if x != nil && x.IdCount != nil {
		return *x.IdCount
	}
	return 0
}

func (x *CMsgClientAMGetPersonaNameHistory) GetIds() []*CMsgClientAMGetPersonaNameHistory_IdInstance {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CMsgClientAMGetPersonaNameHistoryResponse struct {
	state         protoimpl.MessageState                                         `protogen:"open.v1"`
	Responses     []*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance `protobuf:"bytes,2,rep,name=responses" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse) Reset() {
	*x = CMsgClientAMGetPersonaNameHistoryResponse{}
	mi := &file_steammessages_clientserver_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistoryResponse) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistoryResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistoryResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse) GetResponses() []*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance {
	if x != nil {
		return x.Responses
	}
	return nil
}

type CMsgClientDeregisterWithServer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eservertype   *uint32                `protobuf:"varint,1,opt,name=eservertype" json:"eservertype,omitempty"`
	AppId         *uint32                `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientDeregisterWithServer) Reset() {
	*x = CMsgClientDeregisterWithServer{}
	mi := &file_steammessages_clientserver_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientDeregisterWithServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientDeregisterWithServer) ProtoMessage() {}

func (x *CMsgClientDeregisterWithServer) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientDeregisterWithServer.ProtoReflect.Descriptor instead.
func (*CMsgClientDeregisterWithServer) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgClientDeregisterWithServer) GetEservertype() uint32 {
	if x != nil && x.Eservertype != nil {
		return *x.Eservertype
	}
	return 0
}

func (x *CMsgClientDeregisterWithServer) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientClanState struct {
	state            protoimpl.MessageState          `protogen:"open.v1"`
	SteamidClan      *uint64                         `protobuf:"fixed64,1,opt,name=steamid_clan,json=steamidClan" json:"steamid_clan,omitempty"`
	ClanAccountFlags *uint32                         `protobuf:"varint,3,opt,name=clan_account_flags,json=clanAccountFlags" json:"clan_account_flags,omitempty"`
	NameInfo         *CMsgClientClanState_NameInfo   `protobuf:"bytes,4,opt,name=name_info,json=nameInfo" json:"name_info,omitempty"`
	UserCounts       *CMsgClientClanState_UserCounts `protobuf:"bytes,5,opt,name=user_counts,json=userCounts" json:"user_counts,omitempty"`
	Events           []*CMsgClientClanState_Event    `protobuf:"bytes,6,rep,name=events" json:"events,omitempty"`
	Announcements    []*CMsgClientClanState_Event    `protobuf:"bytes,7,rep,name=announcements" json:"announcements,omitempty"`
	ChatRoomPrivate  *bool                           `protobuf:"varint,8,opt,name=chat_room_private,json=chatRoomPrivate" json:"chat_room_private,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgClientClanState) Reset() {
	*x = CMsgClientClanState{}
	mi := &file_steammessages_clientserver_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientClanState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientClanState) ProtoMessage() {}

func (x *CMsgClientClanState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientClanState.ProtoReflect.Descriptor instead.
func (*CMsgClientClanState) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgClientClanState) GetSteamidClan() uint64 {
	if x != nil && x.SteamidClan != nil {
		return *x.SteamidClan
	}
	return 0
}

func (x *CMsgClientClanState) GetClanAccountFlags() uint32 {
	if x != nil && x.ClanAccountFlags != nil {
		return *x.ClanAccountFlags
	}
	return 0
}

func (x *CMsgClientClanState) GetNameInfo() *CMsgClientClanState_NameInfo {
	if x != nil {
		return x.NameInfo
	}
	return nil
}

func (x *CMsgClientClanState) GetUserCounts() *CMsgClientClanState_UserCounts {
	if x != nil {
		return x.UserCounts
	}
	return nil
}

func (x *CMsgClientClanState) GetEvents() []*CMsgClientClanState_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CMsgClientClanState) GetAnnouncements() []*CMsgClientClanState_Event {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *CMsgClientClanState) GetChatRoomPrivate() bool {
	if x != nil && x.ChatRoomPrivate != nil {
		return *x.ChatRoomPrivate
	}
	return false
}

type CMsgClientGamesPlayed_ProcessInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProcessId       *uint32                `protobuf:"varint,1,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	ProcessIdParent *uint32                `protobuf:"varint,2,opt,name=process_id_parent,json=processIdParent" json:"process_id_parent,omitempty"`
	ParentIsSteam   *bool                  `protobuf:"varint,3,opt,name=parent_is_steam,json=parentIsSteam" json:"parent_is_steam,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientGamesPlayed_ProcessInfo) Reset() {
	*x = CMsgClientGamesPlayed_ProcessInfo{}
	mi := &file_steammessages_clientserver_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientGamesPlayed_ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGamesPlayed_ProcessInfo) ProtoMessage() {}

func (x *CMsgClientGamesPlayed_ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGamesPlayed_ProcessInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientGamesPlayed_ProcessInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgClientGamesPlayed_ProcessInfo) GetProcessId() uint32 {
	if x != nil && x.ProcessId != nil {
		return *x.ProcessId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_ProcessInfo) GetProcessIdParent() uint32 {
	if x != nil && x.ProcessIdParent != nil {
		return *x.ProcessIdParent
	}
	return 0
}

func (x *CMsgClientGamesPlayed_ProcessInfo) GetParentIsSteam() bool {
	if x != nil && x.ParentIsSteam != nil {
		return *x.ParentIsSteam
	}
	return false
}

type CMsgClientGamesPlayed_GamePlayed struct {
	state                        protoimpl.MessageState                  `protogen:"open.v1"`
	SteamIdGs                    *uint64                                 `protobuf:"varint,1,opt,name=steam_id_gs,json=steamIdGs" json:"steam_id_gs,omitempty"`
	GameId                       *uint64                                 `protobuf:"fixed64,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	DeprecatedGameIpAddress      *uint32                                 `protobuf:"varint,3,opt,name=deprecated_game_ip_address,json=deprecatedGameIpAddress" json:"deprecated_game_ip_address,omitempty"`
	GamePort                     *uint32                                 `protobuf:"varint,4,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	IsSecure                     *bool                                   `protobuf:"varint,5,opt,name=is_secure,json=isSecure" json:"is_secure,omitempty"`
	Token                        []byte                                  `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	GameExtraInfo                *string                                 `protobuf:"bytes,7,opt,name=game_extra_info,json=gameExtraInfo" json:"game_extra_info,omitempty"`
	GameDataBlob                 []byte                                  `protobuf:"bytes,8,opt,name=game_data_blob,json=gameDataBlob" json:"game_data_blob,omitempty"`
	ProcessId                    *uint32                                 `protobuf:"varint,9,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	StreamingProviderId          *uint32                                 `protobuf:"varint,10,opt,name=streaming_provider_id,json=streamingProviderId" json:"streaming_provider_id,omitempty"`
	GameFlags                    *uint32                                 `protobuf:"varint,11,opt,name=game_flags,json=gameFlags" json:"game_flags,omitempty"`
	OwnerId                      *uint32                                 `protobuf:"varint,12,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	VrHmdVendor                  *string                                 `protobuf:"bytes,13,opt,name=vr_hmd_vendor,json=vrHmdVendor" json:"vr_hmd_vendor,omitempty"`
	VrHmdModel                   *string                                 `protobuf:"bytes,14,opt,name=vr_hmd_model,json=vrHmdModel" json:"vr_hmd_model,omitempty"`
	LaunchOptionType             *uint32                                 `protobuf:"varint,15,opt,name=launch_option_type,json=launchOptionType,def=0" json:"launch_option_type,omitempty"`
	PrimaryControllerType        *int32                                  `protobuf:"varint,16,opt,name=primary_controller_type,json=primaryControllerType,def=-1" json:"primary_controller_type,omitempty"`
	PrimarySteamControllerSerial *string                                 `protobuf:"bytes,17,opt,name=primary_steam_controller_serial,json=primarySteamControllerSerial" json:"primary_steam_controller_serial,omitempty"`
	TotalSteamControllerCount    *uint32                                 `protobuf:"varint,18,opt,name=total_steam_controller_count,json=totalSteamControllerCount,def=0" json:"total_steam_controller_count,omitempty"`
	TotalNonSteamControllerCount *uint32                                 `protobuf:"varint,19,opt,name=total_non_steam_controller_count,json=totalNonSteamControllerCount,def=0" json:"total_non_steam_controller_count,omitempty"`
	ControllerWorkshopFileId     *uint64                                 `protobuf:"varint,20,opt,name=controller_workshop_file_id,json=controllerWorkshopFileId,def=0" json:"controller_workshop_file_id,omitempty"`
	LaunchSource                 *uint32                                 `protobuf:"varint,21,opt,name=launch_source,json=launchSource,def=0" json:"launch_source,omitempty"`
	VrHmdRuntime                 *uint32                                 `protobuf:"varint,22,opt,name=vr_hmd_runtime,json=vrHmdRuntime" json:"vr_hmd_runtime,omitempty"`
	GameIpAddress                *CMsgIPAddress `protobuf:"bytes,23,opt,name=game_ip_address,json=gameIpAddress" json:"game_ip_address,omitempty"`
	ControllerConnectionType     *uint32                                 `protobuf:"varint,24,opt,name=controller_connection_type,json=controllerConnectionType,def=0" json:"controller_connection_type,omitempty"`
	GameOsPlatform               *int32                                  `protobuf:"varint,25,opt,name=game_os_platform,json=gameOsPlatform" json:"game_os_platform,omitempty"`
	GameBuildId                  *uint32                                 `protobuf:"varint,26,opt,name=game_build_id,json=gameBuildId" json:"game_build_id,omitempty"`
	CompatToolId                 *uint32                                 `protobuf:"varint,27,opt,name=compat_tool_id,json=compatToolId,def=0" json:"compat_tool_id,omitempty"`
	CompatToolCmd                *string                                 `protobuf:"bytes,28,opt,name=compat_tool_cmd,json=compatToolCmd" json:"compat_tool_cmd,omitempty"`
	CompatToolBuildId            *uint32                                 `protobuf:"varint,29,opt,name=compat_tool_build_id,json=compatToolBuildId" json:"compat_tool_build_id,omitempty"`
	BetaName                     *string                                 `protobuf:"bytes,30,opt,name=beta_name,json=betaName" json:"beta_name,omitempty"`
	DlcContext                   *uint32                                 `protobuf:"varint,31,opt,name=dlc_context,json=dlcContext" json:"dlc_context,omitempty"`
	ProcessIdList                []*CMsgClientGamesPlayed_ProcessInfo    `protobuf:"bytes,32,rep,name=process_id_list,json=processIdList" json:"process_id_list,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

// Default values for CMsgClientGamesPlayed_GamePlayed fields.
const (
	Default_CMsgClientGamesPlayed_GamePlayed_LaunchOptionType             = uint32(0)
	Default_CMsgClientGamesPlayed_GamePlayed_PrimaryControllerType        = int32(-1)
	Default_CMsgClientGamesPlayed_GamePlayed_TotalSteamControllerCount    = uint32(0)
	Default_CMsgClientGamesPlayed_GamePlayed_TotalNonSteamControllerCount = uint32(0)
	Default_CMsgClientGamesPlayed_GamePlayed_ControllerWorkshopFileId     = uint64(0)
	Default_CMsgClientGamesPlayed_GamePlayed_LaunchSource                 = uint32(0)
	Default_CMsgClientGamesPlayed_GamePlayed_ControllerConnectionType     = uint32(0)
	Default_CMsgClientGamesPlayed_GamePlayed_CompatToolId                 = uint32(0)
)

func (x *CMsgClientGamesPlayed_GamePlayed) Reset() {
	*x = CMsgClientGamesPlayed_GamePlayed{}
	mi := &file_steammessages_clientserver_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientGamesPlayed_GamePlayed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGamesPlayed_GamePlayed) ProtoMessage() {}

func (x *CMsgClientGamesPlayed_GamePlayed) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGamesPlayed_GamePlayed.ProtoReflect.Descriptor instead.
func (*CMsgClientGamesPlayed_GamePlayed) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{12, 1}
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetSteamIdGs() uint64 {
	if x != nil && x.SteamIdGs != nil {
		return *x.SteamIdGs
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetDeprecatedGameIpAddress() uint32 {
	if x != nil && x.DeprecatedGameIpAddress != nil {
		return *x.DeprecatedGameIpAddress
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetIsSecure() bool {
	if x != nil && x.IsSecure != nil {
		return *x.IsSecure
	}
	return false
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameExtraInfo() string {
	if x != nil && x.GameExtraInfo != nil {
		return *x.GameExtraInfo
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameDataBlob() []byte {
	if x != nil {
		return x.GameDataBlob
	}
	return nil
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetProcessId() uint32 {
	if x != nil && x.ProcessId != nil {
		return *x.ProcessId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetStreamingProviderId() uint32 {
	if x != nil && x.StreamingProviderId != nil {
		return *x.StreamingProviderId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameFlags() uint32 {
	if x != nil && x.GameFlags != nil {
		return *x.GameFlags
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetVrHmdVendor() string {
	if x != nil && x.VrHmdVendor != nil {
		return *x.VrHmdVendor
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetVrHmdModel() string {
	if x != nil && x.VrHmdModel != nil {
		return *x.VrHmdModel
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetLaunchOptionType() uint32 {
	if x != nil && x.LaunchOptionType != nil {
		return *x.LaunchOptionType
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_LaunchOptionType
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetPrimaryControllerType() int32 {
	if x != nil && x.PrimaryControllerType != nil {
		return *x.PrimaryControllerType
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_PrimaryControllerType
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetPrimarySteamControllerSerial() string {
	if x != nil && x.PrimarySteamControllerSerial != nil {
		return *x.PrimarySteamControllerSerial
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetTotalSteamControllerCount() uint32 {
	if x != nil && x.TotalSteamControllerCount != nil {
		return *x.TotalSteamControllerCount
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_TotalSteamControllerCount
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetTotalNonSteamControllerCount() uint32 {
	if x != nil && x.TotalNonSteamControllerCount != nil {
		return *x.TotalNonSteamControllerCount
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_TotalNonSteamControllerCount
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetControllerWorkshopFileId() uint64 {
	if x != nil && x.ControllerWorkshopFileId != nil {
		return *x.ControllerWorkshopFileId
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_ControllerWorkshopFileId
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetLaunchSource() uint32 {
	if x != nil && x.LaunchSource != nil {
		return *x.LaunchSource
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_LaunchSource
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetVrHmdRuntime() uint32 {
	if x != nil && x.VrHmdRuntime != nil {
		return *x.VrHmdRuntime
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameIpAddress() *CMsgIPAddress {
	if x != nil {
		return x.GameIpAddress
	}
	return nil
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetControllerConnectionType() uint32 {
	if x != nil && x.ControllerConnectionType != nil {
		return *x.ControllerConnectionType
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_ControllerConnectionType
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameOsPlatform() int32 {
	if x != nil && x.GameOsPlatform != nil {
		return *x.GameOsPlatform
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameBuildId() uint32 {
	if x != nil && x.GameBuildId != nil {
		return *x.GameBuildId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetCompatToolId() uint32 {
	if x != nil && x.CompatToolId != nil {
		return *x.CompatToolId
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_CompatToolId
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetCompatToolCmd() string {
	if x != nil && x.CompatToolCmd != nil {
		return *x.CompatToolCmd
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetCompatToolBuildId() uint32 {
	if x != nil && x.CompatToolBuildId != nil {
		return *x.CompatToolBuildId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetBetaName() string {
	if x != nil && x.BetaName != nil {
		return *x.BetaName
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetDlcContext() uint32 {
	if x != nil && x.DlcContext != nil {
		return *x.DlcContext
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetProcessIdList() []*CMsgClientGamesPlayed_ProcessInfo {
	if x != nil {
		return x.ProcessIdList
	}
	return nil
}

type CMsgClientLicenseList_License struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PackageId           *uint32                `protobuf:"varint,1,opt,name=package_id,json=packageId" json:"package_id,omitempty"`
	TimeCreated         *uint32                `protobuf:"fixed32,2,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeNextProcess     *uint32                `protobuf:"fixed32,3,opt,name=time_next_process,json=timeNextProcess" json:"time_next_process,omitempty"`
	MinuteLimit         *int32                 `protobuf:"varint,4,opt,name=minute_limit,json=minuteLimit" json:"minute_limit,omitempty"`
	MinutesUsed         *int32                 `protobuf:"varint,5,opt,name=minutes_used,json=minutesUsed" json:"minutes_used,omitempty"`
	PaymentMethod       *uint32                `protobuf:"varint,6,opt,name=payment_method,json=paymentMethod" json:"payment_method,omitempty"`
	Flags               *uint32                `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	PurchaseCountryCode *string                `protobuf:"bytes,8,opt,name=purchase_country_code,json=purchaseCountryCode" json:"purchase_country_code,omitempty"`
	LicenseType         *uint32                `protobuf:"varint,9,opt,name=license_type,json=licenseType" json:"license_type,omitempty"`
	TerritoryCode       *int32                 `protobuf:"varint,10,opt,name=territory_code,json=territoryCode" json:"territory_code,omitempty"`
	ChangeNumber        *int32                 `protobuf:"varint,11,opt,name=change_number,json=changeNumber" json:"change_number,omitempty"`
	OwnerId             *uint32                `protobuf:"varint,12,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	InitialPeriod       *uint32                `protobuf:"varint,13,opt,name=initial_period,json=initialPeriod" json:"initial_period,omitempty"`
	InitialTimeUnit     *uint32                `protobuf:"varint,14,opt,name=initial_time_unit,json=initialTimeUnit" json:"initial_time_unit,omitempty"`
	RenewalPeriod       *uint32                `protobuf:"varint,15,opt,name=renewal_period,json=renewalPeriod" json:"renewal_period,omitempty"`
	RenewalTimeUnit     *uint32                `protobuf:"varint,16,opt,name=renewal_time_unit,json=renewalTimeUnit" json:"renewal_time_unit,omitempty"`
	AccessToken         *uint64                `protobuf:"varint,17,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	MasterPackageId     *uint32                `protobuf:"varint,18,opt,name=master_package_id,json=masterPackageId" json:"master_package_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgClientLicenseList_License) Reset() {
	*x = CMsgClientLicenseList_License{}
	mi := &file_steammessages_clientserver_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLicenseList_License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLicenseList_License) ProtoMessage() {}

func (x *CMsgClientLicenseList_License) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLicenseList_License.ProtoReflect.Descriptor instead.
func (*CMsgClientLicenseList_License) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CMsgClientLicenseList_License) GetPackageId() uint32 {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetTimeNextProcess() uint32 {
	if x != nil && x.TimeNextProcess != nil {
		return *x.TimeNextProcess
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetMinuteLimit() int32 {
	if x != nil && x.MinuteLimit != nil {
		return *x.MinuteLimit
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetMinutesUsed() int32 {
	if x != nil && x.MinutesUsed != nil {
		return *x.MinutesUsed
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetPaymentMethod() uint32 {
	if x != nil && x.PaymentMethod != nil {
		return *x.PaymentMethod
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetPurchaseCountryCode() string {
	if x != nil && x.PurchaseCountryCode != nil {
		return *x.PurchaseCountryCode
	}
	return ""
}

func (x *CMsgClientLicenseList_License) GetLicenseType() uint32 {
	if x != nil && x.LicenseType != nil {
		return *x.LicenseType
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetTerritoryCode() int32 {
	if x != nil && x.TerritoryCode != nil {
		return *x.TerritoryCode
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetChangeNumber() int32 {
	if x != nil && x.ChangeNumber != nil {
		return *x.ChangeNumber
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetInitialPeriod() uint32 {
	if x != nil && x.InitialPeriod != nil {
		return *x.InitialPeriod
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetInitialTimeUnit() uint32 {
	if x != nil && x.InitialTimeUnit != nil {
		return *x.InitialTimeUnit
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetRenewalPeriod() uint32 {
	if x != nil && x.RenewalPeriod != nil {
		return *x.RenewalPeriod
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetRenewalTimeUnit() uint32 {
	if x != nil && x.RenewalTimeUnit != nil {
		return *x.RenewalTimeUnit
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetAccessToken() uint64 {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetMasterPackageId() uint32 {
	if x != nil && x.MasterPackageId != nil {
		return *x.MasterPackageId
	}
	return 0
}

type CMsgClientRequestedClientStats_StatsToSend struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ClientStat          *uint32                `protobuf:"varint,1,opt,name=client_stat,json=clientStat" json:"client_stat,omitempty"`
	StatAggregateMethod *uint32                `protobuf:"varint,2,opt,name=stat_aggregate_method,json=statAggregateMethod" json:"stat_aggregate_method,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgClientRequestedClientStats_StatsToSend) Reset() {
	*x = CMsgClientRequestedClientStats_StatsToSend{}
	mi := &file_steammessages_clientserver_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientRequestedClientStats_StatsToSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestedClientStats_StatsToSend) ProtoMessage() {}

func (x *CMsgClientRequestedClientStats_StatsToSend) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestedClientStats_StatsToSend.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestedClientStats_StatsToSend) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CMsgClientRequestedClientStats_StatsToSend) GetClientStat() uint32 {
	if x != nil && x.ClientStat != nil {
		return *x.ClientStat
	}
	return 0
}

func (x *CMsgClientRequestedClientStats_StatsToSend) GetStatAggregateMethod() uint32 {
	if x != nil && x.StatAggregateMethod != nil {
		return *x.StatAggregateMethod
	}
	return 0
}

type CMsgClientStat2_StatDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientStat    *uint32                `protobuf:"varint,1,opt,name=client_stat,json=clientStat" json:"client_stat,omitempty"`
	LlValue       *int64                 `protobuf:"varint,2,opt,name=ll_value,json=llValue" json:"ll_value,omitempty"`
	TimeOfDay     *uint32                `protobuf:"varint,3,opt,name=time_of_day,json=timeOfDay" json:"time_of_day,omitempty"`
	CellId        *uint32                `protobuf:"varint,4,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	DepotId       *uint32                `protobuf:"varint,5,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	AppId         *uint32                `protobuf:"varint,6,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientStat2_StatDetail) Reset() {
	*x = CMsgClientStat2_StatDetail{}
	mi := &file_steammessages_clientserver_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientStat2_StatDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStat2_StatDetail) ProtoMessage() {}

func (x *CMsgClientStat2_StatDetail) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStat2_StatDetail.ProtoReflect.Descriptor instead.
func (*CMsgClientStat2_StatDetail) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CMsgClientStat2_StatDetail) GetClientStat() uint32 {
	if x != nil && x.ClientStat != nil {
		return *x.ClientStat
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetLlValue() int64 {
	if x != nil && x.LlValue != nil {
		return *x.LlValue
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetTimeOfDay() uint32 {
	if x != nil && x.TimeOfDay != nil {
		return *x.TimeOfDay
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientConnectionStats_Stats_Logon struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	ConnectAttempts                *int32                 `protobuf:"varint,1,opt,name=connect_attempts,json=connectAttempts" json:"connect_attempts,omitempty"`
	ConnectSuccesses               *int32                 `protobuf:"varint,2,opt,name=connect_successes,json=connectSuccesses" json:"connect_successes,omitempty"`
	ConnectFailures                *int32                 `protobuf:"varint,3,opt,name=connect_failures,json=connectFailures" json:"connect_failures,omitempty"`
	ConnectionsDropped             *int32                 `protobuf:"varint,4,opt,name=connections_dropped,json=connectionsDropped" json:"connections_dropped,omitempty"`
	SecondsRunning                 *uint32                `protobuf:"varint,5,opt,name=seconds_running,json=secondsRunning" json:"seconds_running,omitempty"`
	MsecTologonthistime            *uint32                `protobuf:"varint,6,opt,name=msec_tologonthistime,json=msecTologonthistime" json:"msec_tologonthistime,omitempty"`
	CountBadCms                    *uint32                `protobuf:"varint,7,opt,name=count_bad_cms,json=countBadCms" json:"count_bad_cms,omitempty"`
	NoUdpConnectivity              *bool                  `protobuf:"varint,8,opt,name=no_udp_connectivity,json=noUdpConnectivity" json:"no_udp_connectivity,omitempty"`
	NoTcpConnectivity              *bool                  `protobuf:"varint,9,opt,name=no_tcp_connectivity,json=noTcpConnectivity" json:"no_tcp_connectivity,omitempty"`
	NoWebsocket_443Connectivity    *bool                  `protobuf:"varint,10,opt,name=no_websocket_443_connectivity,json=noWebsocket443Connectivity" json:"no_websocket_443_connectivity,omitempty"`
	NoWebsocketNon_443Connectivity *bool                  `protobuf:"varint,11,opt,name=no_websocket_non_443_connectivity,json=noWebsocketNon443Connectivity" json:"no_websocket_non_443_connectivity,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CMsgClientConnectionStats_Stats_Logon) Reset() {
	*x = CMsgClientConnectionStats_Stats_Logon{}
	mi := &file_steammessages_clientserver_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientConnectionStats_Stats_Logon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStats_Stats_Logon) ProtoMessage() {}

func (x *CMsgClientConnectionStats_Stats_Logon) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStats_Stats_Logon.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStats_Stats_Logon) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetConnectAttempts() int32 {
	if x != nil && x.ConnectAttempts != nil {
		return *x.ConnectAttempts
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetConnectSuccesses() int32 {
	if x != nil && x.ConnectSuccesses != nil {
		return *x.ConnectSuccesses
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetConnectFailures() int32 {
	if x != nil && x.ConnectFailures != nil {
		return *x.ConnectFailures
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetConnectionsDropped() int32 {
	if x != nil && x.ConnectionsDropped != nil {
		return *x.ConnectionsDropped
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetSecondsRunning() uint32 {
	if x != nil && x.SecondsRunning != nil {
		return *x.SecondsRunning
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetMsecTologonthistime() uint32 {
	if x != nil && x.MsecTologonthistime != nil {
		return *x.MsecTologonthistime
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetCountBadCms() uint32 {
	if x != nil && x.CountBadCms != nil {
		return *x.CountBadCms
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetNoUdpConnectivity() bool {
	if x != nil && x.NoUdpConnectivity != nil {
		return *x.NoUdpConnectivity
	}
	return false
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetNoTcpConnectivity() bool {
	if x != nil && x.NoTcpConnectivity != nil {
		return *x.NoTcpConnectivity
	}
	return false
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetNoWebsocket_443Connectivity() bool {
	if x != nil && x.NoWebsocket_443Connectivity != nil {
		return *x.NoWebsocket_443Connectivity
	}
	return false
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetNoWebsocketNon_443Connectivity() bool {
	if x != nil && x.NoWebsocketNon_443Connectivity != nil {
		return *x.NoWebsocketNon_443Connectivity
	}
	return false
}

type CMsgClientConnectionStats_Stats_UDP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PktsSent      *uint64                `protobuf:"varint,1,opt,name=pkts_sent,json=pktsSent" json:"pkts_sent,omitempty"`
	BytesSent     *uint64                `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	PktsRecv      *uint64                `protobuf:"varint,3,opt,name=pkts_recv,json=pktsRecv" json:"pkts_recv,omitempty"`
	PktsProcessed *uint64                `protobuf:"varint,4,opt,name=pkts_processed,json=pktsProcessed" json:"pkts_processed,omitempty"`
	BytesRecv     *uint64                `protobuf:"varint,5,opt,name=bytes_recv,json=bytesRecv" json:"bytes_recv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientConnectionStats_Stats_UDP) Reset() {
	*x = CMsgClientConnectionStats_Stats_UDP{}
	mi := &file_steammessages_clientserver_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientConnectionStats_Stats_UDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStats_Stats_UDP) ProtoMessage() {}

func (x *CMsgClientConnectionStats_Stats_UDP) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStats_Stats_UDP.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStats_Stats_UDP) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{24, 1}
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetPktsSent() uint64 {
	if x != nil && x.PktsSent != nil {
		return *x.PktsSent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetBytesSent() uint64 {
	if x != nil && x.BytesSent != nil {
		return *x.BytesSent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetPktsRecv() uint64 {
	if x != nil && x.PktsRecv != nil {
		return *x.PktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetPktsProcessed() uint64 {
	if x != nil && x.PktsProcessed != nil {
		return *x.PktsProcessed
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetBytesRecv() uint64 {
	if x != nil && x.BytesRecv != nil {
		return *x.BytesRecv
	}
	return 0
}

type CMsgClientConnectionStats_Stats_VConn struct {
	state                   protoimpl.MessageState               `protogen:"open.v1"`
	ConnectionsUdp          *uint32                              `protobuf:"varint,1,opt,name=connections_udp,json=connectionsUdp" json:"connections_udp,omitempty"`
	ConnectionsTcp          *uint32                              `protobuf:"varint,2,opt,name=connections_tcp,json=connectionsTcp" json:"connections_tcp,omitempty"`
	StatsUdp                *CMsgClientConnectionStats_Stats_UDP `protobuf:"bytes,3,opt,name=stats_udp,json=statsUdp" json:"stats_udp,omitempty"`
	PktsAbandoned           *uint64                              `protobuf:"varint,4,opt,name=pkts_abandoned,json=pktsAbandoned" json:"pkts_abandoned,omitempty"`
	ConnReqReceived         *uint64                              `protobuf:"varint,5,opt,name=conn_req_received,json=connReqReceived" json:"conn_req_received,omitempty"`
	PktsResent              *uint64                              `protobuf:"varint,6,opt,name=pkts_resent,json=pktsResent" json:"pkts_resent,omitempty"`
	MsgsSent                *uint64                              `protobuf:"varint,7,opt,name=msgs_sent,json=msgsSent" json:"msgs_sent,omitempty"`
	MsgsSentFailed          *uint64                              `protobuf:"varint,8,opt,name=msgs_sent_failed,json=msgsSentFailed" json:"msgs_sent_failed,omitempty"`
	MsgsRecv                *uint64                              `protobuf:"varint,9,opt,name=msgs_recv,json=msgsRecv" json:"msgs_recv,omitempty"`
	DatagramsSent           *uint64                              `protobuf:"varint,10,opt,name=datagrams_sent,json=datagramsSent" json:"datagrams_sent,omitempty"`
	DatagramsRecv           *uint64                              `protobuf:"varint,11,opt,name=datagrams_recv,json=datagramsRecv" json:"datagrams_recv,omitempty"`
	BadPktsRecv             *uint64                              `protobuf:"varint,12,opt,name=bad_pkts_recv,json=badPktsRecv" json:"bad_pkts_recv,omitempty"`
	UnknownConnPktsRecv     *uint64                              `protobuf:"varint,13,opt,name=unknown_conn_pkts_recv,json=unknownConnPktsRecv" json:"unknown_conn_pkts_recv,omitempty"`
	MissedPktsRecv          *uint64                              `protobuf:"varint,14,opt,name=missed_pkts_recv,json=missedPktsRecv" json:"missed_pkts_recv,omitempty"`
	DupPktsRecv             *uint64                              `protobuf:"varint,15,opt,name=dup_pkts_recv,json=dupPktsRecv" json:"dup_pkts_recv,omitempty"`
	FailedConnectChallenges *uint64                              `protobuf:"varint,16,opt,name=failed_connect_challenges,json=failedConnectChallenges" json:"failed_connect_challenges,omitempty"`
	MicroSecAvgLatency      *uint32                              `protobuf:"varint,17,opt,name=micro_sec_avg_latency,json=microSecAvgLatency" json:"micro_sec_avg_latency,omitempty"`
	MicroSecMinLatency      *uint32                              `protobuf:"varint,18,opt,name=micro_sec_min_latency,json=microSecMinLatency" json:"micro_sec_min_latency,omitempty"`
	MicroSecMaxLatency      *uint32                              `protobuf:"varint,19,opt,name=micro_sec_max_latency,json=microSecMaxLatency" json:"micro_sec_max_latency,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CMsgClientConnectionStats_Stats_VConn) Reset() {
	*x = CMsgClientConnectionStats_Stats_VConn{}
	mi := &file_steammessages_clientserver_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientConnectionStats_Stats_VConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStats_Stats_VConn) ProtoMessage() {}

func (x *CMsgClientConnectionStats_Stats_VConn) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStats_Stats_VConn.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStats_Stats_VConn) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{24, 2}
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetConnectionsUdp() uint32 {
	if x != nil && x.ConnectionsUdp != nil {
		return *x.ConnectionsUdp
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetConnectionsTcp() uint32 {
	if x != nil && x.ConnectionsTcp != nil {
		return *x.ConnectionsTcp
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetStatsUdp() *CMsgClientConnectionStats_Stats_UDP {
	if x != nil {
		return x.StatsUdp
	}
	return nil
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetPktsAbandoned() uint64 {
	if x != nil && x.PktsAbandoned != nil {
		return *x.PktsAbandoned
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetConnReqReceived() uint64 {
	if x != nil && x.ConnReqReceived != nil {
		return *x.ConnReqReceived
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetPktsResent() uint64 {
	if x != nil && x.PktsResent != nil {
		return *x.PktsResent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMsgsSent() uint64 {
	if x != nil && x.MsgsSent != nil {
		return *x.MsgsSent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMsgsSentFailed() uint64 {
	if x != nil && x.MsgsSentFailed != nil {
		return *x.MsgsSentFailed
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMsgsRecv() uint64 {
	if x != nil && x.MsgsRecv != nil {
		return *x.MsgsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetDatagramsSent() uint64 {
	if x != nil && x.DatagramsSent != nil {
		return *x.DatagramsSent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetDatagramsRecv() uint64 {
	if x != nil && x.DatagramsRecv != nil {
		return *x.DatagramsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetBadPktsRecv() uint64 {
	if x != nil && x.BadPktsRecv != nil {
		return *x.BadPktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetUnknownConnPktsRecv() uint64 {
	if x != nil && x.UnknownConnPktsRecv != nil {
		return *x.UnknownConnPktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMissedPktsRecv() uint64 {
	if x != nil && x.MissedPktsRecv != nil {
		return *x.MissedPktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetDupPktsRecv() uint64 {
	if x != nil && x.DupPktsRecv != nil {
		return *x.DupPktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetFailedConnectChallenges() uint64 {
	if x != nil && x.FailedConnectChallenges != nil {
		return *x.FailedConnectChallenges
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMicroSecAvgLatency() uint32 {
	if x != nil && x.MicroSecAvgLatency != nil {
		return *x.MicroSecAvgLatency
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMicroSecMinLatency() uint32 {
	if x != nil && x.MicroSecMinLatency != nil {
		return *x.MicroSecMinLatency
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMicroSecMaxLatency() uint32 {
	if x != nil && x.MicroSecMaxLatency != nil {
		return *x.MicroSecMaxLatency
	}
	return 0
}

type CMsgClientServersAvailable_Server_Types_Available struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *uint32                `protobuf:"varint,1,opt,name=server" json:"server,omitempty"`
	Changed       *bool                  `protobuf:"varint,2,opt,name=changed" json:"changed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientServersAvailable_Server_Types_Available) Reset() {
	*x = CMsgClientServersAvailable_Server_Types_Available{}
	mi := &file_steammessages_clientserver_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientServersAvailable_Server_Types_Available) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServersAvailable_Server_Types_Available) ProtoMessage() {}

func (x *CMsgClientServersAvailable_Server_Types_Available) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServersAvailable_Server_Types_Available.ProtoReflect.Descriptor instead.
func (*CMsgClientServersAvailable_Server_Types_Available) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CMsgClientServersAvailable_Server_Types_Available) GetServer() uint32 {
	if x != nil && x.Server != nil {
		return *x.Server
	}
	return 0
}

func (x *CMsgClientServersAvailable_Server_Types_Available) GetChanged() bool {
	if x != nil && x.Changed != nil {
		return *x.Changed
	}
	return false
}

type CMsgClientAMGetPersonaNameHistory_IdInstance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientAMGetPersonaNameHistory_IdInstance) Reset() {
	*x = CMsgClientAMGetPersonaNameHistory_IdInstance{}
	mi := &file_steammessages_clientserver_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAMGetPersonaNameHistory_IdInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistory_IdInstance) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistory_IdInstance) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistory_IdInstance.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistory_IdInstance) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{32, 0}
}

func (x *CMsgClientAMGetPersonaNameHistory_IdInstance) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance struct {
	state         protoimpl.MessageState                                                      `protogen:"open.v1"`
	Eresult       *int32                                                                      `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Steamid       *uint64                                                                     `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Names         []*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance fields.
const (
	Default_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_Eresult = int32(2)
)

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) Reset() {
	*x = CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance{}
	mi := &file_steammessages_clientserver_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{33, 0}
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_Eresult
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) GetNames() []*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance {
	if x != nil {
		return x.Names
	}
	return nil
}

type CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NameSince     *uint32                `protobuf:"fixed32,1,opt,name=name_since,json=nameSince" json:"name_since,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) Reset() {
	*x = CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance{}
	mi := &file_steammessages_clientserver_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{33, 0, 0}
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) GetNameSince() uint32 {
	if x != nil && x.NameSince != nil {
		return *x.NameSince
	}
	return 0
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CMsgClientClanState_NameInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClanName      *string                `protobuf:"bytes,1,opt,name=clan_name,json=clanName" json:"clan_name,omitempty"`
	ShaAvatar     []byte                 `protobuf:"bytes,2,opt,name=sha_avatar,json=shaAvatar" json:"sha_avatar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientClanState_NameInfo) Reset() {
	*x = CMsgClientClanState_NameInfo{}
	mi := &file_steammessages_clientserver_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientClanState_NameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientClanState_NameInfo) ProtoMessage() {}

func (x *CMsgClientClanState_NameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientClanState_NameInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientClanState_NameInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{35, 0}
}

func (x *CMsgClientClanState_NameInfo) GetClanName() string {
	if x != nil && x.ClanName != nil {
		return *x.ClanName
	}
	return ""
}

func (x *CMsgClientClanState_NameInfo) GetShaAvatar() []byte {
	if x != nil {
		return x.ShaAvatar
	}
	return nil
}

type CMsgClientClanState_UserCounts struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Members         *uint32                `protobuf:"varint,1,opt,name=members" json:"members,omitempty"`
	Online          *uint32                `protobuf:"varint,2,opt,name=online" json:"online,omitempty"`
	Chatting        *uint32                `protobuf:"varint,3,opt,name=chatting" json:"chatting,omitempty"`
	InGame          *uint32                `protobuf:"varint,4,opt,name=in_game,json=inGame" json:"in_game,omitempty"`
	ChatRoomMembers *uint32                `protobuf:"varint,5,opt,name=chat_room_members,json=chatRoomMembers" json:"chat_room_members,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientClanState_UserCounts) Reset() {
	*x = CMsgClientClanState_UserCounts{}
	mi := &file_steammessages_clientserver_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientClanState_UserCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientClanState_UserCounts) ProtoMessage() {}

func (x *CMsgClientClanState_UserCounts) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientClanState_UserCounts.ProtoReflect.Descriptor instead.
func (*CMsgClientClanState_UserCounts) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{35, 1}
}

func (x *CMsgClientClanState_UserCounts) GetMembers() uint32 {
	if x != nil && x.Members != nil {
		return *x.Members
	}
	return 0
}

func (x *CMsgClientClanState_UserCounts) GetOnline() uint32 {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return 0
}

func (x *CMsgClientClanState_UserCounts) GetChatting() uint32 {
	if x != nil && x.Chatting != nil {
		return *x.Chatting
	}
	return 0
}

func (x *CMsgClientClanState_UserCounts) GetInGame() uint32 {
	if x != nil && x.InGame != nil {
		return *x.InGame
	}
	return 0
}

func (x *CMsgClientClanState_UserCounts) GetChatRoomMembers() uint32 {
	if x != nil && x.ChatRoomMembers != nil {
		return *x.ChatRoomMembers
	}
	return 0
}

type CMsgClientClanState_Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gid           *uint64                `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	EventTime     *uint32                `protobuf:"varint,2,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	Headline      *string                `protobuf:"bytes,3,opt,name=headline" json:"headline,omitempty"`
	GameId        *uint64                `protobuf:"fixed64,4,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	JustPosted    *bool                  `protobuf:"varint,5,opt,name=just_posted,json=justPosted" json:"just_posted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientClanState_Event) Reset() {
	*x = CMsgClientClanState_Event{}
	mi := &file_steammessages_clientserver_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientClanState_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientClanState_Event) ProtoMessage() {}

func (x *CMsgClientClanState_Event) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientClanState_Event.ProtoReflect.Descriptor instead.
func (*CMsgClientClanState_Event) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_proto_rawDescGZIP(), []int{35, 2}
}

func (x *CMsgClientClanState_Event) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CMsgClientClanState_Event) GetEventTime() uint32 {
	if x != nil && x.EventTime != nil {
		return *x.EventTime
	}
	return 0
}

func (x *CMsgClientClanState_Event) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *CMsgClientClanState_Event) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientClanState_Event) GetJustPosted() bool {
	if x != nil && x.JustPosted != nil {
		return *x.JustPosted
	}
	return false
}

var File_steammessages_clientserver_proto protoreflect.FileDescriptor

const file_steammessages_clientserver_proto_rawDesc = "" +
	"\n" +
	" steammessages_clientserver.proto\x1a\x18steammessages_base.proto\x1a\x1aencrypted_app_ticket.proto\"\x95\x01\n" +
	"\"CMsgClientRegisterAuthTicketWithCM\x12)\n" +
	"\x10protocol_version\x18\x01 \x01(\rR\x0fprotocolVersion\x12\x16\n" +
	"\x06ticket\x18\x03 \x01(\fR\x06ticket\x12,\n" +
	"\x12client_instance_id\x18\x04 \x01(\x04R\x10clientInstanceId\"\xbb\x02\n" +
	"\x1cCMsgClientTicketAuthComplete\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\x06R\x06gameId\x12\x16\n" +
	"\x06estate\x18\x03 \x01(\rR\x06estate\x124\n" +
	"\x16eauth_session_response\x18\x04 \x01(\rR\x14eauthSessionResponse\x12+\n" +
	"\x11DEPRECATED_ticket\x18\x05 \x01(\fR\x10DEPRECATEDTicket\x12\x1d\n" +
	"\n" +
	"ticket_crc\x18\x06 \x01(\rR\tticketCrc\x12'\n" +
	"\x0fticket_sequence\x18\a \x01(\rR\x0eticketSequence\x12$\n" +
	"\x0eowner_steam_id\x18\b \x01(\x06R\fownerSteamId\"\xf1\x01\n" +
	"\x1bCMsgClientP2PConnectionInfo\x12\"\n" +
	"\rsteam_id_dest\x18\x01 \x01(\x06R\vsteamIdDest\x12 \n" +
	"\fsteam_id_src\x18\x02 \x01(\x06R\n" +
	"steamIdSrc\x12\x15\n" +
	"\x06app_id\x18\x03 \x01(\rR\x05appId\x12\x1c\n" +
	"\tcandidate\x18\x04 \x01(\fR\tcandidate\x127\n" +
	"\x18legacy_connection_id_src\x18\x05 \x01(\x06R\x15legacyConnectionIdSrc\x12\x1e\n" +
	"\n" +
	"rendezvous\x18\x06 \x01(\fR\n" +
	"rendezvous\"\xa2\x02\n" +
	"\x1fCMsgClientP2PConnectionFailInfo\x12\"\n" +
	"\rsteam_id_dest\x18\x01 \x01(\x06R\vsteamIdDest\x12 \n" +
	"\fsteam_id_src\x18\x02 \x01(\x06R\n" +
	"steamIdSrc\x12\x15\n" +
	"\x06app_id\x18\x03 \x01(\rR\x05appId\x12,\n" +
	"\x12ep2p_session_error\x18\x04 \x01(\rR\x10ep2pSessionError\x12,\n" +
	"\x12connection_id_dest\x18\x05 \x01(\x06R\x10connectionIdDest\x12!\n" +
	"\fclose_reason\x18\a \x01(\rR\vcloseReason\x12#\n" +
	"\rclose_message\x18\b \x01(\tR\fcloseMessage\"S\n" +
	"\x1fCMsgClientNetworkingCertRequest\x12\x19\n" +
	"\bkey_data\x18\x02 \x01(\fR\akeyData\x12\x15\n" +
	"\x06app_id\x18\x03 \x01(\rR\x05appId\"r\n" +
	"\x1dCMsgClientNetworkingCertReply\x12\x12\n" +
	"\x04cert\x18\x04 \x01(\fR\x04cert\x12\x1a\n" +
	"\tca_key_id\x18\x05 \x01(\x06R\acaKeyId\x12!\n" +
	"\fca_signature\x18\x06 \x01(\fR\vcaSignature\">\n" +
	"%CMsgClientNetworkingMobileCertRequest\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\"H\n" +
	"#CMsgClientNetworkingMobileCertReply\x12!\n" +
	"\fencoded_cert\x18\x01 \x01(\tR\vencodedCert\"8\n" +
	"\x1fCMsgClientGetAppOwnershipTicket\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\"u\n" +
	"'CMsgClientGetAppOwnershipTicketResponse\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\r:\x012R\aeresult\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId\x12\x16\n" +
	"\x06ticket\x18\x03 \x01(\fR\x06ticket\".\n" +
	"\x16CMsgClientSessionToken\x12\x14\n" +
	"\x05token\x18\x01 \x01(\x04R\x05token\"f\n" +
	"\x1bCMsgClientGameConnectTokens\x12/\n" +
	"\x12max_tokens_to_keep\x18\x01 \x01(\r:\x0210R\x0fmaxTokensToKeep\x12\x16\n" +
	"\x06tokens\x18\x02 \x03(\fR\x06tokens\"\x8f\x0e\n" +
	"\x15CMsgClientGamesPlayed\x12D\n" +
	"\fgames_played\x18\x01 \x03(\v2!.CMsgClientGamesPlayed.GamePlayedR\vgamesPlayed\x12$\n" +
	"\x0eclient_os_type\x18\x02 \x01(\rR\fclientOsType\x122\n" +
	"\x15cloud_gaming_platform\x18\x03 \x01(\rR\x13cloudGamingPlatform\x127\n" +
	"\x17recent_reauthentication\x18\x04 \x01(\bR\x16recentReauthentication\x1a\x80\x01\n" +
	"\vProcessInfo\x12\x1d\n" +
	"\n" +
	"process_id\x18\x01 \x01(\rR\tprocessId\x12*\n" +
	"\x11process_id_parent\x18\x02 \x01(\rR\x0fprocessIdParent\x12&\n" +
	"\x0fparent_is_steam\x18\x03 \x01(\bR\rparentIsSteam\x1a\x99\v\n" +
	"\n" +
	"GamePlayed\x12\x1e\n" +
	"\vsteam_id_gs\x18\x01 \x01(\x04R\tsteamIdGs\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\x06R\x06gameId\x12;\n" +
	"\x1adeprecated_game_ip_address\x18\x03 \x01(\rR\x17deprecatedGameIpAddress\x12\x1b\n" +
	"\tgame_port\x18\x04 \x01(\rR\bgamePort\x12\x1b\n" +
	"\tis_secure\x18\x05 \x01(\bR\bisSecure\x12\x14\n" +
	"\x05token\x18\x06 \x01(\fR\x05token\x12&\n" +
	"\x0fgame_extra_info\x18\a \x01(\tR\rgameExtraInfo\x12$\n" +
	"\x0egame_data_blob\x18\b \x01(\fR\fgameDataBlob\x12\x1d\n" +
	"\n" +
	"process_id\x18\t \x01(\rR\tprocessId\x122\n" +
	"\x15streaming_provider_id\x18\n" +
	" \x01(\rR\x13streamingProviderId\x12\x1d\n" +
	"\n" +
	"game_flags\x18\v \x01(\rR\tgameFlags\x12\x19\n" +
	"\bowner_id\x18\f \x01(\rR\aownerId\x12\"\n" +
	"\rvr_hmd_vendor\x18\r \x01(\tR\vvrHmdVendor\x12 \n" +
	"\fvr_hmd_model\x18\x0e \x01(\tR\n" +
	"vrHmdModel\x12/\n" +
	"\x12launch_option_type\x18\x0f \x01(\r:\x010R\x10launchOptionType\x12:\n" +
	"\x17primary_controller_type\x18\x10 \x01(\x05:\x02-1R\x15primaryControllerType\x12E\n" +
	"\x1fprimary_steam_controller_serial\x18\x11 \x01(\tR\x1cprimarySteamControllerSerial\x12B\n" +
	"\x1ctotal_steam_controller_count\x18\x12 \x01(\r:\x010R\x19totalSteamControllerCount\x12I\n" +
	" total_non_steam_controller_count\x18\x13 \x01(\r:\x010R\x1ctotalNonSteamControllerCount\x12@\n" +
	"\x1bcontroller_workshop_file_id\x18\x14 \x01(\x04:\x010R\x18controllerWorkshopFileId\x12&\n" +
	"\rlaunch_source\x18\x15 \x01(\r:\x010R\flaunchSource\x12$\n" +
	"\x0evr_hmd_runtime\x18\x16 \x01(\rR\fvrHmdRuntime\x126\n" +
	"\x0fgame_ip_address\x18\x17 \x01(\v2\x0e.CMsgIPAddressR\rgameIpAddress\x12?\n" +
	"\x1acontroller_connection_type\x18\x18 \x01(\r:\x010R\x18controllerConnectionType\x12(\n" +
	"\x10game_os_platform\x18\x19 \x01(\x05R\x0egameOsPlatform\x12\"\n" +
	"\rgame_build_id\x18\x1a \x01(\rR\vgameBuildId\x12'\n" +
	"\x0ecompat_tool_id\x18\x1b \x01(\r:\x010R\fcompatToolId\x12&\n" +
	"\x0fcompat_tool_cmd\x18\x1c \x01(\tR\rcompatToolCmd\x12/\n" +
	"\x14compat_tool_build_id\x18\x1d \x01(\rR\x11compatToolBuildId\x12\x1b\n" +
	"\tbeta_name\x18\x1e \x01(\tR\bbetaName\x12\x1f\n" +
	"\vdlc_context\x18\x1f \x01(\rR\n" +
	"dlcContext\x12J\n" +
	"\x0fprocess_id_list\x18  \x03(\v2\".CMsgClientGamesPlayed.ProcessInfoR\rprocessIdList\"P\n" +
	"\rCMsgGSApprove\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12$\n" +
	"\x0eowner_steam_id\x18\x02 \x01(\x06R\fownerSteamId\"k\n" +
	"\n" +
	"CMsgGSDeny\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12!\n" +
	"\fedeny_reason\x18\x02 \x01(\x05R\vedenyReason\x12\x1f\n" +
	"\vdeny_string\x18\x03 \x01(\tR\n" +
	"denyString\"J\n" +
	"\n" +
	"CMsgGSKick\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12!\n" +
	"\fedeny_reason\x18\x02 \x01(\x05R\vedenyReason\"\xaa\x02\n" +
	"\x12CMsgClientAuthList\x12\x1f\n" +
	"\vtokens_left\x18\x01 \x01(\rR\n" +
	"tokensLeft\x12(\n" +
	"\x10last_request_seq\x18\x02 \x01(\rR\x0elastRequestSeq\x12>\n" +
	"\x1clast_request_seq_from_server\x18\x03 \x01(\rR\x18lastRequestSeqFromServer\x12)\n" +
	"\atickets\x18\x04 \x03(\v2\x0f.CMsgAuthTicketR\atickets\x12\x17\n" +
	"\aapp_ids\x18\x05 \x03(\rR\x06appIds\x12)\n" +
	"\x10message_sequence\x18\x06 \x01(\rR\x0fmessageSequence\x12\x1a\n" +
	"\bfiltered\x18\a \x01(\bR\bfiltered\"z\n" +
	"\x15CMsgClientAuthListAck\x12\x1d\n" +
	"\n" +
	"ticket_crc\x18\x01 \x03(\rR\tticketCrc\x12\x17\n" +
	"\aapp_ids\x18\x02 \x03(\rR\x06appIds\x12)\n" +
	"\x10message_sequence\x18\x03 \x01(\rR\x0fmessageSequence\"\xa0\x06\n" +
	"\x15CMsgClientLicenseList\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\x05:\x012R\aeresult\x12:\n" +
	"\blicenses\x18\x02 \x03(\v2\x1e.CMsgClientLicenseList.LicenseR\blicenses\x1a\xad\x05\n" +
	"\aLicense\x12\x1d\n" +
	"\n" +
	"package_id\x18\x01 \x01(\rR\tpackageId\x12!\n" +
	"\ftime_created\x18\x02 \x01(\aR\vtimeCreated\x12*\n" +
	"\x11time_next_process\x18\x03 \x01(\aR\x0ftimeNextProcess\x12!\n" +
	"\fminute_limit\x18\x04 \x01(\x05R\vminuteLimit\x12!\n" +
	"\fminutes_used\x18\x05 \x01(\x05R\vminutesUsed\x12%\n" +
	"\x0epayment_method\x18\x06 \x01(\rR\rpaymentMethod\x12\x14\n" +
	"\x05flags\x18\a \x01(\rR\x05flags\x122\n" +
	"\x15purchase_country_code\x18\b \x01(\tR\x13purchaseCountryCode\x12!\n" +
	"\flicense_type\x18\t \x01(\rR\vlicenseType\x12%\n" +
	"\x0eterritory_code\x18\n" +
	" \x01(\x05R\rterritoryCode\x12#\n" +
	"\rchange_number\x18\v \x01(\x05R\fchangeNumber\x12\x19\n" +
	"\bowner_id\x18\f \x01(\rR\aownerId\x12%\n" +
	"\x0einitial_period\x18\r \x01(\rR\rinitialPeriod\x12*\n" +
	"\x11initial_time_unit\x18\x0e \x01(\rR\x0finitialTimeUnit\x12%\n" +
	"\x0erenewal_period\x18\x0f \x01(\rR\rrenewalPeriod\x12*\n" +
	"\x11renewal_time_unit\x18\x10 \x01(\rR\x0frenewalTimeUnit\x12!\n" +
	"\faccess_token\x18\x11 \x01(\x04R\vaccessToken\x12*\n" +
	"\x11master_package_id\x18\x12 \x01(\rR\x0fmasterPackageId\"\x8c\x02\n" +
	"\x1aCMsgClientIsLimitedAccount\x12.\n" +
	"\x13bis_limited_account\x18\x01 \x01(\bR\x11bisLimitedAccount\x120\n" +
	"\x14bis_community_banned\x18\x02 \x01(\bR\x12bisCommunityBanned\x12,\n" +
	"\x12bis_locked_account\x18\x03 \x01(\bR\x10bisLockedAccount\x12^\n" +
	"-bis_limited_account_allowed_to_invite_friends\x18\x04 \x01(\bR'bisLimitedAccountAllowedToInviteFriends\"\xd5\x01\n" +
	"\x1eCMsgClientRequestedClientStats\x12O\n" +
	"\rstats_to_send\x18\x01 \x03(\v2+.CMsgClientRequestedClientStats.StatsToSendR\vstatsToSend\x1ab\n" +
	"\vStatsToSend\x12\x1f\n" +
	"\vclient_stat\x18\x01 \x01(\rR\n" +
	"clientStat\x122\n" +
	"\x15stat_aggregate_method\x18\x02 \x01(\rR\x13statAggregateMethod\"\x85\x02\n" +
	"\x0fCMsgClientStat2\x12<\n" +
	"\vstat_detail\x18\x01 \x03(\v2\x1b.CMsgClientStat2.StatDetailR\n" +
	"statDetail\x1a\xb3\x01\n" +
	"\n" +
	"StatDetail\x12\x1f\n" +
	"\vclient_stat\x18\x01 \x01(\rR\n" +
	"clientStat\x12\x19\n" +
	"\bll_value\x18\x02 \x01(\x03R\allValue\x12\x1e\n" +
	"\vtime_of_day\x18\x03 \x01(\rR\ttimeOfDay\x12\x17\n" +
	"\acell_id\x18\x04 \x01(\rR\x06cellId\x12\x19\n" +
	"\bdepot_id\x18\x05 \x01(\rR\adepotId\x12\x15\n" +
	"\x06app_id\x18\x06 \x01(\rR\x05appId\"\xa6\x01\n" +
	"\x16CMsgClientInviteToGame\x12\"\n" +
	"\rsteam_id_dest\x18\x01 \x01(\x06R\vsteamIdDest\x12 \n" +
	"\fsteam_id_src\x18\x02 \x01(\x06R\n" +
	"steamIdSrc\x12%\n" +
	"\x0econnect_string\x18\x03 \x01(\tR\rconnectString\x12\x1f\n" +
	"\vremote_play\x18\x04 \x01(\tR\n" +
	"remotePlay\"\x98\x02\n" +
	"\x14CMsgClientChatInvite\x12(\n" +
	"\x10steam_id_invited\x18\x01 \x01(\x06R\x0esteamIdInvited\x12\"\n" +
	"\rsteam_id_chat\x18\x02 \x01(\x06R\vsteamIdChat\x12&\n" +
	"\x0fsteam_id_patron\x18\x03 \x01(\x06R\rsteamIdPatron\x12#\n" +
	"\rchatroom_type\x18\x04 \x01(\x05R\fchatroomType\x12/\n" +
	"\x14steam_id_friend_chat\x18\x05 \x01(\x06R\x11steamIdFriendChat\x12\x1b\n" +
	"\tchat_name\x18\x06 \x01(\tR\bchatName\x12\x17\n" +
	"\agame_id\x18\a \x01(\x06R\x06gameId\"\xd2\r\n" +
	"\x19CMsgClientConnectionStats\x12G\n" +
	"\vstats_logon\x18\x01 \x01(\v2&.CMsgClientConnectionStats.Stats_LogonR\n" +
	"statsLogon\x12G\n" +
	"\vstats_vconn\x18\x02 \x01(\v2&.CMsgClientConnectionStats.Stats_VConnR\n" +
	"statsVconn\x1a\xae\x04\n" +
	"\vStats_Logon\x12)\n" +
	"\x10connect_attempts\x18\x01 \x01(\x05R\x0fconnectAttempts\x12+\n" +
	"\x11connect_successes\x18\x02 \x01(\x05R\x10connectSuccesses\x12)\n" +
	"\x10connect_failures\x18\x03 \x01(\x05R\x0fconnectFailures\x12/\n" +
	"\x13connections_dropped\x18\x04 \x01(\x05R\x12connectionsDropped\x12'\n" +
	"\x0fseconds_running\x18\x05 \x01(\rR\x0esecondsRunning\x121\n" +
	"\x14msec_tologonthistime\x18\x06 \x01(\rR\x13msecTologonthistime\x12\"\n" +
	"\rcount_bad_cms\x18\a \x01(\rR\vcountBadCms\x12.\n" +
	"\x13no_udp_connectivity\x18\b \x01(\bR\x11noUdpConnectivity\x12.\n" +
	"\x13no_tcp_connectivity\x18\t \x01(\bR\x11noTcpConnectivity\x12A\n" +
	"\x1dno_websocket_443_connectivity\x18\n" +
	" \x01(\bR\x1anoWebsocket443Connectivity\x12H\n" +
	"!no_websocket_non_443_connectivity\x18\v \x01(\bR\x1dnoWebsocketNon443Connectivity\x1a\xaa\x01\n" +
	"\tStats_UDP\x12\x1b\n" +
	"\tpkts_sent\x18\x01 \x01(\x04R\bpktsSent\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x02 \x01(\x04R\tbytesSent\x12\x1b\n" +
	"\tpkts_recv\x18\x03 \x01(\x04R\bpktsRecv\x12%\n" +
	"\x0epkts_processed\x18\x04 \x01(\x04R\rpktsProcessed\x12\x1d\n" +
	"\n" +
	"bytes_recv\x18\x05 \x01(\x04R\tbytesRecv\x1a\xc4\x06\n" +
	"\vStats_VConn\x12'\n" +
	"\x0fconnections_udp\x18\x01 \x01(\rR\x0econnectionsUdp\x12'\n" +
	"\x0fconnections_tcp\x18\x02 \x01(\rR\x0econnectionsTcp\x12A\n" +
	"\tstats_udp\x18\x03 \x01(\v2$.CMsgClientConnectionStats.Stats_UDPR\bstatsUdp\x12%\n" +
	"\x0epkts_abandoned\x18\x04 \x01(\x04R\rpktsAbandoned\x12*\n" +
	"\x11conn_req_received\x18\x05 \x01(\x04R\x0fconnReqReceived\x12\x1f\n" +
	"\vpkts_resent\x18\x06 \x01(\x04R\n" +
	"pktsResent\x12\x1b\n" +
	"\tmsgs_sent\x18\a \x01(\x04R\bmsgsSent\x12(\n" +
	"\x10msgs_sent_failed\x18\b \x01(\x04R\x0emsgsSentFailed\x12\x1b\n" +
	"\tmsgs_recv\x18\t \x01(\x04R\bmsgsRecv\x12%\n" +
	"\x0edatagrams_sent\x18\n" +
	" \x01(\x04R\rdatagramsSent\x12%\n" +
	"\x0edatagrams_recv\x18\v \x01(\x04R\rdatagramsRecv\x12\"\n" +
	"\rbad_pkts_recv\x18\f \x01(\x04R\vbadPktsRecv\x123\n" +
	"\x16unknown_conn_pkts_recv\x18\r \x01(\x04R\x13unknownConnPktsRecv\x12(\n" +
	"\x10missed_pkts_recv\x18\x0e \x01(\x04R\x0emissedPktsRecv\x12\"\n" +
	"\rdup_pkts_recv\x18\x0f \x01(\x04R\vdupPktsRecv\x12:\n" +
	"\x19failed_connect_challenges\x18\x10 \x01(\x04R\x17failedConnectChallenges\x121\n" +
	"\x15micro_sec_avg_latency\x18\x11 \x01(\rR\x12microSecAvgLatency\x121\n" +
	"\x15micro_sec_min_latency\x18\x12 \x01(\rR\x12microSecMinLatency\x121\n" +
	"\x15micro_sec_max_latency\x18\x13 \x01(\rR\x12microSecMaxLatency\"\x94\x02\n" +
	"\x1aCMsgClientServersAvailable\x12h\n" +
	"\x16server_types_available\x18\x01 \x03(\v22.CMsgClientServersAvailable.Server_Types_AvailableR\x14serverTypesAvailable\x12@\n" +
	"\x1dserver_type_for_auth_services\x18\x02 \x01(\rR\x19serverTypeForAuthServices\x1aJ\n" +
	"\x16Server_Types_Available\x12\x16\n" +
	"\x06server\x18\x01 \x01(\rR\x06server\x12\x18\n" +
	"\achanged\x18\x02 \x01(\bR\achanged\"O\n" +
	"$CMsgClientReportOverlayDetourFailure\x12'\n" +
	"\x0ffailure_strings\x18\x01 \x03(\tR\x0efailureStrings\"X\n" +
	"#CMsgClientRequestEncryptedAppTicket\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12\x1a\n" +
	"\buserdata\x18\x02 \x01(\fR\buserdata\"\xa8\x01\n" +
	"+CMsgClientRequestEncryptedAppTicketResponse\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12\x1b\n" +
	"\aeresult\x18\x02 \x01(\x05:\x012R\aeresult\x12E\n" +
	"\x14encrypted_app_ticket\x18\x03 \x01(\v2\x13.EncryptedAppTicketR\x12encryptedAppTicket\"\x87\x02\n" +
	"\x1aCMsgClientWalletInfoUpdate\x12\x1d\n" +
	"\n" +
	"has_wallet\x18\x01 \x01(\bR\thasWallet\x12\x18\n" +
	"\abalance\x18\x02 \x01(\x05R\abalance\x12\x1a\n" +
	"\bcurrency\x18\x03 \x01(\x05R\bcurrency\x12'\n" +
	"\x0fbalance_delayed\x18\x04 \x01(\x05R\x0ebalanceDelayed\x12\"\n" +
	"\tbalance64\x18\x05 \x01(\x03B\x04\xa0\xb6\x18\x01R\tbalance64\x121\n" +
	"\x11balance64_delayed\x18\x06 \x01(\x03B\x04\xa0\xb6\x18\x01R\x10balance64Delayed\x12\x14\n" +
	"\x05realm\x18\a \x01(\x05R\x05realm\"@\n" +
	"\x1bCMsgClientAMGetClanOfficers\x12!\n" +
	"\fsteamid_clan\x18\x01 \x01(\x06R\vsteamidClan\"\x8a\x01\n" +
	"#CMsgClientAMGetClanOfficersResponse\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\x05:\x012R\aeresult\x12!\n" +
	"\fsteamid_clan\x18\x02 \x01(\x06R\vsteamidClan\x12#\n" +
	"\rofficer_count\x18\x03 \x01(\x05R\fofficerCount\"\xa7\x01\n" +
	"!CMsgClientAMGetPersonaNameHistory\x12\x19\n" +
	"\bid_count\x18\x01 \x01(\x05R\aidCount\x12?\n" +
	"\x03Ids\x18\x02 \x03(\v2-.CMsgClientAMGetPersonaNameHistory.IdInstanceR\x03Ids\x1a&\n" +
	"\n" +
	"IdInstance\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\"\xf8\x02\n" +
	")CMsgClientAMGetPersonaNameHistoryResponse\x12Z\n" +
	"\tresponses\x18\x02 \x03(\v2<.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstanceR\tresponses\x1a\xee\x01\n" +
	"\x11NameTableInstance\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\x05:\x012R\aeresult\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x06R\asteamid\x12_\n" +
	"\x05names\x18\x03 \x03(\v2I.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstanceR\x05names\x1aA\n" +
	"\fNameInstance\x12\x1d\n" +
	"\n" +
	"name_since\x18\x01 \x01(\aR\tnameSince\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"Y\n" +
	"\x1eCMsgClientDeregisterWithServer\x12 \n" +
	"\veservertype\x18\x01 \x01(\rR\veservertype\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId\"\x81\x06\n" +
	"\x13CMsgClientClanState\x12!\n" +
	"\fsteamid_clan\x18\x01 \x01(\x06R\vsteamidClan\x12,\n" +
	"\x12clan_account_flags\x18\x03 \x01(\rR\x10clanAccountFlags\x12:\n" +
	"\tname_info\x18\x04 \x01(\v2\x1d.CMsgClientClanState.NameInfoR\bnameInfo\x12@\n" +
	"\vuser_counts\x18\x05 \x01(\v2\x1f.CMsgClientClanState.UserCountsR\n" +
	"userCounts\x122\n" +
	"\x06events\x18\x06 \x03(\v2\x1a.CMsgClientClanState.EventR\x06events\x12@\n" +
	"\rannouncements\x18\a \x03(\v2\x1a.CMsgClientClanState.EventR\rannouncements\x12*\n" +
	"\x11chat_room_private\x18\b \x01(\bR\x0fchatRoomPrivate\x1aF\n" +
	"\bNameInfo\x12\x1b\n" +
	"\tclan_name\x18\x01 \x01(\tR\bclanName\x12\x1d\n" +
	"\n" +
	"sha_avatar\x18\x02 \x01(\fR\tshaAvatar\x1a\x9f\x01\n" +
	"\n" +
	"UserCounts\x12\x18\n" +
	"\amembers\x18\x01 \x01(\rR\amembers\x12\x16\n" +
	"\x06online\x18\x02 \x01(\rR\x06online\x12\x1a\n" +
	"\bchatting\x18\x03 \x01(\rR\bchatting\x12\x17\n" +
	"\ain_game\x18\x04 \x01(\rR\x06inGame\x12*\n" +
	"\x11chat_room_members\x18\x05 \x01(\rR\x0fchatRoomMembers\x1a\x8e\x01\n" +
	"\x05Event\x12\x10\n" +
	"\x03gid\x18\x01 \x01(\x06R\x03gid\x12\x1d\n" +
	"\n" +
	"event_time\x18\x02 \x01(\rR\teventTime\x12\x1a\n" +
	"\bheadline\x18\x03 \x01(\tR\bheadline\x12\x17\n" +
	"\agame_id\x18\x04 \x01(\x06R\x06gameId\x12\x1f\n" +
	"\vjust_posted\x18\x05 \x01(\bR\n" +
	"justPostedB:H\x01Z3github.com/Philipp15b/go-steam/v3/protocol/protobuf\x80\x01\x00"

var (
	file_steammessages_clientserver_proto_rawDescOnce sync.Once
	file_steammessages_clientserver_proto_rawDescData []byte
)

func file_steammessages_clientserver_proto_rawDescGZIP() []byte {
	file_steammessages_clientserver_proto_rawDescOnce.Do(func() {
		file_steammessages_clientserver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_clientserver_proto_rawDesc), len(file_steammessages_clientserver_proto_rawDesc)))
	})
	return file_steammessages_clientserver_proto_rawDescData
}

var file_steammessages_clientserver_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_steammessages_clientserver_proto_goTypes = []any{
	(*CMsgClientRegisterAuthTicketWithCM)(nil),                                       // 0: CMsgClientRegisterAuthTicketWithCM
	(*CMsgClientTicketAuthComplete)(nil),                                             // 1: CMsgClientTicketAuthComplete
	(*CMsgClientP2PConnectionInfo)(nil),                                              // 2: CMsgClientP2PConnectionInfo
	(*CMsgClientP2PConnectionFailInfo)(nil),                                          // 3: CMsgClientP2PConnectionFailInfo
	(*CMsgClientNetworkingCertRequest)(nil),                                          // 4: CMsgClientNetworkingCertRequest
	(*CMsgClientNetworkingCertReply)(nil),                                            // 5: CMsgClientNetworkingCertReply
	(*CMsgClientNetworkingMobileCertRequest)(nil),                                    // 6: CMsgClientNetworkingMobileCertRequest
	(*CMsgClientNetworkingMobileCertReply)(nil),                                      // 7: CMsgClientNetworkingMobileCertReply
	(*CMsgClientGetAppOwnershipTicket)(nil),                                          // 8: CMsgClientGetAppOwnershipTicket
	(*CMsgClientGetAppOwnershipTicketResponse)(nil),                                  // 9: CMsgClientGetAppOwnershipTicketResponse
	(*CMsgClientSessionToken)(nil),                                                   // 10: CMsgClientSessionToken
	(*CMsgClientGameConnectTokens)(nil),                                              // 11: CMsgClientGameConnectTokens
	(*CMsgClientGamesPlayed)(nil),                                                    // 12: CMsgClientGamesPlayed
	(*CMsgGSApprove)(nil),                                                            // 13: CMsgGSApprove
	(*CMsgGSDeny)(nil),                                                               // 14: CMsgGSDeny
	(*CMsgGSKick)(nil),                                                               // 15: CMsgGSKick
	(*CMsgClientAuthList)(nil),                                                       // 16: CMsgClientAuthList
	(*CMsgClientAuthListAck)(nil),                                                    // 17: CMsgClientAuthListAck
	(*CMsgClientLicenseList)(nil),                                                    // 18: CMsgClientLicenseList
	(*CMsgClientIsLimitedAccount)(nil),                                               // 19: CMsgClientIsLimitedAccount
	(*CMsgClientRequestedClientStats)(nil),                                           // 20: CMsgClientRequestedClientStats
	(*CMsgClientStat2)(nil),                                                          // 21: CMsgClientStat2
	(*CMsgClientInviteToGame)(nil),                                                   // 22: CMsgClientInviteToGame
	(*CMsgClientChatInvite)(nil),                                                     // 23: CMsgClientChatInvite
	(*CMsgClientConnectionStats)(nil),                                                // 24: CMsgClientConnectionStats
	(*CMsgClientServersAvailable)(nil),                                               // 25: CMsgClientServersAvailable
	(*CMsgClientReportOverlayDetourFailure)(nil),                                     // 26: CMsgClientReportOverlayDetourFailure
	(*CMsgClientRequestEncryptedAppTicket)(nil),                                      // 27: CMsgClientRequestEncryptedAppTicket
	(*CMsgClientRequestEncryptedAppTicketResponse)(nil),                              // 28: CMsgClientRequestEncryptedAppTicketResponse
	(*CMsgClientWalletInfoUpdate)(nil),                                               // 29: CMsgClientWalletInfoUpdate
	(*CMsgClientAMGetClanOfficers)(nil),                                              // 30: CMsgClientAMGetClanOfficers
	(*CMsgClientAMGetClanOfficersResponse)(nil),                                      // 31: CMsgClientAMGetClanOfficersResponse
	(*CMsgClientAMGetPersonaNameHistory)(nil),                                        // 32: CMsgClientAMGetPersonaNameHistory
	(*CMsgClientAMGetPersonaNameHistoryResponse)(nil),                                // 33: CMsgClientAMGetPersonaNameHistoryResponse
	(*CMsgClientDeregisterWithServer)(nil),                                           // 34: CMsgClientDeregisterWithServer
	(*CMsgClientClanState)(nil),                                                      // 35: CMsgClientClanState
	(*CMsgClientGamesPlayed_ProcessInfo)(nil),                                        // 36: CMsgClientGamesPlayed.ProcessInfo
	(*CMsgClientGamesPlayed_GamePlayed)(nil),                                         // 37: CMsgClientGamesPlayed.GamePlayed
	(*CMsgClientLicenseList_License)(nil),                                            // 38: CMsgClientLicenseList.License
	(*CMsgClientRequestedClientStats_StatsToSend)(nil),                               // 39: CMsgClientRequestedClientStats.StatsToSend
	(*CMsgClientStat2_StatDetail)(nil),                                               // 40: CMsgClientStat2.StatDetail
	(*CMsgClientConnectionStats_Stats_Logon)(nil),                                    // 41: CMsgClientConnectionStats.Stats_Logon
	(*CMsgClientConnectionStats_Stats_UDP)(nil),                                      // 42: CMsgClientConnectionStats.Stats_UDP
	(*CMsgClientConnectionStats_Stats_VConn)(nil),                                    // 43: CMsgClientConnectionStats.Stats_VConn
	(*CMsgClientServersAvailable_Server_Types_Available)(nil),                        // 44: CMsgClientServersAvailable.Server_Types_Available
	(*CMsgClientAMGetPersonaNameHistory_IdInstance)(nil),                             // 45: CMsgClientAMGetPersonaNameHistory.IdInstance
	(*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance)(nil),              // 46: CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance
	(*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance)(nil), // 47: CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance
	(*CMsgClientClanState_NameInfo)(nil),                                             // 48: CMsgClientClanState.NameInfo
	(*CMsgClientClanState_UserCounts)(nil),                                           // 49: CMsgClientClanState.UserCounts
	(*CMsgClientClanState_Event)(nil),                                                // 50: CMsgClientClanState.Event
	(*CMsgAuthTicket)(nil),                                  // 51: CMsgAuthTicket
	(*EncryptedAppTicket)(nil),                            // 52: EncryptedAppTicket
	(*CMsgIPAddress)(nil),                                   // 53: CMsgIPAddress
}
var file_steammessages_clientserver_proto_depIdxs = []int32{
	37, // 0: CMsgClientGamesPlayed.games_played:type_name -> CMsgClientGamesPlayed.GamePlayed
	51, // 1: CMsgClientAuthList.tickets:type_name -> CMsgAuthTicket
	38, // 2: CMsgClientLicenseList.licenses:type_name -> CMsgClientLicenseList.License
	39, // 3: CMsgClientRequestedClientStats.stats_to_send:type_name -> CMsgClientRequestedClientStats.StatsToSend
	40, // 4: CMsgClientStat2.stat_detail:type_name -> CMsgClientStat2.StatDetail
	41, // 5: CMsgClientConnectionStats.stats_logon:type_name -> CMsgClientConnectionStats.Stats_Logon
	43, // 6: CMsgClientConnectionStats.stats_vconn:type_name -> CMsgClientConnectionStats.Stats_VConn
	44, // 7: CMsgClientServersAvailable.server_types_available:type_name -> CMsgClientServersAvailable.Server_Types_Available
	52, // 8: CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket:type_name -> EncryptedAppTicket
	45, // 9: CMsgClientAMGetPersonaNameHistory.Ids:type_name -> CMsgClientAMGetPersonaNameHistory.IdInstance
	46, // 10: CMsgClientAMGetPersonaNameHistoryResponse.responses:type_name -> CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance
	48, // 11: CMsgClientClanState.name_info:type_name -> CMsgClientClanState.NameInfo
	49, // 12: CMsgClientClanState.user_counts:type_name -> CMsgClientClanState.UserCounts
	50, // 13: CMsgClientClanState.events:type_name -> CMsgClientClanState.Event
	50, // 14: CMsgClientClanState.announcements:type_name -> CMsgClientClanState.Event
	53, // 15: CMsgClientGamesPlayed.GamePlayed.game_ip_address:type_name -> CMsgIPAddress
	36, // 16: CMsgClientGamesPlayed.GamePlayed.process_id_list:type_name -> CMsgClientGamesPlayed.ProcessInfo
	42, // 17: CMsgClientConnectionStats.Stats_VConn.stats_udp:type_name -> CMsgClientConnectionStats.Stats_UDP
	47, // 18: CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names:type_name -> CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_steammessages_clientserver_proto_init() }
func file_steammessages_clientserver_proto_init() {
	if File_steammessages_clientserver_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_clientserver_proto_rawDesc), len(file_steammessages_clientserver_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_clientserver_proto_goTypes,
		DependencyIndexes: file_steammessages_clientserver_proto_depIdxs,
		MessageInfos:      file_steammessages_clientserver_proto_msgTypes,
	}.Build()
	File_steammessages_clientserver_proto = out.File
	file_steammessages_clientserver_proto_goTypes = nil
	file_steammessages_clientserver_proto_depIdxs = nil
}
